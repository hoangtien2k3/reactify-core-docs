"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[7060],{2106:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>j,frontMatter:()=>t,metadata:()=>c,toc:()=>h});var r=i(5893),n=i(1151),l=i(7815),s=i(7618);const t={title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},o="Examples",c={id:"serializer/examples",title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",source:"@site/docs/serializer/examples.mdx",sourceDirName:"serializer",slug:"/serializer/examples",permalink:"/serializer/examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},sidebar:"docs",previous:{title:"Overview",permalink:"/serializer"},next:{title:"Overview",permalink:"/specializer"}},d={},h=[{value:"Simple Object Serialization",id:"simple-object-serialization",level:2},{value:"Java record Serialization",id:"java-record-serialization",level:2},{value:"Generics and Interfaces",id:"generics-and-interfaces",level:2},{value:"Nested type serialization",id:"nested-type-serialization",level:2},{value:"Fixed Size and Nullable Fields Serialization",id:"fixed-size-and-nullable-fields-serialization",level:2},{value:"Custom serializer",id:"custom-serializer",level:2}];function u(e){const a={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(a.admonition,{type:"note",children:[(0,r.jsx)(a.p,{children:"To run the examples, you need to clone ActiveJ from GitHub"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"git clone https://github.com/activej/activej\n"})}),(0,r.jsxs)(a.p,{children:["And import it as a Maven project. Check out tag ",(0,r.jsx)(a.strong,{children:(0,r.jsx)(l.Z,{name:"currentVersion"})}),". Before running the examples, build the project.\nThese examples are located at ",(0,r.jsx)(a.code,{children:"activej/examples/core/serializer"})]})]}),"\n",(0,r.jsx)(a.h2,{id:"simple-object-serialization",children:"Simple Object Serialization"}),"\n",(0,r.jsx)(a.p,{children:"To create classes whose instances can be serialized/deserialized, special annotations must be used:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(s.Z,{text:"@Serialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Serialize.java"})," annotation with order number on property getter. Parameter ",(0,r.jsx)(a.code,{children:"order"})," provides better compatibility if classes are changed."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(s.Z,{text:"@Deserialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Deserialize.java"})," annotation with property name (which should be the same name as the one in getter) in constructor."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"This is enough to create serializable POJOs, for example:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_1",children:'public static class Person {\n  public Person(@Deserialize("age") int age, @Deserialize("name") String name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Serialize\n  public final int age;\n\n  @Serialize\n  public final String name;\n\n  private String surname;\n\n  @Serialize\n  public String getSurname() {\n    return surname;\n  }\n\n  public void setSurname(String surname) {\n    this.surname = surname;\n  }\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Now let's do some serialization. We'll create an instance of a ",(0,r.jsx)(a.code,{children:"Person"})," class, a byte array that will store the result of serialization, and an instance of a ",(0,r.jsx)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java"})," class, which represents the serializer that encodes and decodes ",(0,r.jsx)(a.code,{children:"<T>"})," values into byte arrays (in this case ",(0,r.jsx)(a.code,{children:"<Person>"})," values):"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_2",children:'Person jim = new Person(34, "Jim");\njim.setSurname("Smith");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerFactory.defaultInstance()\n  .create(Person.class);\n'})}),"\n",(0,r.jsxs)(a.p,{children:["That's it, now we can serialize and deserialize our ",(0,r.jsx)(a.code,{children:"Person"})," instance:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_3",children:"serializer.encode(buffer, 0, jim);\nPerson johnCopy = serializer.decode(buffer, 0);\n"})}),"\n",(0,r.jsx)(a.p,{children:"Let's make a simple test to check if everything works correctly:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",children:'System.out.println(jim.age + " " + johnCopy.age);\nSystem.out.println(jim.name + " " + johnCopy.name);\nSystem.out.println(jim.getSurname() + " " + johnCopy.getSurname());\n'})}),"\n",(0,r.jsx)(a.p,{children:"After you run the example, you'll receive the following output:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"34 34\nJim Jim\nSmith Smith\n"})}),"\n",(0,r.jsx)(a.p,{children:"Which means that the serialization and deserialization worked correctly."}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java"})]}),"\n",(0,r.jsx)(a.h2,{id:"java-record-serialization",children:"Java record Serialization"}),"\n",(0,r.jsxs)(a.p,{children:["ActiveJ Serializer supports serialization/deserialization of Java records out of the box. All you need to do is to mark\nyour record with ",(0,r.jsx)(s.Z,{text:"@SerializeRecord",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeRecord.java"})," annotation like this:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_1",children:"@SerializeRecord\npublic record Person(int age, String name) {\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Similarly to the ",(0,r.jsx)(a.a,{href:"#simple-object-serialization",children:"previous example"})," we'll create an instance of a ",(0,r.jsx)(a.code,{children:"Person"})," class, a byte array that will store the result of serialization, and an instance of a ",(0,r.jsx)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java"})," class:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_2",children:'Person jim = new Person(34, "Jim");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerFactory.defaultInstance()\n  .create(Person.class);\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Now we can serialize and deserialize our ",(0,r.jsx)(a.code,{children:"Person"})," record instance:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_3",children:"serializer.encode(buffer, 0, jim);\nPerson johnCopy = serializer.decode(buffer, 0);\n"})}),"\n",(0,r.jsx)(a.p,{children:"Let's make a simple test to check if everything works correctly:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",children:'System.out.println(jim.age + " " + johnCopy.age);\nSystem.out.println(jim.name + " " + johnCopy.name);\nSystem.out.println(jim.getSurname() + " " + johnCopy.getSurname());\n'})}),"\n",(0,r.jsx)(a.p,{children:"After you run the example, you'll receive the following output:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"34 34\nJim Jim\n"})}),"\n",(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["If you want to have more control over serialization of records, you can use most ",(0,r.jsx)(a.code,{children:"@Serialize..."})," annotations\n(like ",(0,r.jsx)(a.code,{children:"@SerializeClass"}),", ",(0,r.jsx)(a.code,{children:"@SerializeNullable"}),", etc.) on record components."]})}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/RecordSerializationExample.java"})]}),"\n",(0,r.jsx)(a.h2,{id:"generics-and-interfaces",children:"Generics and Interfaces"}),"\n",(0,r.jsx)(a.p,{children:"ActiveJ Serializer can simply manage more complex objects. For example, let's see how it handles interfaces and\ngenerics."}),"\n",(0,r.jsxs)(a.p,{children:["First, create a simple ",(0,r.jsx)(a.code,{children:"Skill"})," class:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_1",children:'public static class Skill<K, V> {\n  private final K key;\n  private final V value;\n\n  public Skill(@Deserialize("key") K key, @Deserialize("value") V value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  @Serialize\n  public K getKey() {\n    return key;\n  }\n\n  @Serialize\n  public V getValue() {\n    return value;\n  }\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Next, create a ",(0,r.jsx)(a.code,{children:"Person"})," interface that has a single method returning a list of skills:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_2",children:"public interface Person<K, V> {\n  @Serialize\n  List<Skill<K, V>> getSkills();\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Finally create a ",(0,r.jsx)(a.code,{children:"Developer"})," class that implements ",(0,r.jsx)(a.code,{children:"Person"})," interface:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_3",children:"public static class Developer implements Person<Integer, String> {\n  private List<Skill<Integer, String>> list;\n\n  @Serialize\n  @Override\n  public List<Skill<Integer, String>> getSkills() {\n    return list;\n  }\n\n  public void setSkills(List<Skill<Integer, String>> list) {\n    this.list = list;\n  }\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Let's proceed to the serialization. Similarly to the previous example, we'll create an instance of the ",(0,r.jsx)(a.code,{children:"Developer"})," class, a\nbyte array to store the result of the serialization and an instance of a ",(0,r.jsx)(a.code,{children:"BinarySerializer<Developer>"})," serializer:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_4",children:'Developer developer = new Developer();\ndeveloper.setSkills(List.of(\n  new Skill<>(1, "Java"),\n  new Skill<>(2, "ActiveJ")));\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Developer> serializer = SerializerFactory.defaultInstance()\n  .create(Developer.class);\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Now let's serialize and deserialize our ",(0,r.jsx)(a.code,{children:"Developer"})," instance:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_5",children:"serializer.encode(buffer, 0, developer);\nDeveloper developer2 = serializer.decode(buffer, 0);\n"})}),"\n",(0,r.jsx)(a.p,{children:"Check if the serialization works correctly:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_6",children:'for (int i = 0; i < developer.getSkills().size(); i++) {\n  System.out.println(\n    developer.getSkills().get(i).getKey() + " - " + developer.getSkills().get(i).getValue() + ", " +\n    developer2.getSkills().get(i).getKey() + " - " + developer2.getSkills().get(i).getValue());\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"If you run the example, you'll receive the following output:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"1 - Java, 1 - Java\n2 - ActiveJ, 2 - ActiveJ\n"})}),"\n",(0,r.jsx)(a.p,{children:"Which means that the serialization worked correctly."}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java"})]}),"\n",(0,r.jsx)(a.h2,{id:"nested-type-serialization",children:"Nested type serialization"}),"\n",(0,r.jsxs)(a.p,{children:["Sometimes you need to serialize a field that represents a generic type. Let's say a ",(0,r.jsx)(a.code,{children:"Map"}),". All you need to do is put the ",(0,r.jsx)(a.code,{children:"@Serialize"})," annotation on that field."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Serialize\npublic Map<Integer, String>> map;\n"})}),"\n",(0,r.jsxs)(a.p,{children:["But what if you want a map to contain nullable values? You can use the ",(0,r.jsx)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java"})," annotation.\nHowever, if you just put this annotation on the field, it would mean that a whole map could be nullable."]}),"\n",(0,r.jsxs)(a.p,{children:["We have to put the annotation directly on a ",(0,r.jsx)(a.code,{children:"String"}),"! Since ActiveJ v5.0, some serializer annotations are applicable to a type use.\nSo whenever you need to mark some type with additional serializer information, just put the annotation on a type:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Serialize\npublic Map<Integer, @SerializeNullable String>> map;\n"})}),"\n",(0,r.jsx)(a.p,{children:"In this tutorial we will show you how to write serializers using type use annotations."}),"\n",(0,r.jsxs)(a.p,{children:["We will define a parameterized class ",(0,r.jsx)(a.code,{children:"Nested"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Nested",children:'public static class Nested<T1, T2> {\n  @Serialize\n  public final T1 first;\n  @Serialize\n  public final T2 second;\n\n  public Nested(@Deserialize("first") T1 first, @Deserialize("second") T2 second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  @Override\n  public String toString() {\n    return "Nested{" + first + ", " + second + \'}\';\n  }\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Then we define a ",(0,r.jsx)(a.code,{children:"Storage"})," class to be serialized:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Storage",children:"public static class Storage {\n  @Serialize\n  public List<@SerializeNullable Nested<Integer, @SerializeNullable String>> listOfNested;\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["The class has a single field, which is a ",(0,r.jsx)(a.code,{children:"List"})," of nullable ",(0,r.jsx)(a.code,{children:"Nested"})," elements. In addition, the second type parameter of the ",(0,r.jsx)(a.code,{children:"Nested"})," class (",(0,r.jsx)(a.code,{children:"String"}),") is itself nullable."]}),"\n",(0,r.jsx)(a.p,{children:"We create a serializer as follows:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Serializer",children:"BinarySerializer<Storage> serializer = SerializerFactory.defaultInstance()\n  .create(Storage.class);\n"})}),"\n",(0,r.jsxs)(a.p,{children:["We then construct a ",(0,r.jsx)(a.code,{children:"Storage"})," class and add nullable elements to the list. Once we run the example we should see the following output:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"[Nested{1, abc}, null, Nested{5, null}]\n[Nested{1, abc}, null, Nested{5, null}]\n"})}),"\n",(0,r.jsxs)(a.p,{children:["This shows both an original ",(0,r.jsx)(a.code,{children:"Storage"})," contents as well as deserialized one."]}),"\n",(0,r.jsxs)(a.admonition,{type:"note",children:[(0,r.jsx)(a.p,{children:"A special care should be taken when annotating arrays."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Foo String @Bar []\n"})}),(0,r.jsxs)(a.p,{children:["Here, ",(0,r.jsx)(a.code,{children:"@Foo"})," annotates ",(0,r.jsx)(a.code,{children:"String"})," while ",(0,r.jsx)(a.code,{children:"@Bar"})," annotates the whole array ",(0,r.jsx)(a.code,{children:"String[]"}),"."]}),(0,r.jsxs)(a.p,{children:["This is in accordance with ",(0,r.jsx)(a.a,{href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.4",children:"Java Language Specification"})]})]}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SerializeExample.java"})]}),"\n",(0,r.jsx)(a.h2,{id:"fixed-size-and-nullable-fields-serialization",children:"Fixed Size and Nullable Fields Serialization"}),"\n",(0,r.jsxs)(a.p,{children:["ActiveJ Serializer has some ",(0,r.jsx)(s.Z,{text:"helper annotations",url:"/core-serializer/src/main/java/io/activej/serializer/annotations"}),", for example:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java"})," on properties that can have null values. This annotation also has a special ",(0,r.jsx)(a.code,{children:"path"})," parameter. It represent a path of the tree of the variable's data types. It allows to indicate which of the 'nodes' is nullable."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"As you can see, you can write several annotations for the different paths of the same data structure."}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(s.Z,{text:"@SerializeFixedSize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeFixedSize.java"})," on properties that should have a fixed size after serialization"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Let's create a simple example that illustrates how to use these annotations:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_1",children:"public static class Storage {\n  @Serialize\n  public @SerializeNullable String @SerializeFixedSize(3) [] strings;\n\n  @Serialize\n  public byte @SerializeFixedSize(4) [] bytes;\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Now let's serialize and deserialize the ",(0,r.jsx)(a.code,{children:"Storage"})," instance similarly to the previous examples. We will create a ",(0,r.jsx)(a.code,{children:"Storage"})," instance, a byte array to store the serialization result, and a ",(0,r.jsx)(a.code,{children:"BinarySerializer<Storage>"})," serializer instance:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_2",children:'Storage storage = new Storage();\nstorage.strings = new String[]{"abc", null, "123", "superfluous"};\nstorage.bytes = new byte[]{1, 2, 3, 4, 5, 6};\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Storage> serializer = SerializerFactory.defaultInstance()\n  .create(Storage.class);\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Finally, serialize and deserialize ",(0,r.jsx)(a.strong,{children:"Storage"})," instance:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_3",children:"serializer.encode(buffer, 0, storage);\nStorage limitedStorage = serializer.decode(buffer, 0);\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Let's see how serialization affected the ",(0,r.jsx)(a.em,{children:"storage"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_4",children:'System.out.println(Arrays.toString(storage.strings) + " -> " + Arrays.toString(limitedStorage.strings));\nSystem.out.println(Arrays.toString(storage.bytes) + " -> " + Arrays.toString(limitedStorage.bytes));\n'})}),"\n",(0,r.jsx)(a.p,{children:"If you run the example, you'll see the following output:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"[abc, null, 123, superfluous] -> [abc, null, 123]\n[1, 2, 3, 4, 5, 6] -> [1, 2, 3, 4]\n"})}),"\n",(0,r.jsxs)(a.p,{children:["As you can see in the first line, ",(0,r.jsx)(a.em,{children:"storage"})," differs from ",(0,r.jsx)(a.em,{children:"limitedStorage"}),". This is because ",(0,r.jsx)(a.code,{children:"@SerializeFixedSize"}),"\nannotation  was set at value ",(0,r.jsx)(a.strong,{children:"3"})," for the ",(0,r.jsx)(a.em,{children:"strings"}),' property. Thus, "superfluous" was removed from the array while serialization took place.']}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java"})]}),"\n",(0,r.jsx)(a.h2,{id:"custom-serializer",children:"Custom serializer"}),"\n",(0,r.jsxs)(a.p,{children:["In this example, we will demonstrate how to write a custom serializer for the ",(0,r.jsx)(a.code,{children:"LocalDate"})," class. You can use this example\nas a reference for writing serializers for other classes that you might need to serialize."]}),"\n",(0,r.jsxs)(a.p,{children:["Let's imagine we need to serialize a class that contains the ",(0,r.jsx)(a.code,{children:"LocalDate"})," field:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=HOLDER",children:'public static class LocalDateHolder {\n  @Serialize\n  public final LocalDate date;\n\n  public LocalDateHolder(@Deserialize("date") LocalDate date) {\n    this.date = date;\n  }\n\n  @Override\n  public String toString() {\n    return "LocalDateHolder{date=" + date + \'}\';\n  }\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["By default, the ActiveJ Serializer does not know how to serialize the ",(0,r.jsx)(a.code,{children:"LocalDate"})," class, so it will throw an exception when we\nnaively try to serialize it. We must provide a custom serializer for the ",(0,r.jsx)(a.code,{children:"LocalDate"})," class to serialize the ",(0,r.jsx)(a.code,{children:"LocalDateHolder"}),"\nclass:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER",children:"public static class LocalDateSerializerDef extends SimpleSerializerDef<LocalDate> {\n  @Override\n  protected BinarySerializer<LocalDate> createSerializer(int version, CompatibilityLevel compatibilityLevel) {\n    return new BinarySerializer<>() {\n      @Override\n      public void encode(BinaryOutput out, LocalDate localDate) {\n        out.writeVarInt(localDate.getYear());\n        out.writeVarInt(localDate.getMonthValue());\n        out.writeVarInt(localDate.getDayOfMonth());\n      }\n\n      @Override\n      public LocalDate decode(BinaryInput in) throws CorruptedDataException {\n        int year = in.readVarInt();\n        int month = in.readVarInt();\n        int day = in.readVarInt();\n\n        return LocalDate.of(year, month, day);\n      }\n    };\n  }\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["We extend ",(0,r.jsx)(s.Z,{text:"SimpleSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/def/SimpleSerializerDef.java"}),"\nclass and implement methods:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"void encode(BinaryOutput out, LocalDate localDate)"})," - here we instruct the serializer how to serialize a ",(0,r.jsx)(a.code,{children:"LocalDate"})," instance. We actually need to\nserialize 3 ",(0,r.jsx)(a.code,{children:"int"})," values (",(0,r.jsx)(a.code,{children:"year"}),", ",(0,r.jsx)(a.code,{children:"month"}),", and ",(0,r.jsx)(a.code,{children:"dayOfMonth"}),") and write them to ",(0,r.jsx)(s.Z,{text:"BinaryOutput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryOutput.java"})," as var ints (integers of variable length)."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"LocalDate decode(BinaryInput in)"})," - here we need to instruct the serializer how to deserialize raw bytes into a ",(0,r.jsx)(a.code,{children:"LocalDate"})," instance.\nThe process is an inverse to encoding. First, we have to read 3 ",(0,r.jsx)(a.code,{children:"int"})," values (",(0,r.jsx)(a.code,{children:"year"}),", ",(0,r.jsx)(a.code,{children:"month"}),", and ",(0,r.jsx)(a.code,{children:"dayOfMonth"}),") as var ints from ",(0,r.jsx)(s.Z,{text:"BinaryInput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryInput.java"}),".\nThen we can create a new ",(0,r.jsx)(a.code,{children:"LocalDate"})," instance by calling static factory method ",(0,r.jsx)(a.code,{children:"LocalDate.of(year, month, dayOfMonth)"}),"\nand passing previously deserialized ",(0,r.jsx)(a.code,{children:"int"})," values."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["At last, we need to add our serializer of ",(0,r.jsx)(a.code,{children:"LocalDate"})," to ",(0,r.jsx)(s.Z,{text:"SerializerFactory",url:"/core-serializer/src/main/java/io/activej/serializer/SerializerFactory.java"})," builder."]}),"\n",(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Alternatively, you can create a custom serializer by extending not a ",(0,r.jsx)(a.code,{children:"SimpleSerializerDef"})," class but a ",(0,r.jsx)(s.Z,{text:"AbstractSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/def/AbstractSerializerDef.java"})," class.\nYou would need to implement ",(0,r.jsx)(a.code,{children:"encode()/decode()"})," methods that return ",(0,r.jsx)(a.code,{children:"Expression"}),". You would need to use ",(0,r.jsx)(a.a,{href:"/codegen",children:"Expression API"})," in order to do so."]})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER_CREATE",children:"BinarySerializer<LocalDateHolder> serializer =\n  SerializerFactory.builder()\n    .with(LocalDate.class, ctx -> new LocalDateSerializerDef())\n    .build()\n    .create(LocalDateHolder.class);\n"})}),"\n",(0,r.jsxs)(a.p,{children:["If we run ",(0,r.jsx)(a.code,{children:"LocalDateSerializerExample#main"})," method, we should see the following output:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-text",children:"Serializing LocalDateHolder: LocalDateHolder{date=2021-03-17}\nByte array with serialized LocalDateHolder: [-27, 15, 3, 17]\nDeserialized LocalDateHolder: LocalDateHolder{date=2021-03-17}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["You can explore full example sources on ",(0,r.jsx)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java"})]})]})}function j(e={}){const{wrapper:a}={...(0,n.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},7618:(e,a,i)=>{i.d(a,{Z:()=>l});i(7294);var r=i(9962),n=i(5893);const l=e=>{let{url:a,text:i,isInline:l=!0,children:s}=e;const{siteConfig:t}=(0,r.Z)(),o=a.startsWith("/examples")?t.customFields.githubExamplesBranch:t.customFields.githubBranch;return(0,n.jsx)("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:t.customFields.githubUrl+"/"+o+a,target:"_blank",children:i||s})}},7815:(e,a,i)=>{i.d(a,{Z:()=>n});i(7294);var r=i(9962);const n=e=>{let{name:a}=e;const{siteConfig:i}=(0,r.Z)();if(!a)throw new Error("Variable name is required");if(void 0===i.customFields[a])throw new Error(`Variable ${a} not exist`);return i.customFields[a]}},1151:(e,a,i)=>{i.d(a,{Z:()=>t,a:()=>s});var r=i(7294);const n={},l=r.createContext(n);function s(e){const a=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(l.Provider,{value:a},e.children)}}}]);
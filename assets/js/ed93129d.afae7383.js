"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[7477],{1055:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var t=a(5893),s=a(1151),r=a(7618),l=a(7815);const o={title:"ActiveJ Codegen Examples | Dynamic bytecode generator with minimal overhead",description:"ActiveJ Codegen is a dynamic bytecode generator with minimal overhead and convenient API",sidebar_label:"Examples",keywords:["bytecode","bytecode generator","runtime code generator","runtime query processing","java","java framework"]},i="Examples",c={id:"codegen/examples",title:"ActiveJ Codegen Examples | Dynamic bytecode generator with minimal overhead",description:"ActiveJ Codegen is a dynamic bytecode generator with minimal overhead and convenient API",source:"@site/docs/codegen/examples.mdx",sourceDirName:"codegen",slug:"/codegen/examples",permalink:"/codegen/examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ Codegen Examples | Dynamic bytecode generator with minimal overhead",description:"ActiveJ Codegen is a dynamic bytecode generator with minimal overhead and convenient API",sidebar_label:"Examples",keywords:["bytecode","bytecode generator","runtime code generator","runtime query processing","java","java framework"]},sidebar:"docs",previous:{title:"Overview",permalink:"/codegen"},next:{title:"Overview",permalink:"/serializer"}},d={},p=[{value:"Bytecode Expressions",id:"bytecode-expressions",level:2},{value:"Dynamic Class Creation",id:"dynamic-class-creation",level:2},{value:"Calculator example",id:"calculator-example",level:2}];function m(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"To run the examples, you need to clone ActiveJ from GitHub:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,t.jsxs)(n.p,{children:["And import it as a Maven project. Check out tag ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(l.Z,{name:"currentVersion"})}),". Before running the examples, build the project. These examples are located at ",(0,t.jsx)(n.code,{children:"activej/examples/core/codegen"})]})]}),"\n",(0,t.jsx)(n.h2,{id:"bytecode-expressions",children:"Bytecode Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a simple ",(0,t.jsx)(n.code,{children:"sayHello()"}),' method that prints out "Hello world!". First, we will define a simple ',(0,t.jsx)(n.strong,{children:"Example"}),"\ninterface that has a single ",(0,t.jsx)(n.code,{children:"sayHello()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/CodegenExpressionsExample.java tag=REGION_3",children:"public interface Greeter {\n  void sayHello();\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now we can proceed to the description of ",(0,t.jsx)(n.strong,{children:"Example"})," subclass behaviour. For this purpose we will use ",(0,t.jsx)(r.Z,{text:"ClassBuilder",url:"/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java"}),"\nclass."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/CodegenExpressionsExample.java tag=REGION_1",children:'Class<Greeter> greeterClass = ClassGenerator.builder(Greeter.class)\n  .withMethod("sayHello",\n    call(staticField(System.class, "out"), "println", value("Hello world")))\n  .build()\n  .generateClass(CLASS_LOADER);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To instantiate the described class, simply use ",(0,t.jsx)(n.code,{children:"newInstance()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/CodegenExpressionsExample.java tag=REGION_2",children:"Greeter greeter = greeterClass.getDeclaredConstructor().newInstance();\ngreeter.sayHello();\n"})}),"\n",(0,t.jsx)(r.Z,{text:"See full example on GitHub",url:"/examples/core/codegen/src/main/java/CodegenExpressionsExample.java"}),"\n",(0,t.jsx)(n.h2,{id:"dynamic-class-creation",children:"Dynamic Class Creation"}),"\n",(0,t.jsxs)(n.p,{children:["In this example we will dynamically create a class that implements an interface. So let's first create a simple ",(0,t.jsx)(n.strong,{children:"Person"}),"\ninterface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/DynamicClassCreationExample.java tag=REGION_1",children:'@SuppressWarnings({"unused", "NullableProblems"})\npublic interface Person extends Comparable<Person> {\n  void setIdAndName(int id, String name);\n\n  int getId();\n\n  String getName();\n\n  int hashOfPojo(ExamplePojo personPojo);\n\n  int hash();\n\n  @Override\n  int compareTo(Person o);\n\n  @Override\n  String toString();\n\n  @Override\n  boolean equals(Object obj);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Move on to constructing a class that implements ",(0,t.jsx)(n.strong,{children:"Person"})," interface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/DynamicClassCreationExample.java tag=REGION_2",children:'// declare fields\n// setter for both fields - a sequence of actions\n// compareTo, equals, hashCode and toString methods implementations follow the standard convention\nClass<Person> personClass = ClassGenerator.builder(Person.class)\n  // declare fields\n  .withField("id", int.class)\n  .withField("name", String.class)\n\n  // setter for both fields - a sequence of actions\n  .withMethod("setIdAndName", sequence(\n    set(property(self(), "id"), arg(0)),\n    set(property(self(), "name"), arg(1))))\n  .withMethod("getId", property(self(), "id"))\n  .withMethod("getName", property(self(), "name"))\n\n  // compareTo, equals, hashCode and toString methods implementations follow the standard convention\n  .withMethod("int compareTo(Person)", comparableImpl("id", "name"))\n  .withMethod("equals", equalsImpl("id", "name"))\n  .withMethod("hash", hashCodeImpl("id", "name"))\n  .withMethod("hashOfPojo", HashCode.builder()\n    .with(property(arg(0), "id"))\n    .with(property(arg(0), "name"))\n    .build())\n  .withMethod("toString", ToString.builder()\n    .withField("id")\n    .with("name", property(self(), "name"))\n    .build())\n  .build()\n  .generateClass(CLASS_LOADER);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now we can test our dynamically generated classes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/DynamicClassCreationExample.java tag=REGION_3",children:'// Instantiate two objects of dynamically defined class\nPerson jack = personClass.getDeclaredConstructor().newInstance();\nPerson martha = personClass.getDeclaredConstructor().newInstance();\n\njack.setIdAndName(5, "Jack");\nmartha.setIdAndName(jack.getId() * 2, "Martha");\n\nSystem.out.println("First person: " + jack);\nSystem.out.println("Second person: " + martha);\n\nSystem.out.println("jack.equals(martha) ? : " + jack.equals(martha));\n'})}),"\n",(0,t.jsx)(r.Z,{text:"See full example on GitHub",url:"/examples/core/codegen/src/main/java/DynamicClassCreationExample.java"}),"\n",(0,t.jsx)(n.h2,{id:"calculator-example",children:"Calculator example"}),"\n",(0,t.jsx)(n.p,{children:"In this example we will create a calculator that parses an input equation string to an AST. Then, it generates an\noptimized class to calculate the expression."}),"\n",(0,t.jsx)(n.p,{children:"First, create a parser that returns an AST of the expression:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/calculator/CodegenCalculatorExample.java tag=REGION_1",children:'private static final Parser<Expression> EXPRESSION = new OperatorTable<Expression>()\n  .infixl(DELIMITERS.token("+").retn(Expressions::add), 10)\n  .infixl(DELIMITERS.token("-").retn(Expressions::sub), 10)\n  .infixl(DELIMITERS.token("*").retn(Expressions::mul), 20)\n  .infixl(DELIMITERS.token("/").retn(Expressions::div), 20)\n  .infixl(DELIMITERS.token("%").retn(Expressions::rem), 20)\n  .prefix(DELIMITERS.token("-").retn(Expressions::neg), 30)\n  .infixr(DELIMITERS.token("^").retn((left, right) -> Expressions.staticCall(Math.class, "pow", left, right)), 40)\n  .build(ATOM);\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Next, create a ",(0,t.jsx)(n.strong,{children:"ClassGenerator"})," that describes the class that will be generated. It will implement the\n",(0,t.jsx)(n.strong,{children:"DoubleUnaryOperator"})," interface and will have the ",(0,t.jsx)(n.em,{children:"applyAsDouble"})," method."]}),"\n",(0,t.jsx)(n.p,{children:"Let's create the appropriate builder:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/calculator/CodegenCalculatorExample.java tag=REGION_2",children:'public static Class<DoubleUnaryOperator> compile(String expression) {\n  return ClassGenerator.builder(DoubleUnaryOperator.class)\n    .withMethod("applyAsDouble", PARSER.parse(expression))\n    .build()\n    .generateClass(CLASS_LOADER);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The method will have a ",(0,t.jsx)(n.em,{children:"var1"})," parameter for the unknown ",(0,t.jsx)(n.code,{children:"x"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'private static final Parser<Expression> UNKNOWN = DELIMITERS.token("x").retn(Expressions.arg(0));\n'})}),"\n",(0,t.jsx)(n.p,{children:"As a result, ActiveJ Codegen will generate a bytecode of the following class:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public final class Class1 implements DoubleUnaryOperator {\n    public Class1() {\n    }\n\n    public double applyAsDouble(double var1) {\n        return (2.0D + 2.0D * 2.0D) * -var1 + 5.0D + 1024.0D / (100.0D + 58.0D) * 50.0D * 37.0D - 100.0D + 2.0D * Math.pow(var1, 2.0D) % 4.0D;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now let's processes a manually written code and dynamically generated instance evaluation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/codegen/src/main/java/calculator/CodegenCalculatorExample.java tag=REGION_3",children:'public static void main(String[] args) throws Exception {\n  double x = -1;\n\n  // manual code, superfast\n  System.out.println(((2.0 + 2.0 * 2.0) * -x) + 5.0 + 1024.0 / (100.0 + 58.0) * 50.0 * 37.0 - 100.0 + 2.0 * Math.pow(x, 2.0) % 3.0);\n\n  DoubleUnaryOperator instance = compile("((2 + 2 * 2) * -x) + 5 + 1024 / (100 + 58) * 50 * 37 - 100 + 2 * x ^ 2 % 3").getDeclaredConstructor().newInstance();\n\n  // generated instance evaluation, literally equivalent to manual code (with a method call around it), except it was dynamically generated\n  System.out.println(instance.applyAsDouble(x));\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"We have also ran benchmarks for this expression to compare the performance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Benchmark                        Mode  Cnt    Score    Error  Units\nCalculatorBenchmark.generated    avgt   10  115.882 \xb1  1.082  ns/op\nCalculatorBenchmark.manual       avgt   10  115.222 \xb1  1.600  ns/op\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can find example sources on ",(0,t.jsx)(r.Z,{text:"GitHub",url:"/examples/core/codegen/src/main/java/calculator/CodegenCalculatorExample.java"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},7618:(e,n,a)=>{a.d(n,{Z:()=>r});a(7294);var t=a(9962),s=a(5893);const r=e=>{let{url:n,text:a,isInline:r=!0,children:l}=e;const{siteConfig:o}=(0,t.Z)(),i=n.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,s.jsx)("a",{style:r?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+i+n,target:"_blank",children:a||l})}},7815:(e,n,a)=>{a.d(n,{Z:()=>s});a(7294);var t=a(9962);const s=e=>{let{name:n}=e;const{siteConfig:a}=(0,t.Z)();if(!n)throw new Error("Variable name is required");if(void 0===a.customFields[n])throw new Error(`Variable ${n} not exist`);return a.customFields[n]}},1151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>l});var t=a(7294);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
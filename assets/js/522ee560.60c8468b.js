"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[9579],{1500:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var t=o(5893),s=o(1151),i=o(7618),r=o(7815);const l={title:"ActiveJ | Eventloop, single-threaded event loop for developing asynchronous Java applications",description:"Node.js-inspired single-threaded Eventloop for developing asynchronous Java applications",sidebar_label:"Eventloop",keywords:["nodejs","node js","java","java framework","asynchronous","asynchronous application","client-server application"]},a="Eventloop",c={id:"async-io/eventloop",title:"ActiveJ | Eventloop, single-threaded event loop for developing asynchronous Java applications",description:"Node.js-inspired single-threaded Eventloop for developing asynchronous Java applications",source:"@site/docs/async-io/eventloop.mdx",sourceDirName:"async-io",slug:"/async-io/eventloop",permalink:"/async-io/eventloop",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | Eventloop, single-threaded event loop for developing asynchronous Java applications",description:"Node.js-inspired single-threaded Eventloop for developing asynchronous Java applications",sidebar_label:"Eventloop",keywords:["nodejs","node js","java","java framework","asynchronous","asynchronous application","client-server application"]},sidebar:"docs",previous:{title:"Overview",permalink:"/overview"},next:{title:"Promise",permalink:"/async-io/promise"}},d={},h=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2},{value:"Reactor",id:"reactor",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Eventloop Example",id:"eventloop-example",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"eventloop",children:"Eventloop"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The Eventloop module is the basis for other modules that execute their code asynchronously within event loops and threads.\nIt ",(0,t.jsx)(n.strong,{children:"provides efficient management of asynchronous operations without the overhead of multithreading"}),". It is especially\nuseful for creating client-server applications with high-performance requirements. An ",(0,t.jsx)(n.code,{children:"Eventloop"})," class represents a ",(0,t.jsx)(n.code,{children:"Reactor"}),"\nwhich is an interface that allows execution of tasks asynchronously or by a schedule."]}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Eventloop uses Java's NIO for asynchronous computation and I/O operations (TCP, UDP)."}),"\n",(0,t.jsx)(n.li,{children:"Eliminates the traditional I/O bottleneck for further business logic processing."}),"\n",(0,t.jsx)(n.li,{children:"Can run multiple eventloop threads on available cores."}),"\n",(0,t.jsx)(n.li,{children:"Minimal GC load: arrays and byte buffers are reused."}),"\n",(0,t.jsx)(n.li,{children:"Eventloop can schedule/postpone certain tasks for deferred execution or background execution."}),"\n",(0,t.jsx)(n.li,{children:"Eventloop is single-threaded, so it has no concurrency overhead."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"reactor",children:"Reactor"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Eventloop"})," is an implementation of the ",(0,t.jsx)(n.code,{children:"Reactor"})," interface. The ",(0,t.jsx)(n.code,{children:"Reactor"})," interface provides methods for executing tasks\nasynchronously. It can also be used for scheduling tasks to be executed within ",(0,t.jsx)(n.code,{children:"Reactor"})," context (thread) later. There is also\nan ",(0,t.jsx)(n.code,{children:"NioReactor"})," interface which extends the ",(0,t.jsx)(n.code,{children:"Reactive"})," interface and adds methods required for I/O operations (mostly network\noperations)."]}),"\n",(0,t.jsxs)(n.p,{children:["Most of ActiveJ components depend not on ",(0,t.jsx)(n.code,{children:"Eventloop"})," class but on a ",(0,t.jsx)(n.code,{children:"Reactor"}),"/",(0,t.jsx)(n.code,{children:"NioReactor"})," interfaces."]}),"\n",(0,t.jsxs)(n.p,{children:["There are also interfaces that mark components as reactive. Those are ",(0,t.jsx)(n.code,{children:"Reactive"})," and ",(0,t.jsx)(n.code,{children:"NioReactive"}),". Implementations of\nthese interfaces should implement a method ",(0,t.jsx)(n.code,{children:"getReactor()"})," which returns a ",(0,t.jsx)(n.code,{children:"Reactor"})," associated with a reactive component.\nThis approach allows for a convenient class hierarchy where asynchronous (e.g. reactive) components are separated from\nsynchronous components."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Eventloop is a low-level tool that you won't use directly in most cases. Nevertheless, it is an\nextremely important component that will give you an understanding of the ActiveJ asynchronous model."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"#",children:(0,t.jsx)(i.Z,{url:"/core-eventloop/src/main/java/io/activej/eventloop/Eventloop.java",children:(0,t.jsx)(n.code,{children:"Eventloop"})})})," is a\nreactor that represents an infinite loop, where at each ",(0,t.jsx)(n.code,{children:"iteration"})," all the tasks that are stored in\nspecial queues are executed. Those tasks can be either local, received from other threads, scheduled or\nassociated with I/O processing (via ",(0,t.jsx)(n.code,{children:"Selector"}),"). Each of these tasks must be small, and its execution is called a ",(0,t.jsx)(n.code,{children:"tick"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The only blocking operation of the Eventloop infinite loop is ",(0,t.jsx)(n.code,{children:"Selector.select()"}),". This operation selects a set of keys\nwhose corresponding channels are ready for I/O operations. Eventloop asynchronously processes the selected keys and executes\nthe queued runnables in a single thread."]}),"\n",(0,t.jsx)(n.p,{children:"Eventloop works with different types of tasks that are stored in separate queues:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Tasks"}),(0,t.jsx)(n.th,{children:"Added via"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Local tasks"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Eventloop#post"})," ",(0,t.jsx)(n.code,{children:"Eventloop#postLater"})," ",(0,t.jsx)(n.code,{children:"Eventloop#postNext"})]}),(0,t.jsx)(n.td,{children:"Added from current reactor/eventloop thread"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Concurrent tasks"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Eventloop#execute"})," ",(0,t.jsx)(n.code,{children:"Eventloop#submit"})]}),(0,t.jsx)(n.td,{children:"Added from other threads"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Scheduled tasks"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Eventloop#schedule"})," ",(0,t.jsx)(n.code,{children:"Eventloop#delay"})]}),(0,t.jsx)(n.td,{children:"Scheduled to be executed later"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Background tasks"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Eventloop#scheduleBackground"})," ",(0,t.jsx)(n.code,{children:"Eventloop#delayBackground"})]}),(0,t.jsxs)(n.td,{children:["Same as ",(0,t.jsx)(n.em,{children:"Scheduled"}),", but if there are only ",(0,t.jsx)(n.em,{children:"Background"})," tasks left, Eventloop will be stopped"]})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Eventloop will be stopped if its queues with non-background tasks are empty, the ",(0,t.jsx)(n.strong,{children:"Selector"})," has no selected\nkeys, and the number of concurrent operations in other threads is 0. To prevent Eventloop from closing, set the\n",(0,t.jsx)(n.code,{children:"keepAlive"})," flag. When it's set to ",(0,t.jsx)(n.code,{children:"true"}),", Eventloop will keep running even without tasks."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#basic-example",children:"BasicExample"}),' - a simple example of an eventloop that prints the "Hello World" message.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#eventloop-example",children:"EventloopExample"})," - represents the sequence of operations in eventloops."]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"To run the examples, you need to clone ActiveJ from GitHub:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,t.jsxs)(n.p,{children:["And import it as a Maven project. Check out tag ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(r.Z,{name:"currentVersion"})}),". Before running the examples, build the project. These examples are located at ",(0,t.jsx)(n.code,{children:"activej/examples/core/eventloop"}),"."]})]}),"\n",(0,t.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,t.jsx)(n.p,{children:'In this example, we create an eventloop, post a task to it (which prints out the "Hello World" message) and\nthen run the eventloop:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/eventloop/src/main/java/BasicExample.java tag=EXAMPLE",children:'public final class BasicExample {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.create();\n\n    eventloop.post(() -> System.out.println("Hello World"));\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(i.Z,{url:"/examples/core/eventloop/src/main/java/BasicExample.java",children:"See full example on GitHub"})})}),"\n",(0,t.jsx)(n.h3,{id:"eventloop-example",children:"Eventloop Example"}),"\n",(0,t.jsx)(n.p,{children:"This example shows how tasks are scheduled in eventloops:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/eventloop/src/main/java/EventloopExample.java tag=EXAMPLE",children:'public final class EventloopExample {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n    long startTime = currentTimeMillis();\n\n    // #2\n    eventloop.delay(3000L, () -> System.out.println("Eventloop.delay(3000) is finished, time: " + (currentTimeMillis() - startTime)));\n    eventloop.delay(1000L, () -> System.out.println("Eventloop.delay(1000) is finished, time: " + (currentTimeMillis() - startTime)));\n    eventloop.delay(100L, () -> System.out.println("Eventloop.delay(100) is finished, time: " + (currentTimeMillis() - startTime)));\n\n    // #1\n    System.out.println("Before running eventloop, time: " + (currentTimeMillis() - startTime));\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"If you run the example, you get a result that looks something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Before running eventloop, time: 2\nEventloop.delay(100) is finished, time: 106\nEventloop.delay(1000) is finished, time: 1001\nEventloop.delay(3000) is finished, time: 3001\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(i.Z,{url:"/examples/core/eventloop/src/main/java/EventloopExample.java",children:"See full example on GitHub"})})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},7618:(e,n,o)=>{o.d(n,{Z:()=>i});o(7294);var t=o(9962),s=o(5893);const i=e=>{let{url:n,text:o,isInline:i=!0,children:r}=e;const{siteConfig:l}=(0,t.Z)(),a=n.startsWith("/examples")?l.customFields.githubExamplesBranch:l.customFields.githubBranch;return(0,s.jsx)("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+a+n,target:"_blank",children:o||r})}},7815:(e,n,o)=>{o.d(n,{Z:()=>s});o(7294);var t=o(9962);const s=e=>{let{name:n}=e;const{siteConfig:o}=(0,t.Z)();if(!n)throw new Error("Variable name is required");if(void 0===o.customFields[n])throw new Error(`Variable ${n} not exist`);return o.customFields[n]}},1151:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>r});var t=o(7294);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkReactifydocs=self.webpackChunkReactifydocs||[]).push([[2275],{9020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var s=t(5893),r=t(1151),i=t(7618),c=t(7815);const a={description:"Lightning-fast binary protocol for microservices architecture",sidebar_label:"Basic Examples",keywords:["java","java framework","tutorial","guide","memcached","rpc","client-server","web application","microservices"]},o="Basic Examples",d={id:"rpc/basic-examples",title:"Basic Examples",description:"Lightning-fast binary protocol for microservices architecture",source:"@site/docs/rpc/basic-examples.mdx",sourceDirName:"rpc",slug:"/rpc/basic-examples",permalink:"/rpc/basic-examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"Lightning-fast binary protocol for microservices architecture",sidebar_label:"Basic Examples",keywords:["java","java framework","tutorial","guide","memcached","rpc","client-server","web application","microservices"]},sidebar:"docs",previous:{title:"Overview",permalink:"/rpc"},next:{title:"Key-Value Storage",permalink:"/rpc/key-value-storage"}},l={},p=[{value:"Simple RPC Example",id:"simple-rpc-example",level:2},{value:"Round-Robin Strategy",id:"round-robin-strategy",level:2},{value:"Round-Robin and First Available Strategies Combined",id:"round-robin-and-first-available-strategies-combined",level:2},{value:"Sharding and First Valid Strategies Combined",id:"sharding-and-first-valid-strategies-combined",level:2},{value:"Rendezvous Hashing Strategy",id:"rendezvous-hashing-strategy",level:2},{value:"Type Dispatch Strategy",id:"type-dispatch-strategy",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"basic-examples",children:"Basic Examples"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"To run the examples, you need to clone Reactify from GitHub"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,s.jsxs)(n.p,{children:["And import it as a Maven project. Check out tag ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(c.Z,{name:"currentVersion"})}),". Before running the examples, build the project. ",(0,s.jsx)(n.strong,{children:"Simple RPC Example"})," are located at ",(0,s.jsx)(n.code,{children:"Reactify/examples/cloud/rpc"})]}),(0,s.jsxs)(n.p,{children:["RPC strategies examples are located at ",(0,s.jsx)(n.code,{children:"Reactify/cloud-rpc/src/test/RpcStrategiesTest"})]})]}),"\n",(0,s.jsx)(n.h2,{id:"simple-rpc-example",children:"Simple RPC Example"}),"\n",(0,s.jsxs)(n.p,{children:['In the "Hello World" client and server ',(0,s.jsx)(n.strong,{children:"RPC Example"}),", the client sends a request to the server containing the word ",(0,s.jsx)(n.code,{children:'"World"'}),". When the\nserver receives it, it sends a response containing the word ",(0,s.jsx)(n.code,{children:'"Hello "'}),". If everything succeeds, we get the\nfollowing output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Got result: Hello World\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at the implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/examples/cloud/rpc/src/main/java/RpcExample.java tag=EXAMPLE",children:'public class RpcExample extends Launcher {\n  private static final int SERVICE_PORT = 34765;\n\n  @Inject\n  private IRpcClient client;\n\n  @Inject\n  private RpcServer server;\n\n  @Inject\n  private Reactor reactor;\n\n  @Provides\n  NioReactor reactor() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  RpcServer rpcServer(NioReactor reactor) {\n    return RpcServer.builder(reactor)\n      .withMessageTypes(String.class)\n      .withHandler(String.class,\n        request -> Promise.of("Hello " + request))\n      .withListenPort(SERVICE_PORT)\n      .build();\n  }\n\n  @Provides\n  IRpcClient rpcClient(NioReactor reactor) {\n    return RpcClient.builder(reactor)\n      .withMessageTypes(String.class)\n      .withStrategy(server(new InetSocketAddress(SERVICE_PORT)))\n      .build();\n  }\n\n  @ProvidesIntoSet\n  Initializer<ServiceGraphModuleSettings> configureServiceGraph() {\n    // add logical dependency so that service graph starts client only after it started the server\n    return settings -> settings.withDependency(Key.of(IRpcClient.class), Key.of(RpcServer.class));\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Override\n  protected void run() throws ExecutionException, InterruptedException {\n    CompletableFuture<Object> future = reactor.submit(() ->\n      client.sendRequest("World", 1000)\n    );\n    System.out.printf("%nRPC result: %s %n%n", future.get());\n  }\n\n  public static void main(String[] args) throws Exception {\n    RpcExample example = new RpcExample();\n    example.launch(args);\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RpcExample"})," class extends ",(0,s.jsxs)(n.a,{href:"/boot/springboot3x",children:["Reactify ",(0,s.jsx)(n.code,{children:"Launcher"})]})," to help us manage the lifecycle of the application."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, we use the Dependency Injection library ",(0,s.jsx)(n.a,{href:"/inject",children:"Reactify Inject"})," to provide ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/server/RpcServer.java",children:(0,s.jsx)(n.code,{children:"RPC Server"})})," and ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/IRpcClient.java",children:(0,s.jsx)(n.code,{children:"RPC Client"})})," with the appropriate configurations and necessary dependencies. The ",(0,s.jsx)(n.code,{children:"RPC Client"})," sends requests with a String message to the specified server according to the provided ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/strategy/RpcStrategies.java",children:"RPC strategy"})," (getting a single RPC-service).\nFor the ",(0,s.jsx)(n.code,{children:"RpcServer"})," we define the message types to handle, a corresponding ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/server/RpcRequestHandler.java",children:(0,s.jsx)(n.code,{children:"RpcRequestHandler"})})," and a listen port."]}),"\n",(0,s.jsxs)(n.p,{children:["Since we are extending ",(0,s.jsx)(n.code,{children:"Launcher"}),", we will also override 2 methods: ",(0,s.jsx)(n.code,{children:"getModule"})," to provide ",(0,s.jsx)(n.a,{href:"/boot/servicegraph",children:(0,s.jsx)(n.code,{children:"ServiceGraphModule"})})," and ",(0,s.jsx)(n.code,{children:"run"})," to describe the main logic of the example."]}),"\n",(0,s.jsxs)(n.p,{children:["We also provide an initializer for ",(0,s.jsx)(n.code,{children:"ServiceGraphModuleSettings"}),". As we launch RPC client and server in the same launcher, we need to instruct ",(0,s.jsx)(n.a,{href:"/boot/servicegraph",children:"ServiceGraph"})," that RPC client depends on RPC server\nand needs to be started after the server has been started."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we define the ",(0,s.jsx)(n.code,{children:"main"})," method, which will launch our example."]}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{url:"/examples/cloud/rpc/src/main/java/RpcExample.java",children:(0,s.jsx)(n.strong,{children:"GitHub"})})]}),"\n",(0,s.jsx)(n.h2,{id:"round-robin-strategy",children:"Round-Robin Strategy"}),"\n",(0,s.jsxs)(n.p,{children:["Reactify RPC contains predefined strategies for arranging requests between RPC servers or shards of servers. ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/strategy/impl/RoundRobin.java",children:"Round-Robin"})," is one of the simplest of strategies: it simply cycles through servers or shards one by one."]}),"\n",(0,s.jsxs)(n.p,{children:["In this example we create an RPC ",(0,s.jsx)(n.em,{children:"pool"})," with 5 identical ",(0,s.jsx)(n.em,{children:"connections"})," and set a Round-Robin strategy for them. Then we create a sender for the pool with the previously defined strategy. That's it, 100 requests will be evenly distributed among the servers:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_1",children:"public void roundRobinTest() {\n  RpcClientConnectionPoolStub pool = new RpcClientConnectionPoolStub();\n  RpcSenderStub connection1 = new RpcSenderStub();\n  RpcSenderStub connection2 = new RpcSenderStub();\n  RpcSenderStub connection3 = new RpcSenderStub();\n  RpcSenderStub connection4 = new RpcSenderStub();\n  RpcSenderStub connection5 = new RpcSenderStub();\n  pool.put(address1, connection1);\n  pool.put(address2, connection2);\n  pool.put(address3, connection3);\n  pool.put(address4, connection4);\n  pool.put(address5, connection5);\n  int iterations = 100;\n  RpcStrategy strategy = RpcStrategies.roundRobin(servers(address1, address2, address3, address4, address5));\n\n  RpcSender sender = strategy.createSender(pool);\n  for (int i = 0; i < iterations; i++) {\n    sender.sendRequest(new Object(), 50, ignore());\n  }\n\n  List<RpcSenderStub> connections =\n    List.of(connection1, connection2, connection3, connection4, connection5);\n  for (int i = 0; i < 5; i++) {\n    assertEquals(iterations / 5, connections.get(i).getRequests());\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java#L42-L69",children:(0,s.jsx)(n.strong,{children:"GitHub"})})]}),"\n",(0,s.jsx)(n.h2,{id:"round-robin-and-first-available-strategies-combined",children:"Round-Robin and First Available Strategies Combined"}),"\n",(0,s.jsxs)(n.p,{children:["You can simply combine RPC strategies. In this example, we will combine a ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/strategy/impl/RoundRobin.java",children:"Round Robin"})," and a ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/strategy/impl/FirstAvailable.java",children:"First Available"})," strategies."]}),"\n",(0,s.jsxs)(n.p,{children:["First, we create 4 connections without putting ",(0,s.jsx)(n.em,{children:"connection3"})," into the pool. Then we start sending 20 requests.\nAs a result, all requests will be evenly distributed between ",(0,s.jsx)(n.em,{children:"connection1"})," (as it is always ",(0,s.jsx)(n.em,{children:"first available"}),") and\n",(0,s.jsx)(n.em,{children:"connection4"})," (as ",(0,s.jsx)(n.em,{children:"connection3"})," is not available for the pool):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_2",children:"public void roundRobinAndFirstAvailableTest() {\n  RpcClientConnectionPoolStub pool = new RpcClientConnectionPoolStub();\n  RpcSenderStub connection1 = new RpcSenderStub();\n  RpcSenderStub connection2 = new RpcSenderStub();\n  RpcSenderStub connection3 = new RpcSenderStub();\n  RpcSenderStub connection4 = new RpcSenderStub();\n  pool.put(address1, connection1);\n  pool.put(address2, connection2);\n  // we don't put connection3\n  pool.put(address4, connection4);\n  int iterations = 20;\n  RpcStrategy strategy = RpcStrategies.roundRobin(\n    firstAvailable(servers(address1, address2)),\n    firstAvailable(servers(address3, address4)));\n\n  RpcSender sender = strategy.createSender(pool);\n  for (int i = 0; i < iterations; i++) {\n    sender.sendRequest(new Object(), 50, assertNoCalls());\n  }\n\n  assertEquals(iterations / 2, connection1.getRequests());\n  assertEquals(0, connection2.getRequests());\n  assertEquals(0, connection3.getRequests());\n  assertEquals(iterations / 2, connection4.getRequests());\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{text:"GitHub",url:"/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java#L72-L96"})]}),"\n",(0,s.jsx)(n.h2,{id:"sharding-and-first-valid-strategies-combined",children:"Sharding and First Valid Strategies Combined"}),"\n",(0,s.jsxs)(n.p,{children:["You can also create your own sharding functions and combine them with other strategies as needed. In this example, we create 5 identical connections but we do not put ",(0,s.jsx)(n.em,{children:"connection2"})," into the pool. Next, we provide a simple sharding function that distributes requests among shards according to the content of the request. We split the connections into two shards and set a ",(0,s.jsx)(i.Z,{text:"First Valid Result",url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/strategy/impl/FirstValidResult.java"})," strategy for both. This strategy sends the request to all available servers."]}),"\n",(0,s.jsx)(n.p,{children:"Now, we manually send 7 requests:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["4 with ",(0,s.jsx)(n.code,{children:"0"})," message, so they will be sent to the first shard's ",(0,s.jsx)(n.em,{children:"connection1"})]}),"\n",(0,s.jsxs)(n.li,{children:["3 with ",(0,s.jsx)(n.code,{children:"1"}),", so they will all be sent to all three connections of the second shard"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_3",children:"public void shardingAndFirstValidTest() {\n  RpcClientConnectionPoolStub pool = new RpcClientConnectionPoolStub();\n  RpcSenderStub connection1 = new RpcSenderStub();\n  RpcSenderStub connection2 = new RpcSenderStub();\n  RpcSenderStub connection3 = new RpcSenderStub();\n  RpcSenderStub connection4 = new RpcSenderStub();\n  RpcSenderStub connection5 = new RpcSenderStub();\n  pool.put(address1, connection1);\n  // we don't put connection2\n  pool.put(address3, connection3);\n  pool.put(address4, connection4);\n  pool.put(address5, connection5);\n  int shardsCount = 2;\n  RpcStrategy strategy = sharding(\n    item -> (Integer) item % shardsCount,\n    firstValidResult(servers(address1, address2)),\n    firstValidResult(servers(address3, address4, address5)));\n\n  RpcSender sender = strategy.createSender(pool);\n  sender.sendRequest(0, 50, assertNoCalls());\n  sender.sendRequest(0, 50, assertNoCalls());\n  sender.sendRequest(1, 50, assertNoCalls());\n  sender.sendRequest(1, 50, assertNoCalls());\n  sender.sendRequest(0, 50, assertNoCalls());\n  sender.sendRequest(0, 50, assertNoCalls());\n  sender.sendRequest(1, 50, assertNoCalls());\n\n  assertEquals(4, connection1.getRequests());\n  assertEquals(0, connection2.getRequests());\n  assertEquals(3, connection3.getRequests());\n  assertEquals(3, connection4.getRequests());\n  assertEquals(3, connection5.getRequests());\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java#L101-L133",children:(0,s.jsx)(n.strong,{children:"GitHub"})})]}),"\n",(0,s.jsx)(n.h2,{id:"rendezvous-hashing-strategy",children:"Rendezvous Hashing Strategy"}),"\n",(0,s.jsxs)(n.p,{children:["Rendezvous hashing strategy pre-computes the hash function for the ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/main/java/io/Reactify/rpc/client/sender/RpcSender.java",children:(0,s.jsx)(n.code,{children:"RpcSender"})})," and creates a map of RPC servers. The map is stored in a cache and will be recalculated only if servers go online/offline."]}),"\n",(0,s.jsxs)(n.p,{children:["In this example, requests will be evenly distributed between ",(0,s.jsx)(n.em,{children:"connection1"}),", ",(0,s.jsx)(n.em,{children:"connection2"}),", and ",(0,s.jsx)(n.em,{children:"connection3"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_4",children:"public void rendezvousHashingTest() {\n  RpcClientConnectionPoolStub pool = new RpcClientConnectionPoolStub();\n  RpcSenderStub connection1 = new RpcSenderStub();\n  RpcSenderStub connection2 = new RpcSenderStub();\n  RpcSenderStub connection3 = new RpcSenderStub();\n  RpcSenderStub connection4 = new RpcSenderStub();\n  RpcSenderStub connection5 = new RpcSenderStub();\n  RpcStrategy strategy = RendezvousHashing.builder((Integer item) -> item)\n    .withShard(1, firstAvailable(servers(address1, address2)))\n    .withShard(2, firstAvailable(servers(address3, address4)))\n    .withShard(3, server(address5))\n    .build();\n  int iterationsPerLoop = 1000;\n  RpcSender sender;\n\n  pool.put(address1, connection1);\n  pool.put(address2, connection2);\n  pool.put(address3, connection3);\n  pool.put(address4, connection4);\n  pool.put(address5, connection5);\n  sender = strategy.createSender(pool);\n  for (int i = 0; i < iterationsPerLoop; i++) {\n    sender.sendRequest(i, 50, ignore());\n  }\n"})}),"\n",(0,s.jsx)(n.p,{children:"When we remove some connections from the pool, the hash function is recalculated:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_5",children:"  pool.remove(address3);\n  pool.remove(address4);\n  sender = strategy.createSender(pool);\n  for (int i = 0; i < iterationsPerLoop; i++) {\n    sender.sendRequest(i, 50, ignore());\n  }\n\n  double acceptableError = iterationsPerLoop / 10.0;\n  assertEquals(iterationsPerLoop / 3.0 + iterationsPerLoop / 2.0, connection1.getRequests(), acceptableError);\n  assertEquals(0, connection2.getRequests());\n  assertEquals(iterationsPerLoop / 3.0, connection3.getRequests(), acceptableError);\n  assertEquals(0, connection4.getRequests());\n  assertEquals(iterationsPerLoop / 3.0 + iterationsPerLoop / 2.0, connection5.getRequests(), acceptableError);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.javaL138-L177",children:(0,s.jsx)(n.strong,{children:"GitHub"})})]}),"\n",(0,s.jsx)(n.h2,{id:"type-dispatch-strategy",children:"Type Dispatch Strategy"}),"\n",(0,s.jsxs)(n.p,{children:["This strategy simply distributes requests among shards according to the type of the request. In the example,\nall ",(0,s.jsx)(n.strong,{children:"String"})," requests are sent on the first shard, which has a ",(0,s.jsx)(n.em,{children:"First Valid Result"})," strategy for servers. Requests\nof all other types are sent to the second shard with a ",(0,s.jsx)(n.em,{children:"First Available"})," strategy. The result is that ",(0,s.jsx)(n.em,{children:"connection1"})," and\n",(0,s.jsx)(n.em,{children:"connection2"})," will handle 35 requests, ",(0,s.jsx)(n.em,{children:"connection3"})," will handle 25 requests, while ",(0,s.jsx)(n.em,{children:"connection4"})," and ",(0,s.jsx)(n.em,{children:"connection5"})," will handle 0 requests\nbecasue ",(0,s.jsx)(n.em,{children:"connection3"})," was always ",(0,s.jsx)(n.em,{children:"First Available"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"url=/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java tag=REGION_6",children:'public void typeDispatchTest() {\n  RpcClientConnectionPoolStub pool = new RpcClientConnectionPoolStub();\n  RpcSenderStub connection1 = new RpcSenderStub();\n  RpcSenderStub connection2 = new RpcSenderStub();\n  RpcSenderStub connection3 = new RpcSenderStub();\n  RpcSenderStub connection4 = new RpcSenderStub();\n  RpcSenderStub connection5 = new RpcSenderStub();\n  pool.put(address1, connection1);\n  pool.put(address2, connection2);\n  pool.put(address3, connection3);\n  pool.put(address4, connection4);\n  pool.put(address5, connection5);\n  int timeout = 50;\n  int iterationsPerDataStub = 25;\n  int iterationsPerDataStubWithKey = 35;\n  RpcSender sender;\n  RpcStrategy strategy = TypeDispatching.builder()\n    .with(String.class,\n      firstValidResult(servers(address1, address2)))\n    .withDefault(\n      firstAvailable(servers(address3, address4, address5)))\n    .build();\n\n  sender = strategy.createSender(pool);\n  for (int i = 0; i < iterationsPerDataStub; i++) {\n    sender.sendRequest(new Object(), timeout, assertNoCalls());\n  }\n  for (int i = 0; i < iterationsPerDataStubWithKey; i++) {\n    sender.sendRequest("request", timeout, assertNoCalls());\n  }\n\n  assertEquals(iterationsPerDataStubWithKey, connection1.getRequests());\n  assertEquals(iterationsPerDataStubWithKey, connection2.getRequests());\n  assertEquals(iterationsPerDataStub, connection3.getRequests());\n  assertEquals(0, connection4.getRequests());\n  assertEquals(0, connection5.getRequests());\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can find example sources on ",(0,s.jsx)(i.Z,{url:"/cloud-rpc/src/test/java/io/Reactify/rpc/client/sender/RpcStrategiesTest.java#L182-L217",children:(0,s.jsx)(n.strong,{children:"GitHub"})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},7618:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var s=t(9962),r=t(5893);const i=e=>{let{url:n,text:t,isInline:i=!0,children:c}=e;const{siteConfig:a}=(0,s.Z)(),o=n.startsWith("/examples")?a.customFields.githubExamplesBranch:a.customFields.githubBranch;return(0,r.jsx)("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:a.customFields.githubUrl+"/"+o+n,target:"_blank",children:t||c})}},7815:(e,n,t)=>{t.d(n,{Z:()=>r});t(7294);var s=t(9962);const r=e=>{let{name:n}=e;const{siteConfig:t}=(0,s.Z)();if(!n)throw new Error("Variable name is required");if(void 0===t.customFields[n])throw new Error(`Variable ${n} not exist`);return t.customFields[n]}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>c});var s=t(7294);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[5033],{1092:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var i=n(5893),a=n(1151),r=n(7815),o=n(7618);const l={title:"ActiveJ | Simple web application with template engine integration",sidebar_label:"Template Engine Integration",keywords:["java","java framework","tutorial","java for beginners","guide","http server","spring alternative","netty alternative","jetty alternative","template engine","mustache","poll application"],description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations."},s="Template engine integration",c={id:"tutorials/template-engine-integration",title:"ActiveJ | Simple web application with template engine integration",description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations.",source:"@site/docs/tutorials/template-engine-integration.mdx",sourceDirName:"tutorials",slug:"/tutorials/template-engine-integration",permalink:"/tutorials/template-engine-integration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | Simple web application with template engine integration",sidebar_label:"Template Engine Integration",keywords:["java","java framework","tutorial","java for beginners","guide","http server","spring alternative","netty alternative","jetty alternative","template engine","mustache","poll application"],description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations."},sidebar:"tutorials",previous:{title:"Getting Started",permalink:"/tutorials/getting-started"},next:{title:"HTTP Decoder",permalink:"/tutorials/http-decoder"}},p={},d=[{value:"Creating launcher",id:"creating-launcher",level:2},{value:"Running the application",id:"running-the-application",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"template-engine-integration",children:"Template engine integration"}),"\n",(0,i.jsx)(t.p,{children:"In this example we will implement template engines in ActiveJ applications. The example shows how to create a simple Poll app which creates new polls with a custom title, description, and options. Each new poll gets a unique generated link that leads to the page where you can vote."}),"\n",(0,i.jsxs)(t.p,{children:["See how simple it is to implement such features using ActiveJ: the embedded application server has only about ",(0,i.jsx)(t.strong,{children:"100 lines of code"})," with ",(0,i.jsx)(t.strong,{children:"no additional xml configurations"}),". In this example we used ",(0,i.jsx)(t.a,{href:"https://mustache.github.io/",children:(0,i.jsx)(t.strong,{children:"Mustache"})})," as a template engine."]}),"\n",(0,i.jsxs)(t.p,{children:["Here we will consider only the ",(0,i.jsxs)(t.a,{href:"#creating-launcher",children:[(0,i.jsx)(t.code,{children:"ApplicationLauncher"})," class"]}),", which is the main class of the application. You can find full example sources on ",(0,i.jsx)(o.Z,{text:"GitHub",url:"/examples/tutorials/template-engine"})]}),"\n",(0,i.jsx)(t.h2,{id:"creating-launcher",children:"Creating launcher"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ApplicationLauncher"})," launches our application, takes care of routing and proper content generation on HTML pages. We will extend ActiveJ's ",(0,i.jsx)(t.code,{children:"HttpServerLauncher"})," to manage the application's lifecycle:"]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"In this example we omit error handling to keep everything brief and simple."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_1",children:"public final class ApplicationLauncher extends HttpServerLauncher {\n\n  private static ByteBuf applyTemplate(Mustache mustache, Map<String, Object> scopes) {\n    ByteBufWriter writer = new ByteBufWriter();\n    mustache.execute(writer, scopes);\n    return writer.getBuf();\n  }\n\n  @Provides\n  PollDao pollRepo() {\n    return new PollDaoImpl();\n  }\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's have a closer look at the launcher. It contains two methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"applyTemplate(Mustache mustache, Map<String, Object> scopes)"})," fills the provided Mustache template with the given data through a ",(0,i.jsx)(t.a,{href:"/misc/bytebuf",children:(0,i.jsx)(t.code,{children:"ByteBuf"})})," - a more efficient implementation of ByteBuffer;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pollRepo()"})," provides the business logic of our app. The ",(0,i.jsx)(t.code,{children:"@Provides"})," annotation means it's done through ",(0,i.jsx)(t.a,{href:"/inject",children:"ActiveJ Inject DI"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Next, we provide ",(0,i.jsx)(t.code,{children:"AsyncServlet"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_2",children:'@Provides\nAsyncServlet servlet(Reactor reactor, PollDao pollDao) {\n  Mustache singlePollView = new DefaultMustacheFactory().compile("templates/singlePollView.html");\n  Mustache singlePollCreate = new DefaultMustacheFactory().compile("templates/singlePollCreate.html");\n  Mustache listPolls = new DefaultMustacheFactory().compile("templates/listPolls.html");\n\n  return RoutingServlet.builder(reactor)\n    .with(GET, "/", request -> HttpResponse.ok200()\n      .withBody(applyTemplate(listPolls, Map.of("polls", pollDao.findAll().entrySet())))\n      .toPromise())\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"AsyncServlet"})," we create three Mustache objects, one for each HTML page.\nTo define routing, we create a ",(0,i.jsx)(t.code,{children:"RoutingServlet"}),". You may notice that the routing approach resembles Express.js. In the example above\nwe've added the mapping to the homepage by using the ",(0,i.jsx)(t.code,{children:"with"})," method of ",(0,i.jsx)(t.code,{children:"RoutingServlet"}),"'s builder."]}),"\n",(0,i.jsxs)(t.p,{children:["Method",(0,i.jsx)(t.code,{children:"with(@Nullable HttpMethod method, String path, AsyncServlet servlet)"})," adds a route to the ",(0,i.jsx)(t.code,{children:"RoutingServlet"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"method"})," is one of the HTTP methods (",(0,i.jsx)(t.code,{children:"GET"}),", ",(0,i.jsx)(t.code,{children:"POST"})," and so on)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"path"})," is the path on the server"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"servlet"})," defines the logic of request processing. If you need to get some data from the ",(0,i.jsx)(t.em,{children:"request"})," while processing you can use:"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"request.getPathParameter(String key)"}),"/",(0,i.jsx)(t.code,{children:"request.getQueryParameter(String key)"})," (see example of ",(0,i.jsx)(t.a,{href:"/http/examples#request-parameters-example",children:(0,i.jsx)(t.code,{children:"query parameter usage"})}),"')\nto provide the key of the needed parameter and receive back a corresponding String"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"request.getPostParameters()"})," to get a Map of all request parameters"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In this request we get all current polls and info about them in order to generate ",(0,i.jsx)(t.em,{children:"listPolls"})," page."]}),"\n",(0,i.jsx)(t.p,{children:"Let's add one more request:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_3",children:'.with(GET, "/poll/:id", request -> {\n  int id = Integer.parseInt(request.getPathParameter("id"));\n  return HttpResponse.ok200()\n    .withBody(applyTemplate(singlePollView, Map.of("id", id, "poll", pollDao.find(id))))\n    .toPromise();\n})\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This request returns a page with a poll which id was specified in the path.\nPay attention to the provided path ",(0,i.jsx)(t.code,{children:"/poll/:id"})," syntax. ",(0,i.jsx)(t.code,{children:":"})," states that the following characters until the next ",(0,i.jsx)(t.code,{children:"/"})," are a\nvariable; in this case, its keyword is ",(0,i.jsx)(t.code,{children:"id"}),". This way you don't have to map each poll's id to a different request."]}),"\n",(0,i.jsxs)(t.p,{children:["The next requests with ",(0,i.jsx)(t.code,{children:"/create"}),", ",(0,i.jsx)(t.code,{children:"/vote"}),", ",(0,i.jsx)(t.code,{children:"/add"})," and ",(0,i.jsx)(t.code,{children:"/delete"})," paths take care of providing a page for creating\nnew polls, voting, adding created polls to the ",(0,i.jsx)(t.em,{children:"pollDao"})," and deleting them from it respectively:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_4",children:'.with(GET, "/create", request ->\n  HttpResponse.ok200()\n    .withBody(applyTemplate(singlePollCreate, Map.of()))\n    .toPromise())\n.with(POST, "/vote", request -> request.loadBody()\n  .then(() -> {\n    Map<String, String> params = request.getPostParameters();\n    String option = params.get("option");\n    String stringId = params.get("id");\n    if (option == null || stringId == null) {\n      return HttpResponse.ofCode(401).toPromise();\n    }\n\n    int id = Integer.parseInt(stringId);\n    PollDao.Poll question = pollDao.find(id);\n\n    question.vote(option);\n\n    return HttpResponse.redirect302(nonNullElse(request.getHeader(REFERER), "/")).toPromise();\n  }))\n.with(POST, "/add", request -> request.loadBody()\n  .then($ -> {\n    Map<String, String> params = request.getPostParameters();\n    String title = params.get("title");\n    String message = params.get("message");\n\n    String option1 = params.get("option1");\n    String option2 = params.get("option2");\n\n    int id = pollDao.add(new PollDao.Poll(title, message, List.of(option1, option2)));\n    return HttpResponse.redirect302("poll/" + id).toPromise();\n  }))\n.with(POST, "/delete", request -> request.loadBody()\n  .then(() -> {\n    Map<String, String> params = request.getPostParameters();\n    String id = params.get("id");\n    if (id == null) {\n      return HttpResponse.ofCode(401).toPromise();\n    }\n    pollDao.remove(Integer.parseInt(id));\n\n    return HttpResponse.redirect302("/").toPromise();\n  }))\n.build();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Also, we defined ",(0,i.jsx)(t.code,{children:"main()"})," method which will start our launcher:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_5",children:"public static void main(String[] args) throws Exception {\n  Launcher launcher = new ApplicationLauncher();\n  launcher.launch(args);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"And that's it, we have a full-functional poll application!"}),"\n",(0,i.jsx)(t.h2,{id:"running-the-application",children:"Running the application"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to run the example, you need to from GitHub and import\nit as a Maven project. Check out branch ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(r.Z,{name:"currentVersion"})}),". Before running the example, build the project (",(0,i.jsx)(t.strong,{children:"Ctrl + F9"})," for IntelliJ IDEA).\nOpen ",(0,i.jsx)(t.code,{children:"ApplicationLauncher"})," class and run its ",(0,i.jsx)(t.code,{children:"main()"})," method.\nThen open your favourite browser and go to ",(0,i.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},7618:(e,t,n)=>{n.d(t,{Z:()=>r});n(7294);var i=n(9962),a=n(5893);const r=e=>{let{url:t,text:n,isInline:r=!0,children:o}=e;const{siteConfig:l}=(0,i.Z)(),s=t.startsWith("/examples")?l.customFields.githubExamplesBranch:l.customFields.githubBranch;return(0,a.jsx)("a",{style:r?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+s+t,target:"_blank",children:n||o})}},7815:(e,t,n)=>{n.d(t,{Z:()=>a});n(7294);var i=n(9962);const a=e=>{let{name:t}=e;const{siteConfig:n}=(0,i.Z)();if(!t)throw new Error("Variable name is required");if(void 0===n.customFields[t])throw new Error(`Variable ${t} not exist`);return n.customFields[t]}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var i=n(7294);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);
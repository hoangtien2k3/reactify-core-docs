"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[277],{1082:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>v});var t=n(5893),i=n(1151),a=n(7618),c=n(4304),s=n(7815);const l={title:"ActiveJ | Service Graph, manages application services according to their dependency graph",sidebar_label:"Service Graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",keywords:["service graph","java","java framework","spring alternative","netty alternative","jetty alternative","application services","threadpool","closeables","datasource"]},o="Service Graph",p={id:"boot/servicegraph",title:"ActiveJ | Service Graph, manages application services according to their dependency graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",source:"@site/docs/boot/servicegraph.mdx",sourceDirName:"boot",slug:"/boot/servicegraph",permalink:"/boot/servicegraph",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | Service Graph, manages application services according to their dependency graph",sidebar_label:"Service Graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",keywords:["service graph","java","java framework","spring alternative","netty alternative","jetty alternative","application services","threadpool","closeables","datasource"]},sidebar:"docs",previous:{title:"Launcher",permalink:"/boot/launcher"},next:{title:"Workers",permalink:"/boot/workers"}},d={},v=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2},{value:"Examples",id:"examples",level:2},{value:"SimpleServiceExample",id:"simpleserviceexample",level:3},{value:"ReactiveServiceExample",id:"reactiveserviceexample",level:3},{value:"AdvancedServiceExample",id:"advancedserviceexample",level:3}];function u(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"service-graph",children:"Service Graph"}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(r.p,{children:"ServiceGraph is a tool for managing the procedure of starting and stopping services. At start up, it creates a graph of all required services based on dependencies provided.\nThis graph is used to start and stop services concurrently, resulting in faster startup times without services interfering with each other."}),"\n",(0,t.jsx)(r.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Designed to be used in combination with ",(0,t.jsx)(r.a,{href:"/inject",children:"ActiveJ Inject"})," and ",(0,t.jsx)(r.a,{href:"/boot/launcher",children:"Launcher"}),"\nas a means of starting/stopping application services according to their dependency graph"]}),"\n",(0,t.jsx)(r.li,{children:"It starts services following the multithreaded graph traversal algorithm: leaf services first, and so on"}),"\n",(0,t.jsx)(r.li,{children:"It stops services in reverse order"}),"\n",(0,t.jsxs)(r.li,{children:["The services dependency graph is automatically built based on the ",(0,t.jsx)(r.strong,{children:"ActiveJ Inject"})," dependencies graph, but can be customized based on\nuser-specified dependencies."]}),"\n",(0,t.jsxs)(r.li,{children:["Supports many standard services like ",(0,t.jsx)(r.strong,{children:"ThreadPool"}),", ",(0,t.jsx)(r.strong,{children:"Closeables"}),", ",(0,t.jsx)(r.strong,{children:"DataSource"}),", as well as Active-specific\nservices such as ",(0,t.jsx)(r.a,{href:"/async-io/eventloop",children:"eventloops"}),", reactive servers and reactive services."]}),"\n",(0,t.jsx)(r.li,{children:"Can be configured to support other services with user-provided adapters"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"To get a basic understanding of the ServiceGraph role, let's take a look at a very simple example of an HTTP Server:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",metastring:"url=/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java tag=EXAMPLE",children:'public final class HttpHelloWorldExample extends HttpServerLauncher {\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello World")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new HttpHelloWorldExample();\n    launcher.launch(args);\n  }\n}\n'})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["This application extends predefined ",(0,t.jsx)(a.Z,{url:"/launchers/http/src/main/java/io/activej/launchers/http/HttpServerLauncher.java",children:(0,t.jsx)(r.code,{children:"HttpServerLauncher"})})," which features ",(0,t.jsx)(a.Z,{url:"/boot-servicegraph/src/main/java/io/activej/service/ServiceGraphModule.java",children:(0,t.jsx)(r.code,{children:"ServiceGraphModule"})})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"HttpServerLauncher"})," uses two services: ",(0,t.jsx)(a.Z,{url:"/core-http/src/main/java/io/activej/http/HttpServer.java",children:(0,t.jsx)(r.code,{children:"HttpServer"})})," and ",(0,t.jsx)(r.a,{href:"/async-io/eventloop",children:(0,t.jsx)(r.code,{children:"Eventloop"})})," as a reactor."]}),"\n"]}),"\n",(0,t.jsx)(c.Z,{chart:"\ngraph LR\n    HttpServer --\x3e Eventloop\n"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["According to this graph, Service Graph starts ",(0,t.jsx)(r.code,{children:"Eventloop"})," first. The dependent ",(0,t.jsx)(r.code,{children:"HttpServer"})," is started afterwards"]}),"\n",(0,t.jsxs)(r.li,{children:["When the application stops, the services will are stopped in reverse order: ",(0,t.jsx)(r.code,{children:"HttpServer"})," first and ",(0,t.jsx)(r.code,{children:"Eventloop"})," next"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.p,{children:"To run the examples, you need to clone ActiveJ from GitHub"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,t.jsxs)(r.p,{children:["And import it as a Maven project. Check out tag ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(s.Z,{name:"currentVersion"})}),". Before running the examples, build the project.\nThese examples are located at ",(0,t.jsx)(r.code,{children:"activej/examples/core/boot"})]})]}),"\n",(0,t.jsx)(r.h3,{id:"simpleserviceexample",children:"SimpleServiceExample"}),"\n",(0,t.jsx)(r.p,{children:"In this example, we create an application that extends Launcher and has a simple custom service that basically only\nstarts and stops:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",metastring:"url=/examples/core/boot/src/main/java/SimpleServiceExample.java tag=EXAMPLE",children:'public class SimpleServiceExample extends Launcher {\n  public static void main(String[] args) throws Exception {\n    SimpleServiceExample example = new SimpleServiceExample();\n    example.launch(args);\n  }\n\n  @Inject\n  CustomService customService;\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Inject\n  private static class CustomService implements Service {\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("|SERVICE STARTING|");\n      return CompletableFuture.completedFuture(null);\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("|SERVICE STOPPING|");\n      return CompletableFuture.completedFuture(null);\n    }\n  }\n\n  @Override\n  protected void run() {\n    System.out.println("|RUNNING|");\n  }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(a.Z,{url:"/examples/core/boot/src/main/java/SimpleServiceExample.java",children:"See full example on GitHub"})})}),"\n",(0,t.jsx)(r.h3,{id:"reactiveserviceexample",children:"ReactiveServiceExample"}),"\n",(0,t.jsx)(r.p,{children:"Service Graph is also able to start and stop your custom services:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",metastring:"url=/examples/core/boot/src/main/java/ReactiveServiceExample.java tag=EXAMPLE",children:'public class ReactiveServiceExample extends Launcher {\n\n  @Provides\n  Reactor reactor() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  @Eager\n  CustomReactiveService customEventloopService(Reactor reactor) {\n    return new CustomReactiveService(reactor);\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Override\n  protected void run() {\n    System.out.println("|RUNNING|");\n  }\n\n  private static final class CustomReactiveService extends AbstractReactive implements ReactiveService {\n    public CustomReactiveService(Reactor reactor) {\n      super(reactor);\n    }\n\n    @Override\n    public Promise<?> start() {\n      System.out.println("|CUSTOM EVENTLOOP SERVICE STARTING|");\n      return Promises.delay(Duration.ofMillis(10))\n        .whenResult(() -> System.out.println("|CUSTOM EVENTLOOP SERVICE STARTED|"));\n    }\n\n    @Override\n    public Promise<?> stop() {\n      System.out.println("|CUSTOM EVENTLOOP SERVICE STOPPING|");\n      return Promises.delay(Duration.ofMillis(10))\n        .whenResult(() -> System.out.println("|CUSTOM EVENTLOOP SERVICE STOPPED|"));\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    ReactiveServiceExample example = new ReactiveServiceExample();\n    example.launch(args);\n  }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(a.Z,{url:"/examples/core/boot/src/main/java/ReactiveServiceExample.java",children:"See full example on GitHub"})})}),"\n",(0,t.jsx)(r.h3,{id:"advancedserviceexample",children:"AdvancedServiceExample"}),"\n",(0,t.jsx)(r.p,{children:"The Service Graph can manage more complex service dependencies. For example, suppose we have a prototype e-mail service.\nIt needs two services to work properly - an authorization service and a database service. The authorization\nservice also requires a database service, as well as Eventloop and Executor. As a result, we have the following service graph:"}),"\n",(0,t.jsx)(c.Z,{chart:"\ngraph LR\n    id1(EmailService) --\x3e id2(AuthService)\n    id2 --\x3e id3(DBService)\n    id1 --\x3e id3\n    id2 --\x3e Executor\n    id2 --\x3e Eventloop\n"}),"\n",(0,t.jsxs)(r.p,{children:["And ",(0,t.jsx)(r.code,{children:"ServiceGraphModule"})," will start and stop all these services in the right order:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:"=== STARTING APPLICATION\n\nStarted java.util.concurrent.Executor\nStarted io.activej.eventloop.Eventloop\nStarted AdvancedServiceExample$DBService\n\nStarted AdvancedServiceExample$AuthService\n\nStarted AdvancedServiceExample$EmailService\n\n === STOPPING APPLICATION\n\nStopped AdvancedServiceExample$EmailService\n\nStopped AdvancedServiceExample$AuthService\n\nStopped java.util.concurrent.Executor\nStopped io.activej.eventloop.Eventloop\nStopped AdvancedServiceExample$DBService\n"})}),"\n",(0,t.jsx)(r.p,{children:"This application looks as follows:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",metastring:"url=/examples/core/boot/src/main/java/AdvancedServiceExample.java tag=EXAMPLE",children:'public class AdvancedServiceExample extends Launcher {\n  @Provides\n  @Eager\n  DBService dbService() {\n    return new DBService();\n  }\n\n  @Provides\n  @Eager\n  EmailService emailService(DBService dbService, AuthService authService) {\n    return new EmailService(dbService, authService);\n  }\n\n  @Provides\n  @Eager\n  AuthService authService(Reactor reactor, Executor executor, DBService dbService) {\n    return new AuthService(reactor, executor, dbService);\n  }\n\n  @Provides\n  Reactor reactor() {\n    return Eventloop.builder()\n      .withCurrentThread()\n      .build();\n  }\n\n  @Provides\n  Executor executor() {\n    return Executors.newCachedThreadPool();\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @SuppressWarnings("FieldCanBeLocal")\n  private static class AuthService extends AbstractReactive\n    implements ReactiveService {\n    private final Executor executor;\n    private final DBService dbService;\n\n    public AuthService(Reactor reactor, Executor executor, DBService dbService) {\n      super(reactor);\n      this.executor = executor;\n      this.dbService = dbService;\n    }\n\n    @Override\n    public Promise<?> start() {\n      System.out.println("AuthService starting");\n      return Promise.ofBlocking(executor,\n        () -> System.out.println("AuthService started"));\n    }\n\n    @Override\n    public Promise<?> stop() {\n      return Promise.ofBlocking(executor,\n        () -> System.out.println("AuthService stopped"));\n    }\n  }\n\n  private static class DBService implements Service {\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("DBService is starting");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("DBService is started");\n      });\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("DBService is stopping");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("DBService is stopped");\n      });\n    }\n  }\n\n  @SuppressWarnings("FieldCanBeLocal")\n  private static class EmailService implements Service {\n    private final DBService service;\n    private final AuthService authService;\n\n    public EmailService(DBService service, AuthService authService) {\n      this.service = service;\n      this.authService = authService;\n    }\n\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("EmailService is starting");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("EmailService is started");\n      });\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("EmailService is stopping");\n      return CompletableFuture.runAsync(() -> System.out.println("EmailService is stopped"));\n    }\n  }\n\n  @Override\n  protected void run() {\n  }\n\n  public static void main(String[] args) throws Exception {\n    AdvancedServiceExample example = new AdvancedServiceExample();\n    example.launch(args);\n  }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(a.Z,{url:"/examples/core/boot/src/main/java/AdvancedServiceExample.java",children:"See full example on GitHub"})})})]})}function h(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},7618:(e,r,n)=>{n.d(r,{Z:()=>a});n(7294);var t=n(9962),i=n(5893);const a=e=>{let{url:r,text:n,isInline:a=!0,children:c}=e;const{siteConfig:s}=(0,t.Z)(),l=r.startsWith("/examples")?s.customFields.githubExamplesBranch:s.customFields.githubBranch;return(0,i.jsx)("a",{style:a?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+l+r,target:"_blank",children:n||c})}},4304:(e,r,n)=>{n.d(r,{Z:()=>c});var t=n(7294),i=n(6365),a=n(5893);i.L.initialize({startOnLoad:!0});const c=e=>{let{chart:r}=e;return(0,t.useEffect)((()=>{i.L.contentLoaded()}),[]),(0,a.jsx)("div",{className:"mermaid",children:r})}},7815:(e,r,n)=>{n.d(r,{Z:()=>i});n(7294);var t=n(9962);const i=e=>{let{name:r}=e;const{siteConfig:n}=(0,t.Z)();if(!r)throw new Error("Variable name is required");if(void 0===n.customFields[r])throw new Error(`Variable ${r} not exist`);return n.customFields[r]}}}]);
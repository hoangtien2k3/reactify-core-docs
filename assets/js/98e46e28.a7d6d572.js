"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[2208],{4573:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var c=r(5893),t=r(1151),a=r(7618);const i={keywords:["java","java framework","tutorial","guide","memcached","rpc","client-server","web application"],sidebar_label:"Memcached-like Application",title:"ActiveJ RPC | Create a memcached-like application with RPC communication protocol using ActiveJ RPC.",description:"Create a memcached-like application with RPC communication protocol using ActiveJ RPC."},o="Memcached-like Application",l={id:"rpc/memcached-like-application",title:"ActiveJ RPC | Create a memcached-like application with RPC communication protocol using ActiveJ RPC.",description:"Create a memcached-like application with RPC communication protocol using ActiveJ RPC.",source:"@site/docs/rpc/memcached-like-application.mdx",sourceDirName:"rpc",slug:"/rpc/memcached-like-application",permalink:"/rpc/memcached-like-application",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{keywords:["java","java framework","tutorial","guide","memcached","rpc","client-server","web application"],sidebar_label:"Memcached-like Application",title:"ActiveJ RPC | Create a memcached-like application with RPC communication protocol using ActiveJ RPC.",description:"Create a memcached-like application with RPC communication protocol using ActiveJ RPC."},sidebar:"docs",previous:{title:"Key-Value Storage",permalink:"/rpc/key-value-storage"},next:{title:"Overview",permalink:"/fs"}},s={},d=[{value:"Memcached Client and Server Modules",id:"memcached-client-and-server-modules",level:2},{value:"Create Client and Server",id:"create-client-and-server",level:2},{value:"Running the application",id:"running-the-application",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"memcached-like-application",children:"Memcached-like Application"}),"\n",(0,c.jsx)(n.p,{children:"In this tutorial we will create a memcached-like client-server application based on the RPC communication protocol\nand ActiveJ technologies."}),"\n",(0,c.jsxs)(n.p,{children:["You can find full example sources on ",(0,c.jsx)(a.Z,{text:"GitHub",url:"/examples/cloud/rpc/src/main/java/memcached"}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"memcached-client-and-server-modules",children:"Memcached Client and Server Modules"}),"\n",(0,c.jsx)(n.p,{children:"First of all, let's take a look at the initial ActiveJ RPC implementation of these modules, since our application will be built using\nthem:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(a.Z,{text:"MemcacheServerModule",url:"/extra/cloud-memcache/src/main/java/io/activej/memcache/server/MemcacheServerModule.java"})})," exports an ",(0,c.jsx)(n.strong,{children:"RpcServer"})," to handle ",(0,c.jsx)(n.code,{children:"get"})," and ",(0,c.jsx)(n.code,{children:"put"})," requests.  To launch multiple servers on a single JVM, we provide the ",(0,c.jsx)(a.Z,{text:"MemcacheMultiServerModule",url:"/examples/cloud/rpc/src/main/java/memcached/MemcacheMultiServerModule.java"})," with integrated ",(0,c.jsx)(n.a,{href:"/boot/workers",children:"WorkerPools"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(a.Z,{text:"MemcacheClientModule",url:"/extra/cloud-memcache/src/main/java/io/activej/memcache/client/MemcacheClientModule.java"})})," sets a ",(0,c.jsx)(n.a,{href:"/rpc/basic-examples#rendezvous-hashing-strategy",children:"Rendezvous Hashing Strategy"})," for request arrangement among shards of servers."]}),"\n"]}),"\n",(0,c.jsx)(n.admonition,{type:"note",children:(0,c.jsx)(n.p,{children:"This implementation covers only the basic usage. You may add more features as your application requires."})}),"\n",(0,c.jsx)(n.h2,{id:"create-client-and-server",children:"Create Client and Server"}),"\n",(0,c.jsxs)(n.p,{children:["Let's write our own ",(0,c.jsx)(a.Z,{text:"MemcacheLikeServer",url:"/examples/cloud/rpc/src/main/java/memcached/MemcacheLikeServer.java"}),"\nserver. We will also use the the lightning-fast Dependency Injection library ",(0,c.jsx)(n.a,{href:"/inject",children:"ActiveJ Inject"})," and the ",(0,c.jsx)(n.a,{href:"/boot/launcher",children:(0,c.jsx)(n.strong,{children:"ActiveJ Launcher"})})," to manage the application lifecycle:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",metastring:"url=/examples/cloud/rpc/src/main/java/memcached/MemcacheLikeServer.java tag=REGION_1",children:'public class MemcacheLikeServer extends Launcher {\n  @Inject\n  WorkerPool.Instances<RpcServer> instances;\n\n  @Provides\n  WorkerPool workerPool(WorkerPools workerPools) {\n    return workerPools.createPool(3);\n  }\n\n  @Provides\n  DefiningClassLoader classLoader() {\n    return DefiningClassLoader.create();\n  }\n\n  @Provides\n  Config config() {\n    return Config.create()\n      .with("memcache.buffers", "4")\n      .with("memcache.bufferCapacity", "64mb");\n  }\n\n  @Override\n  protected Module getModule() {\n    return ModuleBuilder.create()\n      .install(ServiceGraphModule.create())\n      .install(MemcacheMultiServerModule.create())\n      .install(WorkerPoolModule.create())\n      .build();\n  }\n\n  @Override\n  protected void run() throws Exception {\n    awaitShutdown();\n  }\n\n  public static void main(String[] args) throws Exception {\n    MemcacheLikeServer server = new MemcacheLikeServer();\n    server.launch(args);\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Since we are extending ",(0,c.jsx)(n.strong,{children:"Launcher"}),", we need to override 2 methods: the ",(0,c.jsx)(n.em,{children:"getModule()"})," method to provide ",(0,c.jsx)(n.a,{href:"/boot/servicegraph",children:(0,c.jsx)(n.strong,{children:"ServiceGraphModule"})})," and the ",(0,c.jsx)(n.em,{children:"run()"})," method to describe the main logic of the example."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["The number of server shards equals the number of ",(0,c.jsx)(a.Z,{text:"workerPools",url:"/boot-workers/src/main/java/io/activej/worker/WorkerPools.java"})]}),"\n",(0,c.jsxs)(n.li,{children:['As for the "memcached" functionality - we specify the number of buffers and their capacity in the ',(0,c.jsx)(a.Z,{text:"Config",url:"/boot-config/src/main/java/io/activej/config/Config.java"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Config"})," is used to set up everything ",(0,c.jsx)(a.Z,{text:"MemcacheMultiServerModule",url:"/examples/cloud/rpc/src/main/java/memcached/MemcacheMultiServerModule.java"})," needs to handle upcoming requests."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["Our ",(0,c.jsx)(a.Z,{text:"MemcacheLikeClient",url:"/examples/cloud/rpc/src/main/java/memcached/MemcacheLikeClient.java"})," will create ",(0,c.jsx)(n.code,{children:"put"})," and ",(0,c.jsx)(n.code,{children:"get"})," requests:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",metastring:"url=/examples/cloud/rpc/src/main/java/memcached/MemcacheLikeClient.java tag=REGION_1",children:'public class MemcacheLikeClient extends Launcher {\n\n  @Inject\n  RawMemcacheClientAdapter client;\n\n  @Inject\n  NioReactor reactor;\n\n  @Provides\n  NioReactor reactor() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  RawMemcacheClientAdapter rawMemcacheClientAdapter(RawMemcacheClient client) {\n    return new RawMemcacheClientAdapter(client);\n  }\n\n  @Provides\n  Config config() {\n    return Config.create()\n      .with("protocol.compression", "false")\n      .with("client.addresses", "localhost:9000, localhost:9001, localhost:9002");\n  }\n\n  @Provides\n  DefiningClassLoader classLoader() {\n    return DefiningClassLoader.create();\n  }\n\n  @Override\n  protected Module getModule() {\n    return ModuleBuilder.create()\n      .install(ServiceGraphModule.create())\n      .install(MemcacheClientModule.create())\n      .install(ConfigModule.builder()\n        .withEffectiveConfigLogger()\n        .build())\n      .build();\n  }\n\n  @Override\n  protected void run() throws ExecutionException, InterruptedException {\n    String message = "Hello, Memcached Server";\n\n    System.out.println();\n    CompletableFuture<Void> future = reactor.submit(() ->\n      sequence(\n        () -> Promises.all(range(0, 25).mapToObj(i ->\n          client.put(i, message))),\n        () -> Promises.all(range(0, 25).mapToObj(i ->\n          client.get(i).whenResult(res -> System.out.println(i + " : " + res))))));\n    future.get();\n    System.out.println();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher client = new MemcacheLikeClient();\n    client.launch(args);\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Since ",(0,c.jsx)(n.strong,{children:"MemcacheClientModule"})," uses a Rendezvous Hashing Strategy to achieve distribution of requests between\nshards of servers, in the client we need to provide the addresses of these shards - ",(0,c.jsx)(n.code,{children:"9001"}),", ",(0,c.jsx)(n.code,{children:"9002"}),", and ",(0,c.jsx)(n.code,{children:"9003"})," ports."]}),"\n",(0,c.jsxs)(n.li,{children:["In the ",(0,c.jsx)(n.a,{href:"/async-io/eventloop",children:(0,c.jsx)(n.strong,{children:"Reactor"})})," we ask to ",(0,c.jsx)(n.code,{children:"put"})," a message in the current ",(0,c.jsx)(n.em,{children:"i"})," of the ",(0,c.jsx)(n.em,{children:"bytes[i]"})," array,\nand ",(0,c.jsx)(n.code,{children:"get"})," it back from the corresponding cell."]}),"\n",(0,c.jsx)(n.li,{children:"Thus, the client will perform these operations asynchronously for the three shards, so we end up with a disordered output block."}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(a.Z,{text:"RawMemcacheClientAdapter",url:"/examples/cloud/rpc/src/main/java/memcached/RawMemcacheClientAdapter.java"})}),"\nis a manually created class. It uses ",(0,c.jsx)(a.Z,{text:"RawMemcacheClient",url:"/extra/cloud-memcache/src/main/java/io/activej/memcache/client/RawMemcacheClient.java"})," (an implementation of ",(0,c.jsx)(a.Z,{text:"MemcacheClient",url:"/extra/cloud-memcache/src/main/java/io/activej/memcache/client/MemcacheClient.java"}),") and defines the logic of the ",(0,c.jsx)(n.code,{children:"put"})," and ",(0,c.jsx)(n.code,{children:"get"})," methods for our ",(0,c.jsx)(n.strong,{children:"MemcacheLikeClient"}),"."]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"running-the-application",children:"Running the application"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["First, open and run the ",(0,c.jsx)(n.strong,{children:"MemcacheLikeServer"})," to launch the server;"]}),"\n",(0,c.jsxs)(n.li,{children:["To launch the client, run ",(0,c.jsx)(n.code,{children:"main()"})," method of ",(0,c.jsx)(n.strong,{children:"MemcacheLikeClient"}),";"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["You will see roughly the same output in the server's console (",(0,c.jsx)(n.code,{children:"..."})," omits similar messages):"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-text",children:"Server on port #9000 accepted message!\nServer on port #9000 accepted message!\n...\nServer on port #9000 accepted message!\nServer on port #9002 accepted message!\nServer on port #9002 accepted message!\n...\nServer on port #9002 accepted message!\nServer on port #9001 accepted message!\n...\nServer on port #9001 accepted message!\n"})}),"\n",(0,c.jsx)(n.p,{children:"In the client console you will see a similar output, confirming that the client received asynchronous responses from the server:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-text",children:"0 : Hello, Memcached Server\n3 : Hello, Memcached Server\n4 : Hello, Memcached Server\n...\n11 : Hello, Memcached Server\n13 : Hello, Memcached Server\n...\n20 : Hello, Memcached Server\n21 : Hello, Memcached Server\n24 : Hello, Memcached Server\n...\n17 : Hello, Memcached Server\n19 : Hello, Memcached Server\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},7618:(e,n,r)=>{r.d(n,{Z:()=>a});r(7294);var c=r(9962),t=r(5893);const a=e=>{let{url:n,text:r,isInline:a=!0,children:i}=e;const{siteConfig:o}=(0,c.Z)(),l=n.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,t.jsx)("a",{style:a?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+l+n,target:"_blank",children:r||i})}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>i});var c=r(7294);const t={},a=c.createContext(t);function i(e){const n=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),c.createElement(a.Provider,{value:n},e.children)}}}]);
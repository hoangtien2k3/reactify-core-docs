"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[9451],{8367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>j});var r=t(5893),i=t(1151),a=t(7618),s=t(4304);const c={title:"ActiveJ Inject Advanced | Lightning-fast and ultimately powerful Dependency Injection Java library",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",sidebar_label:"Under the hood",keywords:["di","dependency injection","guice alternative","spring di","spring alternative","di benchmarks","java","java di","java dependency injection","java framework"]},o="ActiveJ Inject under the hood",d={id:"inject/under-the-hood",title:"ActiveJ Inject Advanced | Lightning-fast and ultimately powerful Dependency Injection Java library",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",source:"@site/docs/inject/under-the-hood.mdx",sourceDirName:"inject",slug:"/inject/under-the-hood",permalink:"/inject/under-the-hood",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ Inject Advanced | Lightning-fast and ultimately powerful Dependency Injection Java library",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",sidebar_label:"Under the hood",keywords:["di","dependency injection","guice alternative","spring di","spring alternative","di benchmarks","java","java di","java dependency injection","java framework"]},sidebar:"docs",previous:{title:"Speeding up dependency injection",permalink:"/inject/speeding-up-injection"},next:{title:"Cookbook example",permalink:"/inject/cookbook-example"}},l={},j=[{value:"Implicit bindings",id:"implicit-bindings",level:2},{value:"Instance Injector",id:"instance-injector",level:2},{value:"Instance Provider",id:"instance-provider",level:2},{value:"Binding Generators",id:"binding-generators",level:2},{value:"Inspecting created dependency graph",id:"inspecting-created-dependency-graph",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"activej-inject-under-the-hood",children:"ActiveJ Inject under the hood"}),"\n",(0,r.jsx)(n.h2,{id:"implicit-bindings",children:"Implicit bindings"}),"\n",(0,r.jsx)(n.p,{children:"ActiveJ Inject provides several bindings implicitly. Some of these bindings are required for internal use while still\ncan be used by application code."}),"\n",(0,r.jsx)(n.p,{children:"These bindings are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#instance-injector",children:"InstanceInjector"})," binding used for injecting fields"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#instance-provider",children:"InstanceProvider"})," binding used for providing instances similar to ",(0,r.jsx)(n.code,{children:"Injector#getInstance"})," method"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/inject/optional-dependencies",children:"OptionalDependency"})," binding, which can be used to determine the presence or absence of a binding"]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"Key<T>"})," binding that you can use to receive an ActiveJ Inject ",(0,r.jsx)(n.code,{children:"Key"})," for a given type"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"instance-injector",children:"Instance Injector"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{text:"InstanceInjector",url:"/core-inject/src/main/java/io/activej/inject/InstanceInjector.java"})})," can inject instances into the ",(0,r.jsx)(n.code,{children:"@Inject"})," fields and methods of some already existing objects.\nLet's take a look at this simple example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceInjectorExample.java tag=REGION_1",children:'@Inject\nString message;\n\n@Provides\nString message() {\n  return "Hello, world!";\n}\n\n@Override\nprotected void run() {\n  System.out.println(message);\n}\n\npublic static void main(String[] args) throws Exception {\n  Launcher launcher = new InstanceInjectorExample();\n  launcher.launch(args);\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["A question that might bother you is how does the ",(0,r.jsx)(a.Z,{text:"Launcher",url:"/launcher/src/main/java/io/activej/launcher/Launcher.java"})," actually know that the message variable contains ",(0,r.jsx)(n.code,{children:'"Hello, world!"'})," string in order to display it in the ",(0,r.jsx)(n.code,{children:"run()"})," method?"]}),"\n",(0,r.jsxs)(n.p,{children:["Here, during the internal work of the DI, the ",(0,r.jsx)(n.strong,{children:"InstanceInjector"})," actually helps the launcher:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceInjectorExample.java tag=REGION_2",children:"private void postInjectInstances(String[] args) {\n  Injector injector = this.createInjector(args);\n  InstanceInjector<Launcher> instanceInjector = injector.getInstanceInjector(Launcher.class);\n  instanceInjector.injectInto(this);\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"createInjector"})," produces ",(0,r.jsx)(n.em,{children:"injector"})," with the given arguments."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"instanceInjector"})," gets all the required data from the ",(0,r.jsx)(n.em,{children:"injector"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"injectInto"})," injects the data into our empty instances."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can find example sources on ",(0,r.jsx)(a.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/InstanceInjectorExample.java"})]}),"\n",(0,r.jsx)(n.h2,{id:"instance-provider",children:"Instance Provider"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(a.Z,{text:"InstanceProvider",url:"/core-inject/src/main/java/io/activej/inject/InstanceProvider.java"})," is a version of ",(0,r.jsx)(n.code,{children:"Injector.getInstance()"})," with a key baked in. It can be freely requested by provider methods."]}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"AbstractModule"}),", we explicitly add an ",(0,r.jsx)(n.strong,{children:"InstanceProvider"})," binding for ",(0,r.jsx)(n.strong,{children:"Integer"})," using the ",(0,r.jsx)(n.code,{children:"bindInstanceProvider"})," helper method and provide an ",(0,r.jsx)(n.strong,{children:"Integer"})," factory function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceProviderExample.java tag=REGION_1",children:"AbstractModule cookbook = new AbstractModule() {\n  @Override\n  protected void configure() {\n    bindInstanceProvider(Integer.class);\n  }\n\n  @Provides\n  Integer giveMe() {\n    return random.nextInt(1000);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After creating an ",(0,r.jsx)(n.strong,{children:"Injector"})," of the ",(0,r.jsx)(n.em,{children:"cookbook"}),", we get instance of the ",(0,r.jsx)(n.strong,{children:"Key<InstanceProvider<Integer>>"}),".\nNow just use the ",(0,r.jsx)(n.code,{children:"provider.get()"})," method to get a lazy ",(0,r.jsx)(n.strong,{children:"Integer"})," instance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceProviderExample.java tag=REGION_2",children:"Injector injector = Injector.of(cookbook);\nInstanceProvider<Integer> provider = injector.getInstance(new Key<>() {});\n// lazy value get.\nInteger someInt = provider.get();\nSystem.out.println(someInt);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Unlike the previous example, if you call the ",(0,r.jsx)(n.code,{children:"provide.get()"})," method several times, you will receive the same value."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find example sources on ",(0,r.jsx)(a.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/InstanceProviderExample.java"})]}),"\n",(0,r.jsx)(n.h2,{id:"binding-generators",children:"Binding Generators"}),"\n",(0,r.jsxs)(n.p,{children:["Let's take a look at the ",(0,r.jsx)(n.a,{href:"/inject/cookbook-example",children:"Cookbook example"}),". This time we have the same POJO ingredients, but now our cookie is a generic ",(0,r.jsx)(n.strong,{children:"Cookie<T>"})," and has an ",(0,r.jsx)(n.strong,{children:"Optional<T> pastry"})," field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_1",children:"static class Cookie<T> {\n  private final Optional<T> pastry;\n\n  @Inject\n  Cookie(Optional<T> pastry) {\n    this.pastry = pastry;\n  }\n\n  public Optional<T> getPastry() {\n    return pastry;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next, we create an ",(0,r.jsx)(n.strong,{children:"AbstractModule"})," ",(0,r.jsx)(n.em,{children:"cookbook"})," and override its ",(0,r.jsx)(n.code,{children:"configure()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_2",children:"AbstractModule cookbook = new AbstractModule() {\n  @Override\n  protected void configure() {\n    // note (1)\n    generate(Optional.class, (bindings, scope, key) -> {\n      Binding<Object> binding = bindings.get(key.getTypeParameter(0));\n      return binding != null ?\n        binding.mapInstance(Optional::of) :\n        Binding.toInstance(Optional.empty());\n    });\n\n    bind(new Key<Cookie<Pastry>>() {});\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"generate()"})," adds a ",(0,r.jsx)(a.Z,{text:"BindingGenerator",url:"/core-inject/src/main/java/io/activej/inject/binding/BindingGenerator.java"}),"\nfor a given class to this module, in this case it is an ",(0,r.jsx)(n.strong,{children:"Optional"}),".\nA ",(0,r.jsx)(n.strong,{children:"BindingGenerator"})," tries to generate the missing dependency binding when the ",(0,r.jsx)(n.strong,{children:"Injector"})," compiles the final binding graph\ntrie.\nYou can replace ",(0,r.jsx)(n.code,{children:"generate()"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Provides\n<T> Optional<T> pastry(@io.activej.di.annotation.Optional T instance) {\n\treturn Optional.ofNullable(instance);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now you can create ",(0,r.jsx)(n.em,{children:"cookbook"})," ",(0,r.jsx)(n.em,{children:"injector"})," and get an instance of ",(0,r.jsx)(n.strong,{children:"Cookie<Pastry>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_3",children:"Injector injector = Injector.of(cookbook);\nSystem.out.println(injector.getInstance(new Key<Cookie<Pastry>>() {}).getPastry().orElseThrow().getButter().getName());\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can find example sources on ",(0,r.jsx)(a.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/BindingGeneratorExample.java"})]}),"\n",(0,r.jsxs)(n.p,{children:["More information on generators can be found ",(0,r.jsx)(n.a,{href:"/inject/binding-generation",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"inspecting-created-dependency-graph",children:"Inspecting created dependency graph"}),"\n",(0,r.jsxs)(n.p,{children:["ActiveJ Inject provides an efficient DSL for inspecting created instances, scopes, and dependency graph visualization.\nIn this Cookie example, we create, as usual, ",(0,r.jsx)(n.strong,{children:"Sugar"}),", ",(0,r.jsx)(n.strong,{children:"Butter"}),", ",(0,r.jsx)(n.strong,{children:"Flour"}),", ",(0,r.jsx)(n.strong,{children:"Pastry"})," and ",(0,r.jsx)(n.strong,{children:"Cookie"})," POJOs, a ",(0,r.jsx)(n.em,{children:"cookbook"}),"\n",(0,r.jsx)(n.strong,{children:"AbstractModule"})," with two scopes (parent scope for ",(0,r.jsx)(n.strong,{children:"Cookie"})," and ",(0,r.jsx)(a.Z,{text:"@OrderScope",url:"/examples/core/inject-2/src/main/java/OrderScope.java"}),"\nfor ingredients) and a cookbook ",(0,r.jsx)(n.em,{children:"injector"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's first look at three ",(0,r.jsx)(n.strong,{children:"Injector"})," methods: ",(0,r.jsx)(n.code,{children:"peekInstance"}),", ",(0,r.jsx)(n.code,{children:"hasInstance"})," and ",(0,r.jsx)(n.code,{children:"getInstance"}),". They allow you to inspect the\ncreated instances:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_1",children:'Cookie cookie1 = injector.peekInstance(Cookie.class);\nSystem.out.println("Instance is present in injector before \'get\' : " + injector.hasInstance(Cookie.class));\nSystem.out.println("Instance before get : " + cookie1);\n\nCookie cookie = injector.getInstance(Cookie.class);\n\nCookie cookie2 = injector.peekInstance(Cookie.class);\nSystem.out.println("Instance is present in injector after \'get\' : " + injector.hasInstance(Cookie.class));\nSystem.out.println("Instance after get : " + cookie2);\nSystem.out.println();    /// created instance check.\nSystem.out.println("Instances are same : " + cookie.equals(cookie2));\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"peekInstance"})," - returns an instance ",(0,r.jsx)(n.strong,{children:"only"})," if it was already created by the ",(0,r.jsx)(n.code,{children:"getInstance"})," method call before"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasInstance"})," - checks if an instance of the provided ",(0,r.jsx)(n.em,{children:"key"})," was created by the ",(0,r.jsx)(n.code,{children:"getInstance"})," method call before"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getInstance"})," - returns an instance of the provided ",(0,r.jsx)(n.em,{children:"key"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Next, we'll explore tools for scopes inspecting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_2",children:'final Scope ORDER_SCOPE = Scope.of(OrderScope.class);\n\nSystem.out.println("Parent injector, before entering scope : " + injector);\n\nInjector subInjector = injector.enterScope(ORDER_SCOPE);\nSystem.out.println("Parent injector, after entering scope : " + subInjector.getParent());\nSystem.out.println("Parent injector is \'injector\' : " + injector.equals(subInjector.getParent()));\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_3",children:'System.out.println("Pastry binding check : " + subInjector.getBinding(Pastry.class));\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getParent"})," - returns parent scope of the current scope"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getBinding"})," - returns dependencies of the provided binding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getBindings"})," - returns dependencies of the provided scope (including ",(0,r.jsx)(n.strong,{children:"Injector"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_4",children:"Utils.printGraphVizGraph(subInjector.getBindingsTrie());\n"})}),"\n",(0,r.jsx)(n.p,{children:"You'll receive the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'digraph {\n\trankdir=BT;\n\t"()->DiDependencyGraphExplore$Flour" [label="DiDependencyGraphExplore$Flour"];\n\t"()->DiDependencyGraphExplore$Sugar" [label="DiDependencyGraphExplore$Sugar"];\n\t"()->DiDependencyGraphExplore$Butter" [label="DiDependencyGraphExplore$Butter"];\n\t"()->DiDependencyGraphExplore$Cookie" [label="DiDependencyGraphExplore$Cookie"];\n\t"()->io.activej.di.core.Injector" [label="Injector"];\n\t"()->DiDependencyGraphExplore$Pastry" [label="DiDependencyGraphExplore$Pastry"];\n\n\t{ rank=same; "()->DiDependencyGraphExplore$Flour" "()->DiDependencyGraphExplore$Sugar" "()->DiDependencyGraphExplore$Butter" "()->io.activej.di.core.Injector" }\n\n\t"()->DiDependencyGraphExplore$Cookie" -> "()->DiDependencyGraphExplore$Pastry";\n\t"()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Butter";\n\t"()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Flour";\n\t"()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Sugar";\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Which can be transformed into the following graph:"}),"\n",(0,r.jsx)(s.Z,{chart:"\ngraph BT\n    DiDependencyGraphExplore$Cookie --\x3e id1(DiDependencyGraphExplore$Pastry)\n    id1 --\x3e DiDependencyGraphExplore$Flour\n    id1 --\x3e DiDependencyGraphExplore$Sugar\n    id1 --\x3e DiDependencyGraphExplore$Butter\n    Injector\n"}),"\n",(0,r.jsxs)(n.p,{children:["You can find example sources on ",(0,r.jsx)(a.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},7618:(e,n,t)=>{t.d(n,{Z:()=>a});t(7294);var r=t(9962),i=t(5893);const a=e=>{let{url:n,text:t,isInline:a=!0,children:s}=e;const{siteConfig:c}=(0,r.Z)(),o=n.startsWith("/examples")?c.customFields.githubExamplesBranch:c.customFields.githubBranch;return(0,i.jsx)("a",{style:a?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+o+n,target:"_blank",children:t||s})}},4304:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(7294),i=t(6365),a=t(5893);i.L.initialize({startOnLoad:!0});const s=e=>{let{chart:n}=e;return(0,r.useEffect)((()=>{i.L.contentLoaded()}),[]),(0,a.jsx)("div",{className:"mermaid",children:n})}}}]);
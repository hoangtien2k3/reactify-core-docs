"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[5224],{5777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>j,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var s=t(5893),i=t(1151),c=t(7618),o=t(3149);const a={sidebar_label:"Scopes"},r="Scopes",d={id:"inject/scopes",title:"Scopes",description:"A Scope in ActiveJ Inject allows you to reuse instances. A scoped instances are independent of instances in other scopes.",source:"@site/docs/inject/scopes.mdx",sourceDirName:"inject",slug:"/inject/scopes",permalink:"/inject/scopes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Scopes"},sidebar:"docs",previous:{title:"Optional dependencies",permalink:"/inject/optional-dependencies"},next:{title:"Transient bindings",permalink:"/inject/transient-bindings"}},p={},l=[{value:"Defining scopes",id:"defining-scopes",level:2},{value:"Entering a scope",id:"entering-a-scope",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"scopes",children:"Scopes"}),"\n",(0,s.jsxs)(n.p,{children:["A Scope in ActiveJ Inject allows you to reuse instances. A scoped instances are independent of instances in other scopes.\nBy default, every instance obtained from the ",(0,s.jsx)(n.code,{children:"Injector"})," is a singleton. This means that it is cached, and a second attempt\nto retrieve an instance of the same type returns a cached instance. But there are situations where we need to recreate\nsome instances as they are bound to some semantic scope (application scope, request scope, process scope)."]}),"\n",(0,s.jsx)(n.p,{children:"For example, we may have a dedicated HTTP scope. Each request will be bound to the HTTP scope and each instance created\nwithin this scope is valid only for the lifetime of the HTTP request (the time between receiving an HTTP request and returning\nan HTTP response)."}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"Injector"}),' can "enter" the scope. This means that a new scoped ',(0,s.jsx)(n.code,{children:"Injector"}),' will be created from the main injector.\nThis "scoped" injector will have a reference to the parent injector, so it will fall back to the parent injector in case\nit cannot obtain some instance from within its own scope.']}),"\n",(0,s.jsx)(n.p,{children:"Scopes can be nested. You can have a scope inside another scope, and so on. When you try to retrieve an instance from a nested\nscope injector, the innermost injector is queried first. If it fails to return an instance, the next upper scope\ninjector will be queried and so on until it succeeds in returning an instance."}),"\n",(0,s.jsx)(n.h2,{id:"defining-scopes",children:"Defining scopes"}),"\n",(0,s.jsxs)(n.p,{children:["A scope is represented by a special scope annotation. A scope annotation is a marker annotation\n(that is, it has no members or data), that is itself annotated with a special marker annotation ",(0,s.jsx)(c.Z,{text:"@ScopeAnnotation",url:"/core-inject/src/main/java/io/activej/inject/ScopeAnnotation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This is how we can have define an annotation for an HTTP scope:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@ScopeAnnotation\n@Target(ElementType.METHOD)\n@Retention(RUNTIME)\npublic @interface HttpScope {\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then we can define a binding within the HTTP scope using the ",(0,s.jsx)(c.Z,{text:"ModuleBuilder",url:"/core-inject/src/main/java/io/activej/inject/module/ModuleBuilder"})," DSL:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"bind(Integer.class).toInstance(123).in(HttpScope.class)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Another way to define a scoped binding is to use scope annotation with ",(0,s.jsx)(n.code,{children:"@Provides"}),"-annotated methods, as shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Provides\n@HttpScope\nInteger integer() {\n    return 123;\n}\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["We have annotated the scope annotation with ",(0,s.jsx)(n.code,{children:"@Retention(RUNTIME)"})," annotation becasue scopes are processed at the runtime."]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@Target(ElementType.METHOD)"})," annotation is present because we use scope annotations on methods."]})]}),"\n",(0,s.jsx)(n.h2,{id:"entering-a-scope",children:"Entering a scope"}),"\n",(0,s.jsxs)(n.p,{children:["To enter a particular scope, we use the ",(0,s.jsx)(n.code,{children:"Injector#enterScope(Scope)"}),' method, which returns a "scoped" injector.']}),"\n",(0,s.jsx)(n.p,{children:"For example, let's enter the HTTP scope defined earlier:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Injector scopedInjector = injector.enterScope(Scope.of(HttpScope.class));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now we can use ",(0,s.jsx)(n.code,{children:"scopedInjector"})," to retrieve instances from within HTTP scope."]}),"\n",(0,s.jsxs)(n.p,{children:["You can find a full example of HTTP scope on ",(0,s.jsx)(o.Z,{href:"https://github.com/hoangtien2k3/reactify-core/{{githubExamplesBranch}}/examples/core/inject/src/main/java/ScopeExample.java",children:"Github"})]})]})}function j(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3149:(e,n,t)=>{t.d(n,{Z:()=>d});t(7294);var s=t(9962),i=t(1106),c=t.n(i),o=t(5835),a=t.n(o),r=t(5893);a().interpolate=/{{([\s\S]+?)}}/g;const d=function(e){let{href:n,children:t,target:i="_blank"}=e;const{siteConfig:o}=(0,s.Z)(),a=c()(n);return(0,r.jsx)("a",{href:a(o.customFields),target:i,children:t})}},7618:(e,n,t)=>{t.d(n,{Z:()=>c});t(7294);var s=t(9962),i=t(5893);const c=e=>{let{url:n,text:t,isInline:c=!0,children:o}=e;const{siteConfig:a}=(0,s.Z)(),r=n.startsWith("/examples")?a.customFields.githubExamplesBranch:a.customFields.githubBranch;return(0,i.jsx)("a",{style:c?{}:{display:"block",marginBottom:"16px"},href:a.customFields.githubUrl+"/"+r+n,target:"_blank",children:t||o})}}}]);
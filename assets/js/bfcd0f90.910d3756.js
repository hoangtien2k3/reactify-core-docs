"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[2935],{9329:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>j,frontMatter:()=>d,metadata:()=>l,toc:()=>c});var t=i(5893),a=i(1151),s=i(7618);const d={sidebar_label:"Duplicate bindings"},o="Resolving duplicate bindings",l={id:"inject/duplicate-bindings",title:"Resolving duplicate bindings",description:"In this tutorial, we will look at resolution of duplicate bindings using .",source:"@site/docs/inject/duplicate-bindings.mdx",sourceDirName:"inject",slug:"/inject/duplicate-bindings",permalink:"/inject/duplicate-bindings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Duplicate bindings"},sidebar:"docs",previous:{title:"Class scanning",permalink:"/inject/class-scanning"},next:{title:"Generating bindings",permalink:"/inject/binding-generation"}},r={},c=[{value:"Defining a multibinder",id:"defining-a-multibinder",level:2},{value:"Resolution of <code>Set&lt;T&gt;</code> bindings",id:"resolution-of-sett-bindings",level:2},{value:"Resolution of <code>Map&lt;K, V&gt;</code> bindings",id:"resolution-of-mapk-v-bindings",level:2},{value:"<code>@ProvidesIntoSet</code> annotation",id:"providesintoset-annotation",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"resolving-duplicate-bindings",children:"Resolving duplicate bindings"}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial, we will look at resolution of duplicate bindings using ",(0,t.jsx)(s.Z,{text:"Multibinders",url:"/core-inject/src/main/java/io/activej/inject/binding/Multibinder.java"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"defining-a-multibinder",children:"Defining a multibinder"}),"\n",(0,t.jsx)(n.p,{children:"We can define multibinders to be exported from a module."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=MULTIBINDER",children:"Module multibinderModule = ModuleBuilder.create()\n  .multibind(Key.of(Integer.class), Multibinders.ofBinaryOperator(Integer::sum))\n  .build();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here we have defined a multibinder for ",(0,t.jsx)(n.code,{children:"Integer"}),"s that simply adds up all duplicate ",(0,t.jsx)(n.code,{children:"Integer"}),"s together."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a module with several duplicate bindings for ",(0,t.jsx)(n.code,{children:"Integer"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=INTEGERS",children:"Module integersModule = ModuleBuilder.create()\n  .bind(Integer.class).toInstance(1)\n  .bind(Integer.class).toInstance(10)\n  .bind(Integer.class).toInstance(100)\n  .build();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now let's create an ",(0,t.jsx)(n.code,{children:"Injector"})," from these two modules and obtain an ",(0,t.jsx)(n.code,{children:"Integer"})," instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=INJECTOR",children:"Injector injector = Injector.of(multibinderModule, integersModule);\nSystem.out.println(injector.getInstance(Integer.class));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The result is ",(0,t.jsx)(n.code,{children:"111"})," as the sum of ",(0,t.jsx)(n.code,{children:"1"}),", ",(0,t.jsx)(n.code,{children:"10"})," and ",(0,t.jsx)(n.code,{children:"100"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If we tried to create an ",(0,t.jsx)(n.code,{children:"Injector"})," using only the ",(0,t.jsx)(n.code,{children:"integersModule"})," without specifying a multibinder, we would get a\n",(0,t.jsx)(n.code,{children:"Duplicate bindings"})," error."]})}),"\n",(0,t.jsxs)(n.p,{children:["You can find example sources on ",(0,t.jsx)(s.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/MultibinderExample.java"})]}),"\n",(0,t.jsxs)(n.h2,{id:"resolution-of-sett-bindings",children:["Resolution of ",(0,t.jsx)(n.code,{children:"Set<T>"})," bindings"]}),"\n",(0,t.jsxs)(n.p,{children:["When you have multiple duplicate bindings for ",(0,t.jsx)(n.code,{children:"Set<T>"})," you can automatically resolve them into a ",(0,t.jsx)(n.code,{children:"Set<T>"})," binding, which is a union of duplicate sets."]}),"\n",(0,t.jsxs)(n.p,{children:["To do this you need to use the ",(0,t.jsx)(n.code,{children:"multibindToSet(...)"})," method of ",(0,t.jsx)(n.code,{children:"ModuleBuilder"})," DSL."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's create 2 modules that define bindings for ",(0,t.jsx)(n.code,{children:"Set<Integer>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToSetExample.java tag=MODULES",children:"Key<Set<Integer>> setKey = new Key<>() {};\n\nModule module1 = ModuleBuilder.create()\n  .bind(setKey).toInstance(Set.of(1, 2, 3))\n  .build();\nModule module2 = ModuleBuilder.create()\n  .bind(setKey).toInstance(Set.of(3, 4, 5))\n  .build();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"module1"})," defines a binding for the ",(0,t.jsx)(n.code,{children:"Set<Integer>"})," which contains elements ",(0,t.jsx)(n.code,{children:"[1, 2, 3]"}),". ",(0,t.jsx)(n.code,{children:"module2"})," defines a binding\nfor the ",(0,t.jsx)(n.code,{children:"Set<Integer>"})," which contains elements ",(0,t.jsx)(n.code,{children:"[3, 4, 5]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Now let's create a module with a multibinder using ",(0,t.jsx)(n.code,{children:"ModuleBuilder#multibindToSet"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToSetExample.java tag=MULTIBINDER",children:"Module multibinderModule = ModuleBuilder.create()\n  .multibindToSet(Integer.class)\n  .build();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, let's create an ",(0,t.jsx)(n.code,{children:"Injector"})," from modules and obtain an instance of a ",(0,t.jsx)(n.code,{children:"Set<Integer>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToSetExample.java tag=INJECTOR",children:"Injector injector = Injector.of(module1, module2, multibinderModule);\nSystem.out.println(injector.getInstance(setKey));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Obtained ",(0,t.jsx)(n.code,{children:"Set<Integer>"})," contains a union of both sets: ",(0,t.jsx)(n.code,{children:"[1, 2, 3, 4, 5]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can find example sources on ",(0,t.jsx)(s.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/MultibindToSetExample.java"})]}),"\n",(0,t.jsxs)(n.h2,{id:"resolution-of-mapk-v-bindings",children:["Resolution of ",(0,t.jsx)(n.code,{children:"Map<K, V>"})," bindings"]}),"\n",(0,t.jsxs)(n.p,{children:["When you have multiple duplicate bindings for ",(0,t.jsx)(n.code,{children:"Map<K, V>"}),", you can automatically resolve them to a ",(0,t.jsx)(n.code,{children:"Map<K, V>"})," binding that\ncontains a union of the keys and values of all other maps. This is similar to resolving ",(0,t.jsx)(n.code,{children:"Set<T>"})," with the exception that\nconflicting maps cannot contain the same keys."]}),"\n",(0,t.jsxs)(n.p,{children:["To enable ",(0,t.jsx)(n.code,{children:"Map<K, V>"})," binding resolution, you must use the ",(0,t.jsx)(n.code,{children:"multibindToMap(...)"})," method of ",(0,t.jsx)(n.code,{children:"ModuleBuilder"})," DSL."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's create 2 modules defininig bindings for ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToMapExample.java tag=MODULES",children:'Key<Map<Integer, String>> mapKey = new Key<>() {};\n\nModule module1 = ModuleBuilder.create()\n  .bind(mapKey).to(() -> {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(1, "one");\n    map.put(2, "two");\n    map.put(3, "three");\n    return map;\n  })\n  .build();\n\nModule module2 = ModuleBuilder.create()\n  .bind(mapKey).to(() -> {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(4, "four");\n    map.put(5, "five");\n    map.put(6, "six");\n    return map;\n  })\n  .build();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"module1"})," defines a binding for a ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"})," that contains entries ",(0,t.jsx)(n.code,{children:'[1="one", 2="two", 3="three"]'}),". While ",(0,t.jsx)(n.code,{children:"module2"})," defines a binding\nfor a ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"})," that contains entries ",(0,t.jsx)(n.code,{children:'[4="four", 5="five", 6="six"]'}),". Notice, that maps do not contain same keys."]}),"\n",(0,t.jsxs)(n.p,{children:["Now let's create a module with a multibinder using ",(0,t.jsx)(n.code,{children:"ModuleBuilder#multibindToMap"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToMapExample.java tag=MULTIBINDER",children:"Module multibinderModule = ModuleBuilder.create()\n  .multibindToMap(Integer.class, String.class)\n  .build();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, let's create an ",(0,t.jsx)(n.code,{children:"Injector"})," from modules and obtain an instance of a ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibindToMapExample.java tag=INJECTOR",children:"Injector injector = Injector.of(module1, module2, multibinderModule);\nSystem.out.println(injector.getInstance(mapKey));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Obtained ",(0,t.jsx)(n.code,{children:"Map<Integer, String>"})," is a merged map that contains all entries of conflicting maps:\n",(0,t.jsx)(n.code,{children:'[1="one", 2="two", 3="three", 4="four", 5="five", 6="six"]'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can find example sources on ",(0,t.jsx)(s.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/MultibindToMapExample.java"})]}),"\n",(0,t.jsxs)(n.h2,{id:"providesintoset-annotation",children:[(0,t.jsx)(n.code,{children:"@ProvidesIntoSet"})," annotation"]}),"\n",(0,t.jsxs)(n.p,{children:["ActiveJ Inject supports a special ",(0,t.jsx)(n.code,{children:"@ProvidesIntoSet"})," annotation which can be used instead of ",(0,t.jsx)(n.code,{children:"@Provides"})," annotation.\nThis annotation on a method with the return type ",(0,t.jsx)(n.code,{children:"T"})," creates a ",(0,t.jsx)(n.code,{children:"Set<T>"})," binding and transforms the provided ",(0,t.jsx)(n.code,{children:"T"})," instance\ninto a ",(0,t.jsx)(n.code,{children:"Set<T>"})," containing a single ",(0,t.jsx)(n.code,{children:"[T]"})," element."]}),"\n",(0,t.jsxs)(n.p,{children:["With",(0,t.jsx)(n.code,{children:"@ProvidesIntoSet"})," annotation, all duplicate ",(0,t.jsx)(n.code,{children:"Set<T>"})," bindings are resolved into a set, which is the union\nof all other provided sets of type ",(0,t.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's define three modules that provide ",(0,t.jsx)(n.code,{children:"Integer"}),"s using methods marked with @ProvidesIntoSet` annotation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ProvidesIntoSetExample.java tag=MODULE_1",children:"public static final class MyModule1 extends AbstractModule {\n  @ProvidesIntoSet\n  Integer integer() {\n    return 1;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ProvidesIntoSetExample.java tag=MODULE_2",children:"public static final class MyModule2 extends AbstractModule {\n  @ProvidesIntoSet\n  Integer integer() {\n    return 2;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ProvidesIntoSetExample.java tag=MODULE_3",children:"public static final class MyModule3 extends AbstractModule {\n  @ProvidesIntoSet\n  Integer integer() {\n    return 3;\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, let's create an ",(0,t.jsx)(n.code,{children:"Injector"})," from those three modules and obtain an instance of ",(0,t.jsx)(n.code,{children:"Set<Integer>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ProvidesIntoSetExample.java tag=INJECTOR",children:"Module module1 = new MyModule1();\nModule module2 = new MyModule2();\nModule module3 = new MyModule3();\nInjector injector = Injector.of(module1, module2, module3);\nSystem.out.println(injector.getInstance(new Key<Set<Integer>>() {}));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When we requested an instance of ",(0,t.jsx)(n.code,{children:"Set<Integer>"})," from the ",(0,t.jsx)(n.code,{children:"Injector"}),", we received a set containing elements ",(0,t.jsx)(n.code,{children:"[1, 2, 3]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can find example sources on ",(0,t.jsx)(s.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/ProvidesIntoSetExample.java"})]})]})}function j(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},7618:(e,n,i)=>{i.d(n,{Z:()=>s});i(7294);var t=i(9962),a=i(5893);const s=e=>{let{url:n,text:i,isInline:s=!0,children:d}=e;const{siteConfig:o}=(0,t.Z)(),l=n.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,a.jsx)("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+l+n,target:"_blank",children:i||d})}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>d});var t=i(7294);const a={},s=t.createContext(a);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
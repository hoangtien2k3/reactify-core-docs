"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6792],{2537:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=s(5893),r=s(1151),t=s(7618),i=s(7815);const l={title:"ActiveJ | CSP, efficient I/O communication between channels",description:"Efficient Java CSP (Communicating Sequential Process) implementation for I/O communication",sidebar_label:"CSP",keywords:["java","csp","communication sequential process","java csp","go language","go"]},o="CSP",c={id:"async-io/csp",title:"ActiveJ | CSP, efficient I/O communication between channels",description:"Efficient Java CSP (Communicating Sequential Process) implementation for I/O communication",source:"@site/docs/async-io/csp.mdx",sourceDirName:"async-io",slug:"/async-io/csp",permalink:"/async-io/csp",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | CSP, efficient I/O communication between channels",description:"Efficient Java CSP (Communicating Sequential Process) implementation for I/O communication",sidebar_label:"CSP",keywords:["java","csp","communication sequential process","java csp","go language","go"]},sidebar:"docs",previous:{title:"Promise",permalink:"/async-io/promise"},next:{title:"Datastream",permalink:"/async-io/datastream"}},h={},d=[{value:"Overview",id:"overview",level:2},{value:"Features:",id:"features",level:2},{value:"Channel Supplier and Channel Consumer",id:"channel-supplier-and-channel-consumer",level:2},{value:"Channel Queue",id:"channel-queue",level:2},{value:"Comparison to Datastream",id:"comparison-to-datastream",level:2},{value:"Benchmark",id:"benchmark",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Channel Example",id:"basic-channel-example",level:3},{value:"CSP Example",id:"csp-example",level:3},{value:"Channel Buffer Example",id:"channel-buffer-example",level:3},{value:"ChannelSplitter Example",id:"channelsplitter-example",level:3},{value:"ByteBufs Decoder Example",id:"bytebufs-decoder-example",level:3},{value:"Channel File Example",id:"channel-file-example",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"csp",children:"CSP"}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"CSP (stands for Communicating Sequential Process) provides serial I/O communication between reactive data suppliers and consumers.\nIt is used for asynchronous data streaming. CSP was inspired by the Go language channels."}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"High performance and throughput"}),"\n",(0,a.jsxs)(n.li,{children:["Optimized to work with objects of medium size (like ",(0,a.jsx)(n.a,{href:"/misc/bytebuf",children:(0,a.jsx)(n.code,{children:"ByteBufs"})}),")"]}),"\n",(0,a.jsx)(n.li,{children:"CSP has reach DSL, which provides a simple programming model"}),"\n",(0,a.jsx)(n.li,{children:"Has asynchronous back pressure control"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"channel-supplier-and-channel-consumer",children:"Channel Supplier and Channel Consumer"}),"\n",(0,a.jsxs)(n.p,{children:["The CSP communication is conducted via ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/supplier/ChannelSupplier.java",children:(0,a.jsx)(n.code,{children:"ChannelSupplier"})})," and ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/consumer/ChannelConsumer.java",children:(0,a.jsx)(n.code,{children:"ChannelConsumer"})}),", which provide and receive some data, respectively. Each subsequent request to these channels must only be invoked after the previous request is complete. The CSP uses ",(0,a.jsx)(n.a,{href:"/async-io/promise",children:(0,a.jsx)(n.code,{children:"promises"})})," to manage this."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ChannelSupplier"})," has a ",(0,a.jsx)(n.code,{children:"get()"})," method that returns a ",(0,a.jsx)(n.a,{href:"/async-io/promise",children:(0,a.jsx)(n.code,{children:"Promise"})})," of the provided value. Until this ",(0,a.jsx)(n.code,{children:"Promise"})," completes with either a result or an exception, the ",(0,a.jsx)(n.code,{children:"get()"})," method should not be called again. Also note that if ",(0,a.jsx)(n.code,{children:"get()"})," returns a ",(0,a.jsx)(n.code,{children:"Promise"})," of ",(0,a.jsx)(n.code,{children:"null"}),", this indicates the end of the stream and no additional data should be requested from that supplier."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ChannelConsumer"})," has an ",(0,a.jsx)(n.code,{children:"accept(@Nullable T value)"})," method that returns a ",(0,a.jsx)(n.code,{children:"Promise"})," of ",(0,a.jsx)(n.code,{children:"null"})," as a marker of completion of the accepting. Until this ",(0,a.jsx)(n.code,{children:"Promise"})," completes, the ",(0,a.jsx)(n.code,{children:"accept()"})," method should not be called again. Similar to ",(0,a.jsx)(n.code,{children:"ChannelSupplier"}),", if a ",(0,a.jsx)(n.code,{children:"null"})," value is accepted, it indicates the end of the stream."]}),"\n",(0,a.jsxs)(n.p,{children:["Here is an example of communication between ",(0,a.jsx)(n.code,{children:"ChannelSupplier"})," and ",(0,a.jsx)(n.code,{children:"ChannelConsumer"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/CspExample.java tag=REGION_1",children:"protected void doProcess() {\n  input.get()\n    .whenResult(data -> {\n      if (data == null) {\n        output.acceptEndOfStream()\n          .whenResult(this::completeProcess);\n      } else {\n        data = data.toUpperCase() + '(' + data.length() + ')';\n\n        output.accept(data)\n          .whenResult(this::doProcess);\n      }\n    })\n    .whenException(Throwable::printStackTrace);\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"channel-queue",children:"Channel Queue"}),"\n",(0,a.jsxs)(n.p,{children:["Another important CSP concept is the ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/queue/ChannelQueue.java",children:(0,a.jsx)(n.code,{children:"ChannelQueue"})})," interface and its implementations: ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/queue/ChannelBuffer.java",children:(0,a.jsx)(n.code,{children:"ChannelBuffer"})})," and ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/queue/ChannelZeroBuffer.java",children:(0,a.jsx)(n.code,{children:"ChannelZeroBuffer"})}),". They provide a link between ",(0,a.jsx)(n.em,{children:"Consumers"})," and ",(0,a.jsx)(n.em,{children:"Suppliers"})," and allow them to create chains of these pipes if needed."]}),"\n",(0,a.jsxs)(n.p,{children:["Basically, these buffers transfer objects from ",(0,a.jsx)(n.code,{children:"ChannelConsumer"})," to ",(0,a.jsx)(n.code,{children:"ChannelSupplier"})," as soon as there is free space in the queue. This process is controlled by ",(0,a.jsx)(n.code,{children:"Promise"}),"s. You can manually set the size of the ",(0,a.jsx)(n.code,{children:"ChannelBuffer"}),". The ",(0,a.jsx)(n.code,{children:"ChannelZeroBuffer"})," does not store any values, but simply transfers them one at a time from the ",(0,a.jsx)(n.code,{children:"ChannelConsumer"})," to the ",(0,a.jsx)(n.code,{children:"ChannelSupplier"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Here is a simple example of working with buffers:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public void accept(T item) {\n\tbuffer.add(item);\n\tif (buffer.isSaturated()) {\n\t\tgetSupplier().suspend();\n\t}\n}\n\nvoid produce() {\n\twhile (!buffer.isEmpty()) {\n\t\tT item = buffer.poll();\n\t\tif (item != null) {\n\t\t\tsend(item);\n\t\t} else {\n\t\t\tsendEndOfStream();\n\t\t}\n\t}\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"comparison-to-datastream",children:"Comparison to Datastream"}),"\n",(0,a.jsxs)(n.p,{children:["The CSP has a lot in common with the ",(0,a.jsx)(n.a,{href:"/async-io/datastream",children:"Datastream"})," module.\nAlthough they were both designed for I/O processing, there are a few important differences:"]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{}),(0,a.jsx)(n.th,{children:"Datastream"}),(0,a.jsx)(n.th,{children:"CSP"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Overhead:"})}),(0,a.jsx)(n.td,{children:"Low: stream can be started with 1 virtual call, short-circuit evaluation optimizes performance"}),(0,a.jsx)(n.td,{children:"No short-circuit evaluation, overhead is higher"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Throughput speed:"})}),(0,a.jsxs)(n.td,{children:["Very fast (",(0,a.jsx)(n.em,{children:"360 880 548 ops/sec"}),")"]}),(0,a.jsxs)(n.td,{children:["Fast (",(0,a.jsx)(n.em,{children:"105 932 203 ops/sec"}),"), but slower than Datastream"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Programming model:"})}),(0,a.jsx)(n.td,{children:"More complicated"}),(0,a.jsx)(n.td,{children:"Simple and convenient"})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["ActiveJ makes extensive use of combinations of CSP and Datastream for maximum efficiency. To do this,\n",(0,a.jsx)(n.code,{children:"ChannelSupplier"}),", ",(0,a.jsx)(n.code,{children:"ChannelConsumer"}),", ",(0,a.jsx)(t.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/supplier/StreamSupplier.java",children:(0,a.jsx)(n.code,{children:"StreamSupplier"})}),"\nand ",(0,a.jsx)(t.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/consumer/StreamConsumer.java",children:(0,a.jsx)(n.code,{children:"StreamConsumer"})})," have ",(0,a.jsx)(n.code,{children:"transformWith()"})," methods and special\nTransformer interfaces. Using these methods and interfaces, you can easily transform channels into other channels or datastreams and vice versa, creating chains of such transformations."]}),"\n",(0,a.jsx)(n.h2,{id:"benchmark",children:"Benchmark"}),"\n",(0,a.jsxs)(n.p,{children:["We've measured the performance of the CSP (",(0,a.jsx)(n.code,{children:"ChannelSupplier"})," transfers 50M ",(0,a.jsx)(n.code,{children:"Integer"})," objects to ",(0,a.jsx)(n.code,{children:"ChannelConsumer"})," scenario) and got the following result:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Time: 4720ms; Average time: 472.0ms; Best time: 469ms; Worst time: 475ms; Operations per second: 105 932 203\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We also measured the performance of the TCP server that uses both CSP and Datastream and got an average result of ",(0,a.jsx)(n.strong,{children:"47 495 905 requests per second"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#basic-channel-example",children:"Basic Channel Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#csp-example",children:"CSP Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#channel-buffer-example",children:"Channel Buffer Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#channelsplitter-example",children:"ChannelSplitter Example"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#bytebufs-decoder-example",children:"ByteBufsDecoderExample"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#channel-file-example",children:"Channel File Example"})}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"To run the examples, you need to clone ActiveJ from GitHub:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,a.jsxs)(n.p,{children:["And import it as a Maven project. Check out tag ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(i.Z,{name:"currentVersion"})}),". Before running the examples, build the project. These examples are located at ",(0,a.jsx)(n.code,{children:"activej/examples/core/csp"}),"."]})]}),"\n",(0,a.jsx)(n.h3,{id:"basic-channel-example",children:"Basic Channel Example"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Channel Example"})," shows the interaction between suppliers and consumers using ",(0,a.jsx)(n.em,{children:"streamTo"})," and some helper methods:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/ChannelExample.java tag=REGION_1",children:'private static void supplierOfValues() {\n  ChannelSuppliers.ofValues("1", "2", "3", "4", "5")\n    .streamTo(ChannelConsumers.ofConsumer(System.out::println));\n}\n\nprivate static void supplierOfList(List<String> list) {\n  ChannelSuppliers.ofList(list)\n    .streamTo(ChannelConsumers.ofConsumer(System.out::println));\n}\n\nprivate static void map() {\n  ChannelSuppliers.ofValues(1, 2, 3, 4, 5)\n    .map(integer -> integer + " times 10 = " + integer * 10)\n    .streamTo(ChannelConsumers.ofConsumer(System.out::println));\n}\n\nprivate static void toCollector() {\n  ChannelSuppliers.ofValues(1, 2, 3, 4, 5)\n    .toCollector(Collectors.toList())\n    .whenResult(x -> System.out.println(x));\n}\n\nprivate static void filter() {\n  ChannelSuppliers.ofValues(1, 2, 3, 4, 5, 6)\n    .filter(integer -> integer % 2 == 0)\n    .streamTo(ChannelConsumers.ofConsumer(System.out::println));\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"So if you run this example, you will get the following result:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"1\n2\n3\n4\n5\nOne\nTwo\nThree\n1 times 10 = 10\n2 times 10 = 20\n3 times 10 = 30\n4 times 10 = 40\n5 times 10 = 50\n[1, 2, 3, 4, 5]\n2\n4\n6\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(t.Z,{url:"/examples/core/csp/src/main/java/ChannelExample.java",children:"See full example on GitHub"})})}),"\n",(0,a.jsx)(n.h3,{id:"csp-example",children:"CSP Example"}),"\n",(0,a.jsxs)(n.p,{children:["This example represents the ",(0,a.jsx)(t.Z,{url:"/core-promise/src/main/java/io/activej/async/process/ReactiveProcess.java",children:(0,a.jsx)(n.code,{children:"ReactiveProcess"})}),"\nbetween ",(0,a.jsx)(n.code,{children:"ChannelSupplier"})," and ",(0,a.jsx)(n.code,{children:"ChannelConsumer"}),". In this example ",(0,a.jsx)(n.code,{children:"ChannelSupplier"})," represents input and ",(0,a.jsx)(n.code,{children:"ChannelConsumer"})," represents output:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/CspExample.java tag=EXAMPLE",children:'public final class CspExample extends AbstractCommunicatingProcess implements WithChannelTransformer<CspExample, String, String> {\n  private ChannelSupplier<String> input;\n  private ChannelConsumer<String> output;\n\n  @Override\n  public ChannelOutput<String> getOutput() {\n    return output -> {\n      this.output = output;\n      if (this.input != null && this.output != null) startProcess();\n    };\n  }\n\n  @Override\n  public ChannelInput<String> getInput() {\n    return input -> {\n      this.input = input;\n      if (this.input != null && this.output != null) startProcess();\n      return getProcessCompletion();\n    };\n  }\n\n  @Override\n  //[START REGION_1]\n  protected void doProcess() {\n    input.get()\n      .whenResult(data -> {\n        if (data == null) {\n          output.acceptEndOfStream()\n            .whenResult(this::completeProcess);\n        } else {\n          data = data.toUpperCase() + \'(\' + data.length() + \')\';\n\n          output.accept(data)\n            .whenResult(this::doProcess);\n        }\n      })\n      .whenException(Throwable::printStackTrace);\n  }\n  //[END REGION_1]\n\n  @Override\n  protected void doClose(Exception e) {\n    System.out.println("Process has been closed with exception: " + e);\n    input.closeEx(e);\n    output.closeEx(e);\n  }\n\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n\n    CspExample process = new CspExample();\n    ChannelSuppliers.ofValues("hello", "world", "nice", "to", "see", "you")\n      .transformWith(process)\n      .streamTo(ChannelConsumers.ofConsumer(System.out::println));\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This process takes a string, converts it to uppercase, and adds the length of the string in parentheses:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"HELLO(5)\nWORLD(5)\nNICE(4)\nTO(2)\nSEE(3)\nYOU(3)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(t.Z,{url:"/examples/core/csp/src/main/java/CspExample.java",children:"See this example on GitHub"})})}),"\n",(0,a.jsx)(n.h3,{id:"channel-buffer-example",children:"Channel Buffer Example"}),"\n",(0,a.jsxs)(n.p,{children:["As mentioned ",(0,a.jsx)(n.a,{href:"#channel-queue",children:"above"}),", there are two main implementations of ",(0,a.jsx)(n.code,{children:"ChannelQueue"}),": ",(0,a.jsx)(n.code,{children:"ChannelBuffer"})," and ",(0,a.jsx)(n.code,{children:"ChannelZeroBuffer"}),",\nboth of which control communication between Consumers and Suppliers.\nYou can manually set the size of the ",(0,a.jsx)(n.code,{children:"ChannelBuffer"}),", while the size of the ",(0,a.jsx)(n.code,{children:"ChannelZeroBuffer"})," is always 0."]}),"\n",(0,a.jsxs)(n.p,{children:["To understand how all these Buffers work, let's look at a simple example. Suppose there is a ",(0,a.jsx)(n.strong,{children:"Granny"})," who wants to give her ",(0,a.jsx)(n.strong,{children:"Grandson"})," 25 ",(0,a.jsx)(n.strong,{children:"Apple"}),"s. That is quite a lot, so first she puts the ",(0,a.jsx)(n.strong,{children:"Apple"}),"s on a large ",(0,a.jsx)(n.strong,{children:"Plate"})," on which she can put up to 10 apples at a time. When the ",(0,a.jsx)(n.strong,{children:"Plate"})," is full, the ",(0,a.jsx)(n.strong,{children:"Grandson"})," has to take at least one apple first, and only then can the ",(0,a.jsx)(n.strong,{children:"Granny"})," put another ",(0,a.jsx)(n.strong,{children:"Apple"})," on the ",(0,a.jsx)(n.strong,{children:"Plate"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/ChannelBufferExample.java tag=REGION_1",children:'static final class ChannelBufferStream {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n\n    ChannelBuffer<Integer> plate = new ChannelBuffer<>(5, 10);\n    ChannelSupplier<Integer> granny = plate.getSupplier();\n    Promises.loop(0,\n      apple -> apple < 25,\n      apple -> plate.put(apple).map($ -> {\n        System.out.println("Granny gives apple   #" + apple);\n        return apple + 1;\n      }));\n    granny.streamTo(ChannelConsumers.ofConsumer(apple -> System.out.println("Grandson takes apple #" + apple)));\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The next day ",(0,a.jsx)(n.strong,{children:"Granny"})," wants to give her ",(0,a.jsx)(n.strong,{children:"Grandson"})," ",(0,a.jsx)(n.strong,{children:"Apple"}),"s again, but this time there are only 10 ",(0,a.jsx)(n.strong,{children:"Apples"}),". Therefore, no plate is needed: ",(0,a.jsx)(n.strong,{children:"Granny"})," can simply pass the ",(0,a.jsx)(n.strong,{children:"Apples"})," to her ",(0,a.jsx)(n.strong,{children:"Grandson"})," one at a time:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/ChannelBufferExample.java tag=REGION_2",children:'static final class ChannelBufferZeroExample {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n\n    ChannelQueue<Integer> buffer = new ChannelZeroBuffer<>();\n    ChannelSupplier<Integer> granny = buffer.getSupplier();\n\n    Promises.loop(0,\n      apple -> apple < 10,\n      apple -> buffer.put(apple).map($ -> {\n        System.out.println("Granny gives apple   #" + apple);\n        return apple + 1;\n      }));\n\n    granny.streamTo(ChannelConsumers.<Integer>ofConsumer(apple ->\n      System.out.println("Grandson takes apple #" + apple)).async());\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(t.Z,{url:"/examples/core/csp/src/main/java/ChannelBufferExample.java",children:"See this example on GitHub"})})}),"\n",(0,a.jsx)(n.h3,{id:"channelsplitter-example",children:"ChannelSplitter Example"}),"\n",(0,a.jsxs)(n.p,{children:["In this example we use a predefined ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/process/ChannelSplitter.java",children:(0,a.jsx)(n.code,{children:"ChannelSplitter"})}),".\nThe splitter allows you to split data from one input to multiple outputs. In our case the output will be split into three ",(0,a.jsx)(n.code,{children:"ChannelConsumers"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/SplitterExample.java tag=EXAMPLE",children:'public class SplitterExample {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n    List<Integer> integers = Stream.iterate(1, i -> i + 1)\n      .limit(5)\n      .collect(Collectors.toList());\n\n    ChannelSplitter<Integer> splitter = ChannelSplitter.create(ChannelSuppliers.ofList(integers));\n\n    List<Integer> list1 = new ArrayList<>();\n    List<Integer> list2 = new ArrayList<>();\n    List<Integer> list3 = new ArrayList<>();\n\n    splitter.addOutput().set(ChannelConsumers.ofAsyncConsumer(AsyncConsumer.of(list1::add)));\n    splitter.addOutput().set(ChannelConsumers.ofAsyncConsumer(AsyncConsumer.of(list2::add)));\n    splitter.addOutput().set(ChannelConsumers.ofAsyncConsumer(AsyncConsumer.of(list3::add)));\n\n    eventloop.run();\n\n    System.out.println("First list: " + list1);\n    System.out.println("Second list: " + list2);\n    System.out.println("Third list: " + list3);\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(t.Z,{url:"/examples/core/csp/src/main/java/SplitterExample.java",children:"See this example on GitHub"})})}),"\n",(0,a.jsx)(n.h3,{id:"bytebufs-decoder-example",children:"ByteBufs Decoder Example"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#",children:(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/binary/ByteBufsDecoder.java",children:(0,a.jsx)(n.code,{children:"ByteBufsDecoder"})})})," allows you to efficiently handle ",(0,a.jsx)(n.a,{href:"/misc/bytebuf",children:(0,a.jsx)(n.code,{children:"ByteBufs"})})," and decode the data stored in them for further processing. In this example ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/binary/BinaryChannelSupplier.java",children:(0,a.jsx)(n.code,{children:"BinaryChannelSupplier"})})," will supply a String decoded and parsed from a ByteBuf."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/ByteBufsDecoderExample.java tag=EXAMPLE",children:'public final class ByteBufsDecoderExample {\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop\n      .builder()\n      .withCurrentThread()\n      .build();\n\n    List<ByteBuf> letters = List.of(wrapAscii("H"), wrapAscii("e"), wrapAscii("l"), wrapAscii("l"), wrapAscii("o"));\n    ByteBufsDecoder<String> decoder = bufs -> {\n      if (!bufs.hasRemainingBytes(5)) {\n        System.out.println("Not enough bytes to decode message");\n        return null;\n      }\n      return bufs.takeExactSize(5).asString(UTF_8);\n    };\n\n    BinaryChannelSupplier.of(ChannelSuppliers.ofList(letters)).decode(decoder)\n      .whenResult(x -> System.out.println(x));\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"channel-file-example",children:"Channel File Example"}),"\n",(0,a.jsxs)(n.p,{children:["This example demonstrates how to work with files asynchronously using Promises and built-in CSP consumers and suppliers. This example writes two lines to a file using ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/file/ChannelFileWriter.java",children:(0,a.jsx)(n.code,{children:"ChannelFileWriter"})}),", then reads and prints them using ",(0,a.jsx)(t.Z,{url:"/core-csp/src/main/java/io/activej/csp/file/ChannelFileReader.java",children:(0,a.jsx)(n.code,{children:"ChannelFileReader"})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/csp/src/main/java/ChannelFileExample.java tag=REGION_1",children:'private static Promise<Void> writeToFile() {\n  return ChannelSuppliers.ofValues(\n      ByteBufStrings.wrapAscii("Hello, this is example file\\n"),\n      ByteBufStrings.wrapAscii("This is the second line of file\\n"))\n    .streamTo(ChannelFileWriter.open(executor, PATH, WRITE));\n}\n\nprivate static Promise<Void> readFile() {\n  return ChannelFileReader.open(executor, PATH)\n    .then(cfr -> cfr.streamTo(ChannelConsumers.ofConsumer(buf -> System.out.print(buf.asString(UTF_8)))));\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"If you run the example, you will see the contents of the created file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Hello, this is example file\nThis is the second line of file\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(t.Z,{url:"/examples/core/csp/src/main/java/ChannelFileExample.java",children:"See full example on GitHub"})})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},7618:(e,n,s)=>{s.d(n,{Z:()=>t});s(7294);var a=s(9962),r=s(5893);const t=e=>{let{url:n,text:s,isInline:t=!0,children:i}=e;const{siteConfig:l}=(0,a.Z)(),o=n.startsWith("/examples")?l.customFields.githubExamplesBranch:l.customFields.githubBranch;return(0,r.jsx)("a",{style:t?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+o+n,target:"_blank",children:s||i})}},7815:(e,n,s)=>{s.d(n,{Z:()=>r});s(7294);var a=s(9962);const r=e=>{let{name:n}=e;const{siteConfig:s}=(0,a.Z)();if(!n)throw new Error("Variable name is required");if(void 0===s.customFields[n])throw new Error(`Variable ${n} not exist`);return s.customFields[n]}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>i});var a=s(7294);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);
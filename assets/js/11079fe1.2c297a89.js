"use strict";(self.webpackChunkReactifydocs=self.webpackChunkReactifydocs||[]).push([[9918],{6594:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(5893),t=n(1151),r=n(7618);const l={title:"Reactify-Core | Building a GraalVM native image of an Reactify-Core HTTP Server",sidebar_label:"Reactify-Core + GraalVM native image",keywords:["java","java for beginners","java framework","guide","tutorial","web application","async","graal","grallvm","native image"],description:"Step-by-step guide of creating an Reactify-Core HTTP server written in Java and building it as a GraalVM native image."},o="Building a GraalVM native image of an Reactify-Core HTTP Server",s={id:"tutorials/native-image",title:"Reactify-Core | Building a GraalVM native image of an Reactify-Core HTTP Server",description:"Step-by-step guide of creating an Reactify-Core HTTP server written in Java and building it as a GraalVM native image.",source:"@site/docs/tutorials/native-image.mdx",sourceDirName:"tutorials",slug:"/tutorials/native-image",permalink:"/tutorials/native-image",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Reactify-Core | Building a GraalVM native image of an Reactify-Core HTTP Server",sidebar_label:"Reactify-Core + GraalVM native image",keywords:["java","java for beginners","java framework","guide","tutorial","web application","async","graal","grallvm","native image"],description:"Step-by-step guide of creating an Reactify-Core HTTP server written in Java and building it as a GraalVM native image."},sidebar:"tutorials",previous:{title:"Reactify-Core + Docker + AWS",permalink:"/tutorials/getting-started-advanced"},next:{title:"Getting Started",permalink:"/tutorials/getting-started"}},c={},d=[{value:"Download and run the server",id:"download-and-run-the-server",level:2},{value:"Native image prerequisites",id:"native-image-prerequisites",level:3},{value:"Maven plugin configuration",id:"maven-plugin-configuration",level:3},{value:"Reflection configuration",id:"reflection-configuration",level:3},{value:"Building a native image",id:"building-a-native-image",level:3},{value:"Running a native image",id:"running-a-native-image",level:3}];function u(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h1,{id:"building-a-graalvm-native-image-of-an-Reactify-http-server",children:"Building a GraalVM native image of an Reactify-Core HTTP Server"}),"\n",(0,a.jsxs)(i.p,{children:["In this tutorial we will build the HTTP Server from the ",(0,a.jsx)(i.a,{href:"/tutorials/getting-started",children:"getting started tutorial"})," as\na ",(0,a.jsx)(i.a,{href:"https://www.graalvm.org/reference-manual/native-image/",children:"GraalVM native image"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"download-and-run-the-server",children:"Download and run the server"}),"\n",(0,a.jsxs)(i.p,{children:["First, ",(0,a.jsx)(i.a,{href:"https://github.com/hoangtien2k3/reactify-core/tree/examples-6.0-beta2",children:"clone Reactify-Core"})," locally:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-bash",children:"git clone -b examples-6.0-beta2 https://github.com/hoangtien2k3/reactify-core.git\n"})}),"\n",(0,a.jsxs)(i.p,{children:["Then open the project in your IDE of choice. Before running the example, build the project (",(0,a.jsx)(i.strong,{children:"Ctrl + F9"})," for IntelliJ IDEA)."]}),"\n",(0,a.jsxs)(i.p,{children:["Navigate to a ",(0,a.jsx)(r.Z,{text:"HelloWorldHttpServer",url:"/examples/tutorials/native-image/src/main/java/HelloWorldHttpServer.java"})," class, which is located at ",(0,a.jsx)(i.code,{children:"Reactify/examples/tutorials/native-image"}),"\nand run its ",(0,a.jsx)(i.code,{children:"main"})," method. Open your favourite browser and go to ",(0,a.jsx)(i.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,a.jsx)(i.p,{children:'You can see that it is a simple "Hello world" web server:'}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-java",metastring:"url=/examples/tutorials/native-image/src/main/java/HelloWorldHttpServer.java tag=EXAMPLE",children:'public class HelloWorldHttpServer extends HttpServerLauncher {\n\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello, world!")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    new HelloWorldHttpServer().launch(args);\n  }\n}\n'})}),"\n",(0,a.jsxs)(i.p,{children:["Actually, the server is the same as in a ",(0,a.jsx)(i.a,{href:"/tutorials/getting-started",children:"getting started tutorial"}),". To build it as a native image we would\nneed a few more things."]}),"\n",(0,a.jsx)(i.h3,{id:"native-image-prerequisites",children:"Native image prerequisites"}),"\n",(0,a.jsxs)(i.p,{children:["First things first, you need to have GraalVM and native-image tool installed as described ",(0,a.jsx)(i.a,{href:"https://graalvm.github.io/native-build-tools/0.9.7.1/graalvm-setup.html",children:"here"}),"."]}),"\n",(0,a.jsx)(i.h3,{id:"maven-plugin-configuration",children:"Maven plugin configuration"}),"\n",(0,a.jsxs)(i.p,{children:["We will use the native image maven ",(0,a.jsx)(i.a,{href:"https://mvnrepository.com/artifact/org.graalvm.buildtools/native-maven-plugin",children:"plugin"})," to\nsimplify build process."]}),"\n",(0,a.jsxs)(i.p,{children:["For that we will add the native image plugin to a custom ",(0,a.jsx)(i.code,{children:"native"})," profile of our ",(0,a.jsx)(r.Z,{url:"/examples/tutorials/native-image/pom.xml",children:" pom.xml "}),":"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-xml",children:"<profiles>\n    <profile>\n      <id>native</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.graalvm.buildtools</groupId>\n            <artifactId>native-maven-plugin</artifactId>\n            <version>0.9.17</version>\n            <extensions>true</extensions>\n            <executions>\n              <execution>\n                <id>build-native</id>\n                <goals>\n                  <goal>build</goal>\n                </goals>\n                <phase>package</phase>\n              </execution>\n            </executions>\n            <configuration>\n              <mainClass>HelloWorldHttpServer</mainClass>\n              <imageName>hello-world-server</imageName>\n              <buildArgs>\n                <buildArg>--no-fallback</buildArg>\n                <buildArg>--allow-incomplete-classpath</buildArg>\n                <buildArg>-H:ReflectionConfigurationFiles=${project.basedir}/config/reflectionconfig.json\n                </buildArg>\n              </buildArgs>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n"})}),"\n",(0,a.jsxs)(i.p,{children:["You can read more about plugin configuration at the official plugin ",(0,a.jsx)(i.a,{href:"https://graalvm.github.io/native-build-tools/latest/maven-plugin.html",children:"documentation page"})]}),"\n",(0,a.jsxs)(i.p,{children:["Although we use a plugin to simplify a build process, a ",(0,a.jsx)(i.code,{children:"native-image"})," tool can be used directly if needed."]}),"\n",(0,a.jsx)(i.h3,{id:"reflection-configuration",children:"Reflection configuration"}),"\n",(0,a.jsxs)(i.p,{children:["In order to allow reflective operations (required to process ",(0,a.jsx)(i.a,{href:"/inject",children:"Reactify-Core Inject"})," annotations) we have to define\na reflection configuration. We did this in a ",(0,a.jsx)(r.Z,{text:"reflectionconfig.json",url:"/examples/tutorials/native-image/config/reflectionconfig.json"})," file\ninside the ",(0,a.jsx)(i.code,{children:"config"})," directory. A file describes a few classes with a required reflection access for fields and methods:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-text",metastring:"url=/examples/tutorials/native-image/config/reflectionconfig.json",children:'[\n  {\n    "name": "HelloWorldHttpServer",\n    "allDeclaredMethods": true\n  },\n  {\n    "name": "io.Reactify.launchers.http.HttpServerLauncher",\n    "allDeclaredFields": true,\n    "allDeclaredMethods": true\n  },\n  {\n    "name": "io.Reactify.service.ServiceGraphModule",\n    "allDeclaredMethods": true\n  }\n]\n\n'})}),"\n",(0,a.jsx)(i.h3,{id:"building-a-native-image",children:"Building a native image"}),"\n",(0,a.jsxs)(i.p,{children:["To build a native image execute ",(0,a.jsx)(i.code,{children:"mvn -Pnative package"})," command from within the 'native-image' module directory."]}),"\n",(0,a.jsx)(i.h3,{id:"running-a-native-image",children:"Running a native image"}),"\n",(0,a.jsxs)(i.p,{children:["To run a native image execute ",(0,a.jsx)(i.code,{children:"./target/hello-world-server"})," command from within 'native-image' module directory."]}),"\n",(0,a.jsxs)(i.p,{children:["You should see that the server is launched and that it is listening on port ",(0,a.jsx)(i.code,{children:"8080"}),".\nOpen your favourite browser and go to ",(0,a.jsx)(i.a,{href:"http://localhost:8080",children:"localhost:8080"}),"."]})]})}function g(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},7618:(e,i,n)=>{n.d(i,{Z:()=>r});n(7294);var a=n(9962),t=n(5893);const r=e=>{let{url:i,text:n,isInline:r=!0,children:l}=e;const{siteConfig:o}=(0,a.Z)(),s=i.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,t.jsx)("a",{style:r?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+s+i,target:"_blank",children:n||l})}},1151:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>l});var a=n(7294);const t={},r=a.createContext(t);function l(e){const i=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);
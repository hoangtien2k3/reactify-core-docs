"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[4162],{4353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>j,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var a=t(5893),i=t(1151),s=t(7618),r=t(3149);const c={sidebar_label:"Quick Start"},o="Quick Start",l={id:"inject/quick-start",title:"Quick Start",description:"In this tutorial we will create an Injector from multiple DI modules.",source:"@site/docs/inject/quick-start.mdx",sourceDirName:"inject",slug:"/inject/quick-start",permalink:"/inject/quick-start",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Quick Start"},sidebar:"docs",previous:{title:"Basics",permalink:"/inject/basics"},next:{title:"Injecting instances",permalink:"/inject/injecting-instances"}},d={},u=[{value:"Helper classes",id:"helper-classes",level:2},{value:"Modules",id:"modules",level:2},{value:"Injector",id:"injector",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsxs)(n.p,{children:["In this tutorial we will create an ",(0,a.jsx)(s.Z,{url:"/core-inject/src/main/java/io/activej/inject/Injector.java",children:(0,a.jsx)(n.code,{children:"Injector"})})," from multiple DI modules.\nWe will then use the ",(0,a.jsx)(n.code,{children:"Injector"})," to create an instance of some service.\nWe will use the annotation-based approach to define modules as it is more readable."]}),"\n",(0,a.jsx)(n.h2,{id:"helper-classes",children:"Helper classes"}),"\n",(0,a.jsxs)(n.p,{children:["For theis tutorial, we will need 2 helper classes. The ",(0,a.jsx)(n.code,{children:"DataSource"})," class, which represents the source of some data, and the ",(0,a.jsx)(n.code,{children:"Service"})," class which uses data obtained from the data source for some processing."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_4",children:'public static final class DataSource {\n  private final InetSocketAddress address;\n  private final String dbName;\n\n  @Inject\n  public DataSource(InetSocketAddress address, String dbName) {\n    this.address = address;\n    this.dbName = dbName;\n  }\n\n  public String queryData() {\n    System.out.printf("Querying %s:%s for data%n", address, dbName);\n    return "data";\n  }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_5",children:"public static final class Service {\n  private final DataSource dataSource;\n\n  public Service(DataSource dataSource) {\n    this.dataSource = dataSource;\n  }\n\n  public void process() {\n    String data = dataSource.queryData();\n    System.out.printf(\"Processing data: '%s'%n\", data);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Notice the ",(0,a.jsx)(n.code,{children:"@Inject"})," annotation on the ",(0,a.jsx)(n.code,{children:"DataSource"})," constructor. It will be explained later."]})}),"\n",(0,a.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,a.jsx)(n.p,{children:"We will define two different modules: one for the configuration and one for the service itself."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_1",children:'public static class ConfigModule extends AbstractModule {\n  @Provides\n  InetSocketAddress inetSocketAddress() {\n    return new InetSocketAddress(1234);\n  }\n\n  @Provides\n  String dbName() {\n    return "exampleDB";\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ConfigModule"})," provides both the address for the ",(0,a.jsx)(n.code,{children:"DataSource"})," and the name of the database."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_2",children:"public static class ServiceModule extends AbstractModule {\n  @Provides\n  Service service(DataSource dataSource) {\n    return new Service(dataSource);\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ServiceModule"})," provides only the ",(0,a.jsx)(n.code,{children:"Service"})," itself, which requires instantiation of the ",(0,a.jsx)(n.code,{children:"DataSource"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"injector",children:"Injector"}),"\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.code,{children:"Injector"})," is created from two previously defined modules. After that, an instance of ",(0,a.jsx)(n.code,{children:"Service"})," is obtained from the injector."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_3",children:"public static void main(String[] args) {\n  Injector injector = Injector.of(new ConfigModule(), new ServiceModule());\n  Service service = injector.getInstance(Service.class);\n  service.process();\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Service"})," requires ",(0,a.jsx)(n.code,{children:"DataSource"})," instantiation, but we did not provide ",(0,a.jsx)(n.code,{children:"DataSource"})," explicitly in any of the modules.\nThanks to the ",(0,a.jsx)(n.code,{children:"@Inject"})," annotation on the ",(0,a.jsx)(n.code,{children:"DataSource"}),"'s constructor, injector automatically injected required dependencies\nand instantiated the ",(0,a.jsx)(n.code,{children:"DataSource"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The output of ",(0,a.jsx)(n.code,{children:"service.process()"})," call is:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Querying 0.0.0.0/0.0.0.0:1234:exampleDB for data\nProcessing data: 'data'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can find example sources on ",(0,a.jsx)(r.Z,{href:"https://github.com/activej/activej/{{githubExamplesBranch}}/examples/core/inject-2/src/main/java/MultiModuleExample.java",children:"Github"})]})]})}function j(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3149:(e,n,t)=>{t.d(n,{Z:()=>l});t(7294);var a=t(9962),i=t(1106),s=t.n(i),r=t(5835),c=t.n(r),o=t(5893);c().interpolate=/{{([\s\S]+?)}}/g;const l=function(e){let{href:n,children:t,target:i="_blank"}=e;const{siteConfig:r}=(0,a.Z)(),c=s()(n);return(0,o.jsx)("a",{href:c(r.customFields),target:i,children:t})}},7618:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var a=t(9962),i=t(5893);const s=e=>{let{url:n,text:t,isInline:s=!0,children:r}=e;const{siteConfig:c}=(0,a.Z)(),o=n.startsWith("/examples")?c.customFields.githubExamplesBranch:c.customFields.githubBranch;return(0,i.jsx)("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+o+n,target:"_blank",children:t||r})}}}]);
"use strict";(self.webpackChunkReactifydocs=self.webpackChunkReactifydocs||[]).push([[2934],{3934:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=i(5893),t=i(1151),l=i(7618);i(3149);const s={sidebar_label:"Generating bindings"},d="Generating bindings",a={id:"inject/binding-generation",title:"Generating bindings",description:"In this tutorial we will generate a binding for an arbitrary type Supplier.",source:"@site/docs/inject/binding-generation.mdx",sourceDirName:"inject",slug:"/inject/binding-generation",permalink:"/inject/binding-generation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Generating bindings"},sidebar:"docs",previous:{title:"Duplicate bindings",permalink:"/inject/duplicate-bindings"},next:{title:"Transforming bindings",permalink:"/inject/binding-transformation"}},o={},c=[{value:"Supplier Generator Module",id:"supplier-generator-module",level:2},{value:"Running the example",id:"running-the-example",level:2},{value:"Generating bindings using <code>@Provides</code> methods",id:"generating-bindings-using-provides-methods",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"generating-bindings",children:"Generating bindings"}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial we will generate a binding for an arbitrary type ",(0,r.jsx)(n.code,{children:"Supplier"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"supplier-generator-module",children:"Supplier Generator Module"}),"\n",(0,r.jsxs)(n.p,{children:["We define a standalone module responsible solely for defining the ",(0,r.jsx)(n.code,{children:"Supplier<T>"})," generator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/SupplierGeneratorModuleExample.java tag=REGION_2",children:"public static final class SupplierGeneratorModule extends AbstractModule {\n\n  @Override\n  protected void configure() {\n    generate(Supplier.class, (bindings, scope, key) -> {\n      Binding<?> binding = bindings.get(key.getTypeParameter(0));\n      return binding != null ?\n        binding.mapInstance(instance -> () -> instance) :\n        Binding.toInstance(() -> null);\n    });\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If there is a known binding for type ",(0,r.jsx)(n.code,{children:"T"}),", as in ",(0,r.jsx)(n.code,{children:"Supplier<T>"}),", we generate a binding for that instance's ",(0,r.jsx)(n.code,{children:"Supplier"}),".\nOtherwise, we generate a binding for a ",(0,r.jsx)(n.code,{children:"Supplier"})," that always supplies ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"running-the-example",children:"Running the example"}),"\n",(0,r.jsxs)(n.p,{children:["We need to create a new ",(0,r.jsx)(n.code,{children:"Injector"})," and install the ",(0,r.jsx)(n.code,{children:"SupplierGeneratorModule"}),". We also need to bind a ",(0,r.jsx)(n.code,{children:"String"})," to a ",(0,r.jsx)(n.code,{children:'"Hello, World"'})," value.\nTo let the ",(0,r.jsx)(n.code,{children:"Injector"})," know that we may be requesting instances of ",(0,r.jsx)(n.code,{children:"Supplier<String>"})," and ",(0,r.jsx)(n.code,{children:"Supplier<Integer>"}),", we also need to bind the corresponding keys."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/SupplierGeneratorModuleExample.java tag=REGION_1",children:'Injector injector = Injector.of(ModuleBuilder.create()\n  .install(new SupplierGeneratorModule())\n  .bind(String.class).toInstance("Hello, World")\n  .bind(new Key<Supplier<String>>() {})\n  .bind(new Key<Supplier<Integer>>() {})\n  .build());\nSupplier<String> stringSupplier = injector.getInstance(new Key<>() {});\nSystem.out.println(stringSupplier.get()); // "Hello, World"\n\nSupplier<Integer> integerSupplier = injector.getInstance(new Key<>() {});\nSystem.out.println(integerSupplier.get()); // "null"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then we receive instances of ",(0,r.jsx)(n.code,{children:"Supplier<String>"})," and ",(0,r.jsx)(n.code,{children:"Supplier<Integer>"})," from the ",(0,r.jsx)(n.code,{children:"Injector"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When we call ",(0,r.jsx)(n.code,{children:"stringSupplier.get()"})," we receive a ",(0,r.jsx)(n.code,{children:'"Hello, World"'})," string, because the binding for ",(0,r.jsx)(n.code,{children:"String"})," was manually provided."]}),"\n",(0,r.jsxs)(n.li,{children:["When we call ",(0,r.jsx)(n.code,{children:"integerSupplier.get()"})," we receive a ",(0,r.jsx)(n.code,{children:"null"}),", because the binding for ",(0,r.jsx)(n.code,{children:"Integer"})," was never provided."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can find example sources on ",(0,r.jsx)(l.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/SupplierGeneratorModuleExample.java"})]}),"\n",(0,r.jsxs)(n.h2,{id:"generating-bindings-using-provides-methods",children:["Generating bindings using ",(0,r.jsx)(n.code,{children:"@Provides"})," methods"]}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, we defined a binding generator in ",(0,r.jsx)(n.code,{children:"SupplierGeneratorModule"})," using the ",(0,r.jsx)(n.code,{children:"AbstractModule#generate"})," method inside\nthe ",(0,r.jsx)(n.code,{children:"configure"})," method.\nAlternatively, you can define binding generators using methods annotated with ",(0,r.jsx)(n.code,{children:"@Provides"})," annotation. We will use a special\n",(0,r.jsx)(n.a,{href:"/inject/optional-dependencies",children:(0,r.jsx)(n.code,{children:"OptionalDependency"})})," class as a dependency, which lets us know if there is a provided\nbinding for some type."]}),"\n",(0,r.jsxs)(n.p,{children:["This is what a ",(0,r.jsx)(n.code,{children:"SupplierGeneratorModule"})," might look like if we define a ",(0,r.jsx)(n.code,{children:"Supplier"})," binding generator using ",(0,r.jsx)(n.code,{children:"@Provides"})," annotation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static final class SupplierGeneratorModule extends AbstractModule {\n\t@Provides\n\t<T> Supplier<T> supplier(OptionalDependency<T> optionalDependency) {\n\t\tif (optionalDependency.isPresent()) {\n\t\t\treturn optionalDependency::get;\n\t\t} else {\n\t\t\treturn () -> null;\n\t\t}\n\t}\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3149:(e,n,i)=>{i.d(n,{Z:()=>o});i(7294);var r=i(9962),t=i(1106),l=i.n(t),s=i(5835),d=i.n(s),a=i(5893);d().interpolate=/{{([\s\S]+?)}}/g;const o=function(e){let{href:n,children:i,target:t="_blank"}=e;const{siteConfig:s}=(0,r.Z)(),d=l()(n);return(0,a.jsx)("a",{href:d(s.customFields),target:t,children:i})}},7618:(e,n,i)=>{i.d(n,{Z:()=>l});i(7294);var r=i(9962),t=i(5893);const l=e=>{let{url:n,text:i,isInline:l=!0,children:s}=e;const{siteConfig:d}=(0,r.Z)(),a=n.startsWith("/examples")?d.customFields.githubExamplesBranch:d.customFields.githubBranch;return(0,t.jsx)("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:d.customFields.githubUrl+"/"+a+n,target:"_blank",children:i||s})}}}]);
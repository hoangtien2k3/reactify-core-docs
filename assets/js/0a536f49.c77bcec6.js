"use strict"; (self.webpackChunkactivejdocs = self.webpackChunkactivejdocs || []).push([[8873], { 7520: (e, n, t) => { t.r(n), t.d(n, { assets: () => u, contentTitle: () => l, default: () => g, frontMatter: () => c, metadata: () => d, toc: () => j }); var o = t(5893), s = t(1151), r = t(7815), a = t(4304), i = t(7618); const c = { sidebar_label: "Cookbook example" }, l = "Cookbook example", d = { id: "inject/cookbook-example", title: "Cookbook example", description: "To introduce the basic concepts and features of ActiveJ Inject, we have created an example that starts", source: "@site/docs/inject/cookbook-example.mdx", sourceDirName: "inject", slug: "/inject/cookbook-example", permalink: "/inject/cookbook-example", draft: !1, unlisted: !1, tags: [], version: "current", frontMatter: { sidebar_label: "Cookbook example" }, sidebar: "docs", previous: { title: "Under the hood", permalink: "/inject/under-the-hood" }, next: { title: "Benchmarks", permalink: "/inject/benchmarks" } }, u = {}, j = [{ value: "Manual Bind", id: "manual-bind", level: 3 }, { value: "Bind Using ModuleBuilder", id: "bind-using-modulebuilder", level: 3 }, { value: "Bind Using <code>@Provides</code>", id: "bind-using-provides", level: 3 }, { value: "Bind Using Instance or Class Scan", id: "bind-using-instance-or-class-scan", level: 3 }, { value: "Automatic Bind Using <code>@Inject</code>", id: "automatic-bind-using-inject", level: 3 }, { value: "Using <code>@Named</code> annotation", id: "using-named-annotation", level: 3 }, { value: "Non-singleton Instances Using Scopes", id: "non-singleton-instances-using-scopes", level: 3 }, { value: "Transforming Binds", id: "transforming-binds", level: 3 }]; function h(e) { const n = { admonition: "admonition", code: "code", em: "em", h1: "h1", h3: "h3", li: "li", p: "p", pre: "pre", strong: "strong", ul: "ul", ...(0, s.a)(), ...e.components }; return (0, o.jsxs)(o.Fragment, { children: [(0, o.jsx)(n.h1, { id: "cookbook-example", children: "Cookbook example" }), "\n", (0, o.jsx)(n.p, { children: "To introduce the basic concepts and features of ActiveJ Inject, we have created an example that starts\nwith the low-level DI concepts and gradually covers more specific advanced features." }), "\n", (0, o.jsxs)(n.admonition, { type: "note", children: [(0, o.jsx)(n.p, { children: "To run the examples, you need to clone Reactify-Core from GitHub" }), (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-shell", children: "git clone https://github.com/hoangtien2k3/reactify-core\n" }) }), (0, o.jsxs)(n.p, { children: ["And import it as a Maven project. Check out tag ", (0, o.jsx)(n.strong, { children: (0, o.jsx)(r.Z, { name: "currentVersion" }) }), ". Before running the examples, build the project.\nThese examples are located at ", (0, o.jsx)(n.code, { children: "activej/core-inject/test" }), " and named ", (0, o.jsx)(n.strong, { children: "DiFollowUpTest" })] })] }), "\n", (0, o.jsx)(i.Z, { text: "This example on GitHub", url: "/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java" }), "\n", (0, o.jsxs)(n.p, { children: ["In this example, we have a kitchen where you can automatically create delicious cookies using the ActiveJ Inject.\nBefore we start cooking, note that there are several POJOs with default constructors marked with ", (0, o.jsx)(n.em, { children: "@Inject" }), " annotation: ", (0, o.jsx)(n.strong, { children: "Kitchen" }), ",\n", (0, o.jsx)(n.strong, { children: "Sugar" }), ", ", (0, o.jsx)(n.strong, { children: "Butter" }), ", ", (0, o.jsx)(n.strong, { children: "Flour" }), ", ", (0, o.jsx)(n.strong, { children: "Pastry" }), " and ", (0, o.jsx)(n.strong, { children: "Cookie" }), "."] }), "\n", (0, o.jsx)(n.h3, { id: "manual-bind", children: "Manual Bind" }), "\n", (0, o.jsxs)(n.p, { children: ["Let's bake a ", (0, o.jsx)(n.strong, { children: "Cookie" }), " using ActiveJ Inject in a hardcore way.\nFirst of all, we need to provide all the ingredients for the cookies: ", (0, o.jsx)(n.strong, { children: "Sugar" }), ", ", (0, o.jsx)(n.strong, { children: "Butter" }), " and\n", (0, o.jsx)(n.strong, { children: "Flour" }), ". Next, there is th ", (0, o.jsx)(n.strong, { children: "Pastry" }), " recipe, which includes the\ningredients (", (0, o.jsx)(n.strong, { children: "Sugar" }), ", ", (0, o.jsx)(n.strong, { children: "Butter" }), " and ", (0, o.jsx)(n.strong, { children: "Flour" }), ") that we already know how to get. Finally, we can add a recipe for\nhow to bake a ", (0, o.jsx)(n.strong, { children: "Cookie" }), "."] }), "\n", (0, o.jsx)(a.Z, { chart: "\ngraph BT\n    id1(Cookie) --\x3e id2(Pastry)\n    id2 --\x3e Butter\n    id2 --\x3e Flour\n    id2 --\x3e Sugar\n" }), "\n", (0, o.jsxs)(n.p, { children: ["It's baking time! Just create the ", (0, o.jsx)(n.strong, { children: "Injector" }), " with all these recipes and ask for an instance of a ", (0, o.jsx)(n.strong, { children: "Cookie" }), "."] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_1", children: 'public void transformBindingSnippet() {\n  Module cookbook = ModuleBuilder.create()\n    .bind(Sugar.class).to(Sugar::new)\n    .bind(Butter.class).to(Butter::new)\n    .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n    .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n    .bind(Cookie.class).to(Cookie::new, Pastry.class)\n    .transform(Object.class, (bindings, scope, key, binding) ->\n      binding.onInstance(x -> System.out.println(Instant.now() + " -> " + key)))\n    .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("GoodFlour", injector.getInstance(Cookie.class).pastry().flour().name());\n}\n' }) }), "\n", (0, o.jsx)(n.h3, { id: "bind-using-modulebuilder", children: "Bind Using ModuleBuilder" }), "\n", (0, o.jsxs)(n.p, { children: ["This time we are going to bake a ", (0, o.jsx)(n.strong, { children: "Cookie" }), " with a simple DSL.\nWe will ", (0, o.jsx)(n.em, { children: "bundle" }), " our recipes for ", (0, o.jsx)(n.strong, { children: "Sugar" }), ", ", (0, o.jsx)(n.strong, { children: "Butter" }), ", and ", (0, o.jsx)(n.strong, { children: "Flour" }), " in the 'cookbook' ", (0, o.jsx)(n.em, { children: "module" }), "."] }), "\n", (0, o.jsxs)(n.p, { children: ["Instead of explicitly creating bindings and storing them directly in a map, we will just ", (0, o.jsx)(n.em, { children: "bind" }), " the recipes in our module and\nthen pass it to the ", (0, o.jsx)(n.em, { children: "injector" }), "."] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_2", children: 'public void moduleBindSnippet() {\n  Module module = ModuleBuilder.create()\n    .bind(Sugar.class).to(() -> new Sugar("WhiteSugar", 10.0f))\n    .bind(Butter.class).to(() -> new Butter("PerfectButter", 20.0f))\n    .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n    .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n    .bind(Cookie.class).to(Cookie::new, Pastry.class)\n    .build();\n\n  Injector injector = Injector.of(module);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).pastry().butter().name());\n}\n' }) }), "\n", (0, o.jsxs)(n.h3, { id: "bind-using-provides", children: ["Bind Using ", (0, o.jsx)(n.code, { children: "@Provides" })] }), "\n", (0, o.jsxs)(n.p, { children: ["It's time for the real ", (0, o.jsx)(n.strong, { children: "Cookie" }), " business. Instead of explicitly creating bindings, we will use a declarative DSL."] }), "\n", (0, o.jsxs)(n.p, { children: ["As in the previous example, we will create a cookbook module, but this time all bindings for the ingredients will be created\nautomatically from the ", (0, o.jsx)(n.em, { children: "provider methods" }), ". These methods are annotated with the ", (0, o.jsx)(n.code, { children: "@Provides" }), " annotation:"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_3", children: 'public void provideAnnotationSnippet() {\n  Module cookbook = new AbstractModule() {\n    @Provides\n    Sugar sugar() {return new Sugar("WhiteSugar", 10.f);}\n\n    @Provides\n    Butter butter() {return new Butter("PerfectButter", 20.0f);}\n\n    @Provides\n    Flour flour() {return new Flour("GoodFlour", 100.0f);}\n\n    @Provides\n    Pastry pastry(Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    Cookie cookie(Pastry pastry) {\n      return new Cookie(pastry);\n    }\n  };\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).pastry().butter().name());\n}\n' }) }), "\n", (0, o.jsx)(n.h3, { id: "bind-using-instance-or-class-scan", children: "Bind Using Instance or Class Scan" }), "\n", (0, o.jsxs)(n.p, { children: ["Sometimes it happens that you have prepared an injection scheme, but that scheme is not a module. Fortunately, there is a ", (0, o.jsx)(n.code, { children: "scan()" }), "\nmethod that can help you make a connection between DI entities and your scheme."] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_4", children: 'public void scanObjectSnippet() {\n  Module cookbook = ModuleBuilder.create()\n    .scan(new Object() {\n      @Provides\n      Sugar sugar() {return new Sugar("WhiteSugar", 10.f);}\n\n      @Provides\n      Butter butter() {return new Butter("PerfectButter", 20.0f);}\n\n      @Provides\n      Flour flour() {return new Flour("GoodFlour", 100.0f);}\n\n      @Provides\n      Pastry pastry(Sugar sugar, Butter butter, Flour flour) {\n        return new Pastry(sugar, butter, flour);\n      }\n\n      @Provides\n      Cookie cookie(Pastry pastry) {\n        return new Cookie(pastry);\n      }\n    })\n    .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).pastry().butter().name());\n}\n' }) }), "\n", (0, o.jsx)(n.p, { children: "If your class provides a scheme, you can easily use it:" }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_5", children: 'public void scanClassSnippet() {\n  Module cookbook = ModuleBuilder.create().scan(InjectsDefinition.class).build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).pastry().butter().name());\n}\n' }) }), "\n", (0, o.jsxs)(n.h3, { id: "automatic-bind-using-inject", children: ["Automatic Bind Using ", (0, o.jsx)(n.code, { children: "@Inject" })] }), "\n", (0, o.jsxs)(n.p, { children: ["When we created our POJOs, we marked their constructors with the ", (0, o.jsx)(n.code, { children: "@Inject" }), " annotation:"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_8", children: 'record Sugar(String name, float weight) {\n  @Inject\n  public Sugar() {\n    this("WhiteSugar", 10.f);\n  }\n}\n' }) }), "\n", (0, o.jsxs)(n.p, { children: ["If a binding depends on a class that has no known binding, the ", (0, o.jsx)(n.em, { children: "injector" }), " will try to automatically generate a binding for it.\nIt will look for the ", (0, o.jsx)(n.code, { children: "@Inject" }), " annotation on its constructors, static factory methods, or on the class itself (in this case\nthe default constructor is used) and use them as the factory in the generated binding."] }), "\n", (0, o.jsxs)(n.p, { children: ["Since nothing depends on a ", (0, o.jsx)(n.strong, { children: "Cookie" }), " binding, by default no bindings are generated at all.\nHere we use a plain ", (0, o.jsx)(n.em, { children: "bind" }), " to tell the injector that we want the binding to be present.\nThis will generate the entire bindings tree that it depends on:"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_6", children: 'public void injectAnnotationSnippet() {\n  Module cookbook = ModuleBuilder.create().bind(Cookie.class).build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("WhiteSugar", injector.getInstance(Cookie.class).pastry().sugar().name());\n}\n' }) }), "\n", (0, o.jsxs)(n.h3, { id: "using-named-annotation", children: ["Using ", (0, o.jsx)(n.code, { children: "@Named" }), " annotation"] }), "\n", (0, o.jsxs)(n.p, { children: ["Let's be trendy and bake a sugar-free cookie. To do this, along with the ", (0, o.jsx)(n.code, { children: "@Provides" }), " annotation, we will also use the ", (0, o.jsx)(i.Z, { text: "@Named", url: "/core-inject/src/main/java/io/activej/inject/annotation/Named.java" }), " annotation\nand provide two different ", (0, o.jsx)(n.strong, { children: "Sugar" }), ", ", (0, o.jsx)(n.strong, { children: "Pastry" }), " and ", (0, o.jsx)(n.strong, { children: "Cookie" }), " factory functions. This approach allows us to use different instances of the same class.\nNow we can tell our ", (0, o.jsx)(n.em, { children: "injector" }), ", which of cookie we want, a regular one or sugar-free."] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_7", children: 'public void namedAnnotationSnippet() {\n  Module cookbook = new AbstractModule() {\n    @Provides\n    @Named("zerosugar")\n    Sugar sugar1() {return new Sugar("SugarFree", 0.f);}\n\n    @Provides\n    @Named("normal")\n    Sugar sugar2() {return new Sugar("WhiteSugar", 10.f);}\n\n    @Provides\n    Butter butter() {return new Butter("PerfectButter", 20.f);}\n\n    @Provides\n    Flour flour() {return new Flour("GoodFlour", 100.f);}\n\n    @Provides\n    @Named("normal")\n    Pastry pastry1(@Named("normal") Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    @Named("zerosugar")\n    Pastry pastry2(@Named("zerosugar") Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    @Named("normal")\n    Cookie cookie1(@Named("normal") Pastry pastry) {\n      return new Cookie(pastry);\n    }\n\n    @Provides\n    @Named("zerosugar")\n    Cookie cookie2(@Named("zerosugar") Pastry pastry) {return new Cookie(pastry);}\n  };\n\n  Injector injector = Injector.of(cookbook);\n\n  float normalWeight = injector.getInstance(Key.of(Cookie.class, "normal"))\n    .pastry().sugar().weight();\n  float zerosugarWeight = injector.getInstance(Key.of(Cookie.class, "zerosugar"))\n    .pastry().sugar().weight();\n\n  assertEquals(10.f, normalWeight, 0.0f);\n  assertEquals(0.f, zerosugarWeight, 0.0f);\n}\n' }) }), "\n", (0, o.jsxs)(n.p, { children: ["You can also use ", (0, o.jsx)(i.Z, { text: "ModuleBuilder", url: "/core-inject/src/main/java/io/activej/inject/module/ModuleBuilder.java" })] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_10", children: 'public void moduleBuilderWithQualifiedBindsSnippet() {\n  Module cookbook = ModuleBuilder.create()\n    .bind(Key.of(Sugar.class, "zerosugar")).to(() -> new Sugar("SugarFree", 0.f))\n    .bind(Key.of(Sugar.class, "normal")).to(() -> new Sugar("WhiteSugar", 10.f))\n    .bind(Key.of(Pastry.class, "zerosugar")).to(Pastry::new, Key.of(Sugar.class).qualified("zerosugar"), Key.of(Butter.class), Key.of(Flour.class))\n    .bind(Key.of(Pastry.class, "normal")).to(Pastry::new, Key.of(Sugar.class).qualified("normal"), Key.of(Butter.class), Key.of(Flour.class))\n    .bind(Key.of(Cookie.class, "zerosugar")).to(Cookie::new, Key.of(Pastry.class).qualified("zerosugar"))\n    .bind(Key.of(Cookie.class, "normal")).to(Cookie::new, Key.of(Pastry.class).qualified("normal"))\n    .build();\n\n  Injector injector = Injector.of(cookbook);\n\n  float normalWeight = injector.getInstance(Key.of(Cookie.class, "normal"))\n    .pastry().sugar().weight();\n  float zerosugarWeight = injector.getInstance(Key.of(Cookie.class, "zerosugar"))\n    .pastry().sugar().weight();\n\n  assertEquals(10.f, normalWeight, 0.0f);\n  assertEquals(0.f, zerosugarWeight, 0.0f);\n}\n' }) }), "\n", (0, o.jsx)(n.h3, { id: "non-singleton-instances-using-scopes", children: "Non-singleton Instances Using Scopes" }), "\n", (0, o.jsx)(n.p, { children: "Our cookies turned out to be so tasty that many people want to try them. However, there is a\nproblem: ActiveJ Inject makes instances singleton by default. Yet, we cannot sell the same one cookie to all our\ncustomers." }), "\n", (0, o.jsxs)(n.p, { children: ["Fortunately, there is a solution: we can use the custom ", (0, o.jsx)(i.Z, { text: "@ScopeAnnotation", url: "/core-inject/src/main/java/io/activej/inject/annotation/ScopeAnnotation.java" }), "\n", (0, o.jsx)(n.code, { children: "@OrderScope" }), " to create an ", (0, o.jsx)(n.code, { children: "ORDER_SCOPE" }), " scope:"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/OrderScope.java tag=EXAMPLE", children: "@ScopeAnnotation(threadsafe = false)\n@Target({ElementType.METHOD})\n@Retention(RUNTIME)\npublic @interface OrderScope {\n}\n" }) }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_9", children: "public static final Scope ORDER_SCOPE = Scope.of(OrderScope.class);\n" }) }), "\n", (0, o.jsx)(n.p, { children: "So our cookbook will look as follows:" }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_11", children: "Module cookbook = ModuleBuilder.create()\n  .bind(Kitchen.class).to(Kitchen::new)\n  .bind(Sugar.class).to(Sugar::new).in(OrderScope.class)\n  .bind(Butter.class).to(Butter::new).in(OrderScope.class)\n  .bind(Flour.class).to(Flour::new).in(OrderScope.class)\n  .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class).in(OrderScope.class)\n  .bind(Cookie.class).to(Cookie::new, Pastry.class).in(OrderScope.class)\n  .build();\n" }) }), "\n", (0, o.jsx)(n.p, { children: "In this way, only kitchen will remain singleton:" }), "\n", (0, o.jsx)(a.Z, { style: { margin: "0 auto" }, chart: "\ngraph BT\n    subgraph Root Scope\n    Kitchen\n    subgraph N\n    subgraph Order Scope\n    Sugar--\x3eid1(Pastry)\n    Flour--\x3eid1\n    Butter--\x3eid1\n    id1--\x3eCookie\n    end\n    end\n    end\n" }), "\n", (0, o.jsx)(n.p, { children: "We received 10 orders from our customers, so now we need 10 instances of cookies:" }), "\n", (0, o.jsxs)(n.ul, { children: ["\n", (0, o.jsxs)(n.li, { children: ["First, we inject an instance of ", (0, o.jsx)(n.strong, { children: "Kitchen" }), ". This instance is now stored in the root scope injector."] }), "\n", (0, o.jsxs)(n.li, { children: ["Then we create 10 subinjectors which enter ", (0, o.jsx)(n.code, { children: "ORDER_SCOPE" }), "."] }), "\n", (0, o.jsxs)(n.li, { children: ["Each subinjector creates only one ", (0, o.jsx)(n.strong, { children: "Cookie" }), " instance and refers to the single ", (0, o.jsx)(n.strong, { children: "Kitchen" }), " instance of its parent root scope."] }), "\n"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_12", children: "Injector injector = Injector.of(cookbook);\nKitchen kitchen = injector.getInstance(Kitchen.class);\nSet<Cookie> cookies = Collections.newSetFromMap(new IdentityHashMap<>());\nfor (int i = 0; i < 10; ++i) {\n  Injector subinjector = injector.enterScope(ORDER_SCOPE);\n\n  assertSame(subinjector.getInstance(Kitchen.class), kitchen);\n  if (i > 0) assertFalse(cookies.contains(subinjector.getInstance(Cookie.class)));\n\n  cookies.add(subinjector.getInstance(Cookie.class));\n}\nassertEquals(10, cookies.size());\n" }) }), "\n", (0, o.jsx)(n.h3, { id: "transforming-binds", children: "Transforming Binds" }), "\n", (0, o.jsxs)(n.p, { children: ["You can customize the process of how your injector gets instances and transform that process. For example, you can\nsimply add logging by overriding the ", (0, o.jsx)(n.em, { children: "configure()" }), " method:"] }), "\n", (0, o.jsx)(n.pre, { children: (0, o.jsx)(n.code, { className: "language-java", metastring: "url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_13", children: 'public void transformBindingSnippet() {\n  Module cookbook = ModuleBuilder.create()\n    .bind(Sugar.class).to(Sugar::new)\n    .bind(Butter.class).to(Butter::new)\n    .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n    .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n    .bind(Cookie.class).to(Cookie::new, Pastry.class)\n    .transform(Object.class, (bindings, scope, key, binding) ->\n      binding.onInstance(x -> System.out.println(Instant.now() + " -> " + key)))\n    .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("GoodFlour", injector.getInstance(Cookie.class).pastry().flour().name());\n}\n' }) }), "\n", (0, o.jsx)(n.p, { children: "Now you will receive an output, which is the time when an instance was created and the instance itself." })] }) } function g(e = {}) { const { wrapper: n } = { ...(0, s.a)(), ...e.components }; return n ? (0, o.jsx)(n, { ...e, children: (0, o.jsx)(h, { ...e }) }) : h(e) } }, 7618: (e, n, t) => { t.d(n, { Z: () => r }); t(7294); var o = t(9962), s = t(5893); const r = e => { let { url: n, text: t, isInline: r = !0, children: a } = e; const { siteConfig: i } = (0, o.Z)(), c = n.startsWith("/examples") ? i.customFields.githubExamplesBranch : i.customFields.githubBranch; return (0, s.jsx)("a", { style: r ? {} : { display: "block", marginBottom: "16px" }, href: i.customFields.githubUrl + "/" + c + n, target: "_blank", children: t || a }) } }, 4304: (e, n, t) => { t.d(n, { Z: () => a }); var o = t(7294), s = t(6365), r = t(5893); s.L.initialize({ startOnLoad: !0 }); const a = e => { let { chart: n } = e; return (0, o.useEffect)((() => { s.L.contentLoaded() }), []), (0, r.jsx)("div", { className: "mermaid", children: n }) } }, 7815: (e, n, t) => { t.d(n, { Z: () => s }); t(7294); var o = t(9962); const s = e => { let { name: n } = e; const { siteConfig: t } = (0, o.Z)(); if (!n) throw new Error("Variable name is required"); if (void 0 === t.customFields[n]) throw new Error(`Variable ${n} not exist`); return t.customFields[n] } } }]);
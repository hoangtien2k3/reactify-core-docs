"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[77],{5677:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var n=r(5893),a=r(1151),l=r(7618),s=r(7815);const i={sidebar_label:"Examples"},o="Examples",c={id:"http/examples",title:"Examples",description:'* Simple "Hello World" Server - a simple asynchronous server created using',source:"@site/docs/http/examples.mdx",sourceDirName:"http",slug:"/http/examples",permalink:"/http/examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Examples"},sidebar:"docs",previous:{title:"Benchmarks",permalink:"/http/benchmarks"},next:{title:"Overview",permalink:"/inject"}},d={},h=[{value:"Simple &quot;Hello World&quot; Server",id:"simple-hello-world-server",level:3},{value:"&quot;Hello World&quot; Server with pre-defined Launcher",id:"hello-world-server-with-pre-defined-launcher",level:3},{value:"Custom Server",id:"custom-server",level:3},{value:"Multithreaded Server Example",id:"multithreaded-server-example",level:3},{value:"Request Parameters Example",id:"request-parameters-example",level:3},{value:"Static Servlet Example",id:"static-servlet-example",level:3},{value:"Routing Servlet Example",id:"routing-servlet-example",level:3},{value:"Dynamic Routing Examples",id:"dynamic-routing-examples",level:3},{value:"Routing Servlet Multibinder",id:"routing-servlet-multibinder",level:3},{value:"Blocking Servlet Example",id:"blocking-servlet-example",level:3},{value:"File Upload Example",id:"file-upload-example",level:3},{value:"Client Example",id:"client-example",level:3},{value:"Multipart Data Handling Example",id:"multipart-data-handling-example",level:3},{value:"WebSocket Pong Server",id:"websocket-pong-server",level:3},{value:"WebSocket Ping Client",id:"websocket-ping-client",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"examples",children:"Examples"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#simple-hello-world-server",children:'Simple "Hello World" Server'})," - a simple asynchronous server created using ",(0,n.jsx)(l.Z,{text:"HttpServer",url:"/core-http/src/main/java/io/activej/http/HttpServer.java"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#hello-world-server-with-pre-defined-launcher",children:'"Hello World" Server with Pre-defined Launcher'})," - HTTP module provides you with some pre-defined launchers, which are very easy to use for creating servers."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#custom-server",children:"Custom Server"})," - example of creating a server from scratch using ",(0,n.jsx)(t.a,{href:"/boot/launcher",children:(0,n.jsx)(t.strong,{children:"Launcher"})}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#multithreaded-server-example",children:"Multithreaded Server Example"})," - HTTP multithreaded server example."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#request-parameters-example",children:"Request Parameters Example"})," - example of processing requests with parameter."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#static-servlet-example",children:"Static Servlet Example"})," - example of ",(0,n.jsx)(l.Z,{text:"StaticServlet",url:"/core-http/src/main/java/io/activej/http/StaticServlet.java"})," utilizing"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#routing-servlet-example",children:"Routing Servlet Example"})," - example of ",(0,n.jsx)(t.code,{children:"RoutingServlet"})," usage for creating servlet tree."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#dynamic-routing-examples",children:"Dynamic Routing Examples"})," - various examples of routing based on host, cookie, mime-type, etc."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#routing-servlet-multibinder",children:"Routing Servlet Multibinder"})," - example of using ",(0,n.jsx)(t.strong,{children:"Multibinder"})," to merge conflicting ",(0,n.jsx)(t.code,{children:"RoutingServlet"}),"s"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#blocking-servlet-example",children:"Blocking Servlet Example"})," - example of handling complex operations on server in a new thread."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#file-upload-example",children:"File Upload Example"})," - example of uploading a file from client local storage to server."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#client-example",children:"Client Example"})," - creating an HTTP client utilizing ",(0,n.jsx)(t.strong,{children:"Launcher"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#multipart-data-handling-example",children:"Multipart Data Handling Example"})," - simple server that handles ",(0,n.jsx)(t.strong,{children:"Multipart/form-data"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#websocket-pong-server",children:"WebSocket Echo Server Example"})," - creating a basic server with WebSocket communication protocol."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#websocket-ping-client",children:"WebSocket Client Example"})," - setting up a client with WebSocket communication protocol."]}),"\n"]}),"\n",(0,n.jsxs)(t.admonition,{type:"note",children:[(0,n.jsx)(t.p,{children:"To run the examples, you need to clone ActiveJ from GitHub:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/activej/activej\n"})}),(0,n.jsxs)(t.p,{children:["And import it as a Maven project. Check out tag ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(s.Z,{name:"currentVersion"})}),". Before running the examples, build the project. These examples are located at ",(0,n.jsx)(t.code,{children:"activej/examples/core/http"})]})]}),"\n",(0,n.jsx)(t.h3,{id:"simple-hello-world-server",children:'Simple "Hello World" Server'}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{url:"/examples/core/http/src/main/java/HelloWorldExample.java",children:"HelloWorldExample"})})," uses the ",(0,n.jsx)(t.strong,{children:"HttpServer"})," class of the HTTP module. It is a non-blocking server that runs in an eventloop reactor:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/HelloWorldExample.java tag=REGION_1",children:'\npublic static void main(String[] args) throws IOException {\n  Eventloop eventloop = Eventloop.create();\n  HttpServer server = HttpServer.builder(eventloop,\n      request -> HttpResponse.ok200()\n        .withPlainText("Hello world!")\n        .toPromise())\n    .withListenPort(8080)\n    .build();\n\n  server.listen();\n\n  System.out.println("Server is running");\n  System.out.println("You can connect from browser by visiting \'http://localhost:8080/\'");\n\n  eventloop.run();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This server runs in the provided eventloop and waits for connections on port ",(0,n.jsx)(t.code,{children:"8080"}),". When the server receives a request, it sends back a ",(0,n.jsx)(t.strong,{children:"Promise"})," of greeting response."]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["To add support for HTTPS to ",(0,n.jsx)(t.code,{children:"HttpServer"})," you need to call ",(0,n.jsx)(t.code,{children:"withSslListenAddress"})," or ",(0,n.jsx)(t.code,{children:"withSslListenAddresses"})," builder method and pass ",(0,n.jsx)(t.code,{children:"SSLContext"}),", ",(0,n.jsx)(t.code,{children:"Executor"}),", and a port or address for the server to be listening on."]})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,url:"/examples/core/http/src/main/java/HelloWorldExample.java",children:"See full example on GitHub"})})}),"\n",(0,n.jsx)(t.h3,{id:"hello-world-server-with-pre-defined-launcher",children:'"Hello World" Server with pre-defined Launcher'}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Launcher"}),"s manage the lifecycle of applications and allow you to create applications in a simple way:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java tag=EXAMPLE",children:'public final class HttpHelloWorldExample extends HttpServerLauncher {\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello World")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new HttpHelloWorldExample();\n    launcher.launch(args);\n  }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["All you have to do is provide a servlet that handles the requests and launch the application. ",(0,n.jsx)(l.Z,{text:"HttpServerLauncher",url:"/launchers/http/src/main/java/io/activej/launchers/http/HttpServerLauncher.java"}),"  will take care of the rest."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{text:"See full example on GitHub",url:"/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"custom-server",children:"Custom Server"}),"\n",(0,n.jsxs)(t.p,{children:["With ",(0,n.jsx)(t.strong,{children:"Launcher"})," you can easily create HTTP servers from scratch. In this example, we create a simple server that\nsends a greeting:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/CustomHttpServerExample.java tag=EXAMPLE",children:'public final class CustomHttpServerExample extends Launcher {\n  private static final int PORT = 8080;\n\n  @Provides\n  NioReactor reactor() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello from HTTP server")\n      .toPromise();\n  }\n\n  @Provides\n  @Eager\n  HttpServer server(NioReactor reactor, AsyncServlet servlet) {\n    return HttpServer.builder(reactor, servlet)\n      .withListenPort(PORT)\n      .build();\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Override\n  protected void run() throws Exception {\n    logger.info("HTTP Server is now available at http://localhost:" + PORT);\n    awaitShutdown();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new CustomHttpServerExample();\n    launcher.launch(args);\n  }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["First, we provide a reactor, a servlet, and a reactive server itself. Then, we override ",(0,n.jsx)(t.em,{children:"getModule"})," method to provide\nour server with configs and ",(0,n.jsx)(l.Z,{text:"ServiceGraphModule",url:"/boot-servicegraph/src/main/java/io/activej/service/ServiceGraphModule.java"})," to build the service dependency graph."]}),"\n",(0,n.jsxs)(t.p,{children:["Finally, we override the ",(0,n.jsx)(t.code,{children:"Launcher"}),"'s main method ",(0,n.jsx)(t.code,{children:"run()"})," and then define the ",(0,n.jsx)(t.code,{children:"main"})," method of the example."]}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/CustomHttpServerExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"multithreaded-server-example",children:"Multithreaded Server Example"}),"\n",(0,n.jsxs)(t.p,{children:["In this example we use the predefined ",(0,n.jsx)(l.Z,{text:"MultithreadedHttpServerLauncher",url:"/launchers/http/src/main/java/io/activej/launchers/http/MultithreadedHttpServerLauncher.java"})," to create a multithreaded HTTP server. By\ndefault, there will be 4 worker servlets with ",(0,n.jsx)(t.em,{children:"workerId"}),"s. Each of them sends back a greeting and the number of the worker\nthat served the connection:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultithreadedHttpServerExample.java tag=EXAMPLE",children:'public final class MultithreadedHttpServerExample extends MultithreadedHttpServerLauncher {\n  @Provides\n  @Worker\n  AsyncServlet servlet(@WorkerId int workerId) {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello from worker server #" + workerId + "\\n")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    MultithreadedHttpServerExample example = new MultithreadedHttpServerExample();\n    example.launch(args);\n  }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/MultithreadedHttpServerExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"request-parameters-example",children:"Request Parameters Example"}),"\n",(0,n.jsxs)(t.p,{children:["This example demonstrates handling of requests with parameters which are received with methods ",(0,n.jsx)(t.code,{children:"getPostParameters"})," and ",(0,n.jsx)(t.code,{children:"getQueryParameter"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpRequestParametersExample.java tag=REGION_1",children:'@Provides\nIStaticLoader staticLoader(Reactor reactor, Executor executor) {\n  return IStaticLoader.ofClassPath(reactor, executor, RESOURCE_DIR);\n}\n\n@Provides\nAsyncServlet servlet(Reactor reactor, IStaticLoader staticLoader) {\n  return RoutingServlet.builder(reactor)\n    .with(POST, "/hello", request -> request.loadBody()\n      .then($ -> {\n        String name = request.getPostParameters().get("name");\n        return HttpResponse.ok200()\n          .withHtml("<h1><center>Hello from POST, " + name + "!</center></h1>")\n          .toPromise();\n      }))\n    .with(GET, "/hello", request -> {\n      String name = request.getQueryParameter("name");\n      return HttpResponse.ok200()\n        .withHtml("<h1><center>Hello from GET, " + name + "!</center></h1>")\n        .toPromise();\n    })\n    .with("/*", StaticServlet.builder(reactor, staticLoader)\n      .withIndexHtml()\n      .build())\n    .build();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"static-servlet-example",children:"Static Servlet Example"}),"\n",(0,n.jsxs)(t.p,{children:["Shows how to set up and utilize ",(0,n.jsx)(l.Z,{text:"StaticServlet",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java"})," to create servlets with some static content, in our case it will get\ncontent from the ",(0,n.jsx)(t.code,{children:"static/site"})," directory."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/StaticServletExample.java tag=EXAMPLE",children:'@Provides\nIStaticLoader staticLoader(Reactor reactor, Executor executor) {\n  return IStaticLoader.ofClassPath(reactor, executor, "static/site");\n}\n\n@Provides\nAsyncServlet servlet(Reactor reactor, IStaticLoader staticLoader) {\n  return StaticServlet.builder(reactor, staticLoader)\n    .withIndexHtml()\n    .build();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/StaticServletExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"routing-servlet-example",children:"Routing Servlet Example"}),"\n",(0,n.jsxs)(t.p,{children:["Represents how to set up servlet routing tree. This process resembles Express approach. To add a route to a ",(0,n.jsx)(l.Z,{text:"RoutingServlet",url:"/core-http/src/main/java/io/activej/http/RoutingServlet.java"}),", you should use method ",(0,n.jsx)(t.code,{children:"with"})," of ",(0,n.jsx)(t.code,{children:"RoutingServet"}),"'s builder:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_2",children:'.with(GET, "/", request ->\n  HttpResponse.ok200()\n    .withHtml("""\n      <h1>Go to some pages</h1>\n      <a href="/path1"> Path 1 </a><br>\n      <a href="/path2"> Path 2 </a><br>\n      <a href="/user/0"> Data for user with ID 0 </a><br>\n      <br>\n      <a href="/path3"> Non existent </a>\n      """)\n    .toPromise())\n'})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"method"})," (optional) is one of the HTTP methods (",(0,n.jsx)(t.code,{children:"GET"}),", ",(0,n.jsx)(t.code,{children:"POST"}),", etc)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"path"})," is the path on the server"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"servlet"})," defines the logic of request processing."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The whole servlet tree will look as follows:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_1",children:'@Provides\nAsyncServlet servlet(Reactor reactor) {\n  return RoutingServlet.builder(reactor)\n    //[START REGION_2]\n    .with(GET, "/", request ->\n      HttpResponse.ok200()\n        .withHtml("""\n          <h1>Go to some pages</h1>\n          <a href="/path1"> Path 1 </a><br>\n          <a href="/path2"> Path 2 </a><br>\n          <a href="/user/0"> Data for user with ID 0 </a><br>\n          <br>\n          <a href="/path3"> Non existent </a>\n          """)\n        .toPromise())\n    //[END REGION_2]\n    .with(GET, "/path1", request ->\n      HttpResponse.ok200()\n        .withHtml("""\n          <h1>Hello from the first path!</h1>\n          <a href="/">Go home</a>\n          """)\n        .toPromise())\n    .with(GET, "/path2", request ->\n      HttpResponse.ok200()\n        .withHtml("""\n          <h1>Hello from the second path!</h1>\n          <a href="/">Go home</a>\n          """)\n        .toPromise())\n\n    //[START REGION_3]\n    .with(GET, "/user/:user_id", request -> {\n      String userId = request.getPathParameter("user_id");\n      return HttpResponse.ok200()\n        .withHtml("""\n          <h1>You have requested data for user with ID: $userId</h1>\n          <h3>Try changing URL after <i>\'.../user/\'</i> to get data for users with different IDs</h3>\n          """\n          .replace("$userId", userId))\n        .toPromise();\n    })\n    //[END REGION_3]\n\n    //[START REGION_4]\n    .with("/*", request ->\n      HttpResponse.ofCode(404)\n        .withHtml("""\n          <h1>404</h1><p>Path \'$path\' not found</p>\n          <a href="/">Go home</a>\n          """\n          .replace("$path", request.getRelativePath()))\n        .toPromise())\n    .build();\n  //[END REGION_4]\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can map path parameters with ",(0,n.jsx)(t.code,{children:"/:param"})," syntax:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_3",children:'.with(GET, "/user/:user_id", request -> {\n  String userId = request.getPathParameter("user_id");\n  return HttpResponse.ok200()\n    .withHtml("""\n      <h1>You have requested data for user with ID: $userId</h1>\n      <h3>Try changing URL after <i>\'.../user/\'</i> to get data for users with different IDs</h3>\n      """\n      .replace("$userId", userId))\n    .toPromise();\n})\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Path parameters can be retrieved by calling ",(0,n.jsx)(t.code,{children:"HttpRequest#getPathParameter"})," method and passing the name of the path parameter."]}),"\n",(0,n.jsxs)(t.p,{children:["You may also use wildcard route ",(0,n.jsx)(t.code,{children:"*"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_4",children:'.with("/*", request ->\n  HttpResponse.ofCode(404)\n    .withHtml("""\n      <h1>404</h1><p>Path \'$path\' not found</p>\n      <a href="/">Go home</a>\n      """\n      .replace("$path", request.getRelativePath()))\n    .toPromise())\n.build();\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"*"})," states that whichever next path segment is received, it will be processed by this servlet."]}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/RoutingServletExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"dynamic-routing-examples",children:"Dynamic Routing Examples"}),"\n",(0,n.jsx)(t.p,{children:"A few examples that demonstrate how to route HTTP requests by some dynamic values rather than by predefined paths:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(l.Z,{text:"Routing based on host",url:"/examples/core/http/src/main/java/HostRoutingExample.java"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(l.Z,{text:"Routing based on MIME type",url:"/examples/core/http/src/main/java/MimeTypeRoutingExample.java"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(l.Z,{text:"Routing based on Cookie",url:"/examples/core/http/src/main/java/CookieRoutingExample.java"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(l.Z,{text:"Randomized routing",url:"/examples/core/http/src/main/java/DynamicRoutingExample.java"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"routing-servlet-multibinder",children:"Routing Servlet Multibinder"}),"\n",(0,n.jsxs)(t.p,{children:["Using ",(0,n.jsx)(t.a,{href:"/inject",children:"Dependency Injection"})," you can provide ",(0,n.jsx)(t.code,{children:"RoutingServlet"}),"s in different modules.\nSuch bindings would result in ",(0,n.jsx)(t.strong,{children:"DI"})," throwing an exception because of conflicting ",(0,n.jsx)(t.code,{children:"RoutingServlet.class"})," keys. However, you can instruct the ",(0,n.jsx)(t.strong,{children:"DI"})," to resolve conflicts by merging ",(0,n.jsx)(t.code,{children:"RoutingServlet"}),"s into a single ",(0,n.jsx)(t.code,{children:"RoutingServlet"})," that contains all the routes specified in other routing servlets."]}),"\n",(0,n.jsxs)(t.p,{children:["In the example we declare several modules that provide ",(0,n.jsx)(t.code,{children:"RoutingServlet"})," with different routes:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_A",children:'private static final class ModuleA extends AbstractModule {\n  @Provides\n  RoutingServlet servlet(Reactor reactor) {\n    return RoutingServlet.builder(reactor)\n      .with(GET, "/a", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/a\' path\\n")\n        .toPromise())\n      .with(GET, "/b", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/b\' path\\n")\n        .toPromise())\n      .with(GET, "/", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/\' path\\n")\n        .toPromise())\n      .build();\n  }\n}\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_B",children:'private static final class ModuleB extends AbstractModule {\n  @Provides\n  RoutingServlet servlet(Reactor reactor) {\n    return RoutingServlet.builder(reactor)\n      .with(GET, "/a/b", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/a/b\' path\\n")\n        .toPromise())\n      .with(GET, "/b/a", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/b/a\' path\\n")\n        .toPromise())\n      .with(GET, "/d", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/d\' path\\n")\n        .toPromise())\n      .build();\n  }\n}\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_C",children:'private static final class ModuleC extends AbstractModule {\n  @Provides\n  RoutingServlet servlet(Reactor reactor) {\n    return RoutingServlet.builder(reactor)\n      .with(GET, "/a/c", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/a/c\' path\\n")\n        .toPromise())\n      .with(GET, "/b/c", request -> HttpResponse.ok200()\n        .withPlainText("Hello from \'/b/c\' path\\n")\n        .toPromise())\n      .with(POST, "/d", request -> HttpResponse.ok200()\n        .withPlainText("Hello from POST \'/d\' path\\n")\n        .toPromise())\n      .build();\n  }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Next, we define a ",(0,n.jsx)(l.Z,{text:"Multibinder",url:"/core-inject/src/main/java/io/activej/inject/binding/Multibinder.java"}),"\nwhich merges conflicting servlets:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MULTIBINDER",children:"public static final Multibinder<RoutingServlet> SERVLET_MULTIBINDER = Multibinders.ofBinaryOperator(RoutingServlet::merge);\n"})}),"\n",(0,n.jsxs)(t.p,{children:["At last, we override ",(0,n.jsx)(t.code,{children:"HttpServerLauncher#getBusinesLogicModule"})," method to provide a combined DI ",(0,n.jsx)(t.code,{children:"Module"})," that contains\n",(0,n.jsx)(t.code,{children:"ModuleA"}),", ",(0,n.jsx)(t.code,{children:"ModuleB"}),", ",(0,n.jsx)(t.code,{children:"ModuleC"})," as well as an installed ",(0,n.jsx)(t.code,{children:"Multibinder"})," for DI Key ",(0,n.jsx)(t.code,{children:"RoutingServlet.class"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"If we launch the example, we can see that there are no conflicts as conflicting servlets where successfully merged together.\nWe can open a web browser and visit any of the specified routes to make sure that routing is working properly:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"/"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/a",children:"/a"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/a/b",children:"/a/b"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/a/c",children:"/a/c"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/b",children:"/b"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/b/a",children:"/b/a"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/b/c",children:"/b/c"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://localhost:8080/d",children:"/d"})}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsx)(t.p,{children:"If you try to merge RoutingServlets that have identical routes mapped, an exception would be thrown"})}),"\n",(0,n.jsx)(t.h3,{id:"blocking-servlet-example",children:"Blocking Servlet Example"}),"\n",(0,n.jsxs)(t.p,{children:["Shows how to create a new thread for processing some complex operations on a ",(0,n.jsx)(l.Z,{text:"BlockingServlet",url:"/core-http/src/main/java/io/activej/http/BlockingServlet.java"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/BlockingServletExample.java tag=EXAMPLE",children:'@Provides\nAsyncServlet servlet(Reactor reactor, Executor executor) {\n  return RoutingServlet.builder(reactor)\n    .with("/", request -> HttpResponse.ok200()\n      .withHtml("<a href=\'hardWork\'>Do hard work</a>")\n      .toPromise())\n    .with("/hardWork", AsyncServlet.ofBlocking(executor, request -> {\n      Thread.sleep(2000); //Hard work\n      return HttpResponse.ok200()\n        .withHtml("Hard work is done")\n        .build();\n    }))\n    .build();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/BlockingServletExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"file-upload-example",children:"File Upload Example"}),"\n",(0,n.jsx)(t.p,{children:"In this example user uploads a file from local storage to the server:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/FileUploadExample.java tag=EXAMPLE",children:'@Provides\nIStaticLoader staticLoader(Reactor reactor, Executor executor) {\n  return IStaticLoader.ofClassPath(reactor, executor, "static/multipart/");\n}\n\n@Provides\nAsyncServlet servlet(Reactor reactor, IStaticLoader staticLoader, Executor executor) {\n  return RoutingServlet.builder(reactor)\n    .with(GET, "/*", StaticServlet.builder(reactor, staticLoader)\n      .withIndexHtml()\n      .build())\n    .with(POST, "/test", request ->\n      request.handleMultipart(AsyncMultipartDataHandler.file(fileName -> ChannelFileWriter.open(executor, path.resolve(fileName))))\n        .then($ -> HttpResponse.ok200()\n          .withPlainText("Upload successful")\n          .toPromise()))\n    .build();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To check how the example works, open your favorite browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/FileUploadExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"client-example",children:"Client Example"}),"\n",(0,n.jsxs)(t.p,{children:["This example shows how to create an HTTP client using ",(0,n.jsx)(t.strong,{children:"Launcher"}),", predefined ",(0,n.jsx)(l.Z,{text:"HttpClient",url:"/core-http/src/main/java/io/activej/http/HttpClient.java"}),",\nand ",(0,n.jsx)(l.Z,{text:"DnsClient",url:"/core-http/src/main/java/io/activej/dns/DnsClient.java"}),"\n(maps given domains to the corresponding IP addresses):"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_1",children:'@Provides\nIHttpClient client(NioReactor reactor, IDnsClient dnsClient) {\n  return HttpClient.builder(reactor)\n    .withDnsClient(dnsClient)\n    .build();\n}\n\n@Provides\nIDnsClient dnsClient(NioReactor reactor, Config config) {\n  return DnsClient.builder(reactor)\n    .withDnsServerAddress(config.get(ofInetAddress(), "dns.address"))\n    .withTimeout(config.get(ofDuration(), "dns.timeout"))\n    .build();\n}\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["To add support for HTTPS to ",(0,n.jsx)(t.code,{children:"HttpClient"})," you need to call ",(0,n.jsx)(t.code,{children:"withSslEnabled"})," builder method and pass ",(0,n.jsx)(t.code,{children:"SSLContext"})," and ",(0,n.jsx)(t.code,{children:"Executor"})]})}),"\n",(0,n.jsxs)(t.p,{children:["Override Launcher ",(0,n.jsx)(t.code,{children:"getModule"})," method to provide needed ",(0,n.jsx)(t.a,{href:"/boot/config",children:"configs"})," and ",(0,n.jsx)(t.a,{href:"/boot/servicegraph",children:"ServiceGraph"})," dependency graph:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_2",children:'@Override\nprotected Module getModule() {\n  return combine(\n    ServiceGraphModule.create(),\n    ConfigModule.builder()\n      .withEffectiveConfigLogger()\n      .build());\n}\n\n@Provides\nConfig config() {\n  return Config.create()\n    .with("dns.address", "8.8.8.8")\n    .with("dns.timeout", "5 seconds")\n    .overrideWith(Config.ofSystemProperties("config"));\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Since our client extends ",(0,n.jsx)(t.code,{children:"Launcher"}),", it overrides method ",(0,n.jsx)(t.code,{children:"run"})," which defines the main functionality. In our case, it\nsends a request, waits for server response (either successful or failed) and then processes it:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_3",children:'@Override\nprotected void run() throws ExecutionException, InterruptedException {\n  String url = args.length != 0 ? args[0] : "http://127.0.0.1:8080/";\n  System.out.println("\\nHTTP request: " + url);\n  CompletableFuture<String> future = reactor.submit(() ->\n    httpClient.request(HttpRequest.get(url).build())\n      .then(response -> response.loadBody())\n      .map(body -> body.getString(UTF_8))\n  );\n  System.out.println("HTTP response: " + future.get());\n  System.out.println();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"reactor.submit"})," submits request sending and response receiving to the reactor. So, our main thread will wait until\n",(0,n.jsx)(t.em,{children:"future"})," in the reactor thread will return a result and only then the response will be printed out"]}),"\n",(0,n.jsxs)(t.p,{children:["To check how the client works, launch ",(0,n.jsx)(t.a,{href:"#simple-hello-world-server",children:'Simple "Hello World" Server'})," or\n",(0,n.jsx)(t.a,{href:"#custom-server",children:"Custom HTTP server"})," and then run ",(0,n.jsx)(t.strong,{children:"ClientExample"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{isInline:!0,text:"See full example on GitHub",url:"/examples/core/http/src/main/java/HttpClientExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"multipart-data-handling-example",children:"Multipart Data Handling Example"}),"\n",(0,n.jsxs)(t.p,{children:["POST requests can sometimes be encoded as ",(0,n.jsx)(t.strong,{children:"Multipart/form-data"}),". Such requests may contain multiple fields and files. The ",(0,n.jsx)(t.code,{children:"HttpRequest#handleMultipart"})," method can be used to handle a request containing multipart data. You need to pass an instance of ",(0,n.jsx)(t.code,{children:"MultipartDataHandler"})," to this method. There ",(0,n.jsx)(t.code,{children:"MultipartDataHandler"})," class contains several common handlers. You can use them to collect fields to a map, send a file to some ",(0,n.jsx)(t.code,{children:"ChannelConsumer<ByteBuf>"}),", etc. Or you can write your own ",(0,n.jsx)(t.code,{children:"MultipartDataHandler"})," if that is not enough."]}),"\n",(0,n.jsx)(t.p,{children:"In this example we will collect fields to a map end upload received files to some directory. After this we will log the collected fields and the number of uploaded files:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultipartDataHandlingExample.java tag=SERVLET",children:'@Provides\nAsyncServlet servlet(Reactor reactor) {\n  return RoutingServlet.builder(reactor)\n    .with(POST, "/handleMultipart", request -> {\n      Map<String, String> fields = new HashMap<>();\n\n      return request.handleMultipart(AsyncMultipartDataHandler.fieldsToMap(fields, this::upload))\n        .then($ -> {\n          logger.info("Received fields: {}", fields);\n          logger.info("Uploaded {} files total", fileUploadsCount);\n          return HttpResponse.ok200().toPromise();\n        });\n    })\n    .build();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To upload the received file to a file system we will use a ",(0,n.jsx)(l.Z,{text:"ChannelFileWritter",url:"/core-csp/src/main/java/io/activej/csp/file/ChannelFileWriter.java"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultipartDataHandlingExample.java tag=UPLOAD",children:"private Promise<ChannelConsumer<ByteBuf>> upload(String filename) {\n  logger.info(\"Uploading file '{}' to {}\", filename, path);\n  return ChannelFileWriter.open(executor, path.resolve(filename))\n    .map(writer -> writer.withAcknowledgement(ack ->\n      ack.whenResult(() -> {\n        logger.info(\"Upload of file '{}' finished\", filename);\n        fileUploadsCount++;\n      })));\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"Multipart/form-data"})," request is manually forged and contains several fields and files. After running the example you\nshould see a similar logging output:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"Uploading file 'data.txt' to /tmp/multipart-data-files4909047508332989372\nUpload of file 'data.txt' finished\nUploading file 'key.txt' to /tmp/multipart-data-files4909047508332989372\nUpload of file 'key.txt' finished\nReceived fields: {last name=Johnson, first name=Alice, id=12345}\nUploaded 2 files total\n"})}),"\n",(0,n.jsx)(t.p,{children:"You may inspect the directory from logging output to ensure the files are uploaded."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/MultipartDataHandlingExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"websocket-pong-server",children:"WebSocket Pong Server"}),"\n",(0,n.jsxs)(t.p,{children:['Let\'s create a "Pong" WebSocket server. To do this we need to\nprovide a ',(0,n.jsx)(t.code,{children:"RoutingServlet"})," and use ",(0,n.jsx)(t.em,{children:"withWebSocket"})," method to map a ",(0,n.jsx)(t.strong,{children:"Consumer"})," of ",(0,n.jsx)(t.strong,{children:"WebSocket"})," as a servlet on ",(0,n.jsx)(t.code,{children:"/"}),'path.\nOur server will simply receive the messages, print them out, and send back the "Pong" message.']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/WebSocketPongServerExample.java tag=EXAMPLE",children:'@Provides\nAsyncServlet servlet(Reactor reactor) {\n  return RoutingServlet.builder(reactor)\n    .withWebSocket("/", webSocket -> webSocket.readMessage()\n      .whenResult(message -> System.out.println("Received:" + message.getText()))\n      .then(() -> webSocket.writeMessage(Message.text("Pong")))\n      .whenComplete(webSocket::close))\n    .build();\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/WebSocketPongServerExample.java"})})}),"\n",(0,n.jsx)(t.h3,{id:"websocket-ping-client",children:"WebSocket Ping Client"}),"\n",(0,n.jsx)(t.p,{children:'Now let\'s create a client that will send a "Ping" message to server via a WebSocket connection.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/WebSocketPingClientExample.java tag=EXAMPLE",children:'@Override\nprotected void run() throws ExecutionException, InterruptedException {\n  String url = args.length != 0 ? args[0] : "ws://127.0.0.1:8080/";\n  System.out.println("\\nWeb Socket request: " + url);\n  CompletableFuture<?> future = reactor.submit(() -> {\n    System.out.println("Sending: Ping");\n    return webSocketClient.webSocketRequest(HttpRequest.get(url).build())\n      .then(webSocket -> webSocket.writeMessage(Message.text("Ping"))\n        .then(webSocket::readMessage)\n        .whenResult(message -> System.out.println("Received: " + message.getText()))\n        .whenComplete(webSocket::close));\n  });\n  future.get();\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["First, we create a supplier and override its ",(0,n.jsx)(t.code,{children:"get"})," method using lambda. Here we call ",(0,n.jsx)(t.code,{children:"IWebSocketClient.webSocketRequest"})," that sends a request and returns a Promise of a ",(0,n.jsx)(l.Z,{url:"/core-http/src/main/java/io/activej/http/IWebSocket.java",children:(0,n.jsx)(t.code,{children:"IWebSocket"})}),". Then we create a ",(0,n.jsx)(t.code,{children:"Function"}),' that sends a "Ping" message and receives a response from server.']}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"#",children:(0,n.jsx)(l.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/WebSocketPingClientExample.java"})})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},7618:(e,t,r)=>{r.d(t,{Z:()=>l});r(7294);var n=r(9962),a=r(5893);const l=e=>{let{url:t,text:r,isInline:l=!0,children:s}=e;const{siteConfig:i}=(0,n.Z)(),o=t.startsWith("/examples")?i.customFields.githubExamplesBranch:i.customFields.githubBranch;return(0,a.jsx)("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:i.customFields.githubUrl+"/"+o+t,target:"_blank",children:r||s})}},7815:(e,t,r)=>{r.d(t,{Z:()=>a});r(7294);var n=r(9962);const a=e=>{let{name:t}=e;const{siteConfig:r}=(0,n.Z)();if(!t)throw new Error("Variable name is required");if(void 0===r.customFields[t])throw new Error(`Variable ${t} not exist`);return r.customFields[t]}},1151:(e,t,r)=>{r.d(t,{Z:()=>i,a:()=>s});var n=r(7294);const a={},l=n.createContext(a);function s(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);
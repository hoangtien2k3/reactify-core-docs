"use strict";(self.webpackChunkReactifydocs=self.webpackChunkReactifydocs||[]).push([[9750],{38:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>h,default:()=>x,frontMatter:()=>c,metadata:()=>p,toc:()=>m});var o=n(5893),t=n(1151),i=n(4304),a=n(7618),s=n(4277),l=n(9524),d=n(7815);const c={title:"Reactify | Workers, overcome the complexities and overheads of multithreaded programming model",sidebar_label:"Workers",description:"Reactify Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",sidebar_position:3},h="Workers",p={id:"boot/workers",title:"Reactify | Workers, overcome the complexities and overheads of multithreaded programming model",description:"Reactify Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",source:"@site/docs/boot/workers.mdx",sourceDirName:"boot",slug:"/boot/workers",permalink:"/boot/workers",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Reactify | Workers, overcome the complexities and overheads of multithreaded programming model",sidebar_label:"Workers",description:"Reactify Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",sidebar_position:3},sidebar:"docs",previous:{title:"Service Graph",permalink:"/boot/servicegraph"},next:{title:"Config",permalink:"/boot/config"}},u={},m=[{value:"Overview",id:"overview",level:2},{value:"Reactify&#39;s threading model",id:"Reactifys-threading-model",level:2},{value:"Examples",id:"examples",level:2}];function v(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"workers",children:"Workers"}),"\n",(0,o.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(r.p,{children:["Workers (particularly ",(0,o.jsx)(a.Z,{url:"/boot-workers/src/main/java/io/Reactify/worker/WorkerPoolModule.java",children:(0,o.jsx)(r.code,{children:"WorkerPoolModule"})}),") is a convenient way to\ninject multiple dependencies of the same type. It is useful when you need, for example, the same set of dependencies for each thread. Reactify relies heavily on workers\nto implement multithreading. Workers are the core of Reactify's threading model."]}),"\n",(0,o.jsx)(r.h2,{id:"Reactifys-threading-model",children:"Reactify's threading model"}),"\n",(0,o.jsxs)(r.p,{children:["The primary goal of Reactify is to create a fast, scalable, easy-to-use, and high-abstraction level I/O async\nprogramming model.\nTo achieve this goal, Reactify's design principles overcome the performance overhead and complexities of the traditional\nmultithreaded programming model, but still take full advantage of Java's multithreading capabilities.\nReactify offers means of splitting the application into a ",(0,o.jsx)(r.code,{children:"Primary Reactor"})," thread and ",(0,o.jsx)(r.code,{children:"Worker Reactor"})," threads. These threads communicate with each other via message passing and thread-safe application-specific\nsingleton services."]}),"\n",(0,o.jsxs)(r.p,{children:["An implementation of a ",(0,o.jsx)(r.code,{children:"Reactor"})," in Reactify is an ",(0,o.jsx)(r.a,{href:"/async-io/eventloop",children:(0,o.jsx)(r.code,{children:"Eventloop"})}),". ",(0,o.jsx)(r.code,{children:"Eventloop"})," thread is essentially a single-threaded mini-application\n that handles its share of I/O tasks and executes Runnables submitted from other threads.\nPrimary Reactor threads distribute and balance I/O tasks between Worker threads."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultithreadedHttpServerExample.java tag=EXAMPLE",children:'public final class MultithreadedHttpServerExample extends MultithreadedHttpServerLauncher {\n  @Provides\n  @Worker\n  AsyncServlet servlet(@WorkerId int workerId) {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello from worker server #" + workerId + "\\n")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    MultithreadedHttpServerExample example = new MultithreadedHttpServerExample();\n    example.launch(args);\n  }\n}\n'})}),"\n",(0,o.jsx)(r.p,{children:"And its dependency graph looks as follows:"}),"\n",(0,o.jsx)(i.Z,{chart:'\ngraph\n    subgraph "@Worker()"\n    id1(HTTPServer) --\x3e id2(Reactor)\n    id1 --\x3e id3(Async Servlet)\n    id3 --\x3e id4("@WorkerId() int")\n    end\n    id2 -.-> ThrottlingController\n    id2 --\x3e id5(Config)\n    id1 --\x3e id5\n    id9 --\x3e id5\n    id6(Reactor) --\x3e id5\n    id7(Primary Server) --\x3e id5\n    id7 --\x3e id6\n    id7 --\x3e id8(WorkerPool$Instances)\n    id8 --\x3e id9(WorkerPool)\n    id9 --\x3e id10(WorkerPools)\n    id10 --\x3e Injector\n'}),"\n",(0,o.jsxs)(r.p,{children:["As you can see, the root ",(0,o.jsx)(a.Z,{url:"/core-inject/src/main/java/io/Reactify/inject/Injector.java",children:(0,o.jsx)(r.code,{children:"Injector"})}),"\nsimply \u2018enters\u2019 the worker scope ",(0,o.jsx)(r.code,{children:"N"})," times, so we have ",(0,o.jsx)(r.code,{children:"N"})," ",(0,o.jsx)(r.code,{children:"Injector"}),"s with identical bindings/dependency graphs, but\ndifferent containers of instances. Each time we need to create some ",(0,o.jsx)(r.em,{children:"worker"})," instances, they are created ",(0,o.jsx)(r.code,{children:"N"})," times by\neach ",(0,o.jsx)(r.em,{children:"injector"})," and returned as a vector of ",(0,o.jsx)(r.code,{children:"N"})," instances."]}),"\n",(0,o.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(r.admonition,{type:"note",children:[(0,o.jsx)(r.p,{children:"To run the examples, you need to clone Reactify from GitHub"}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,o.jsxs)(r.p,{children:["And import it as a Maven project. Check out tag ",(0,o.jsx)(r.strong,{children:(0,o.jsx)(d.Z,{name:"currentVersion"})}),". Before running the examples, build the project.\nThese examples are located at ",(0,o.jsx)(r.code,{children:"Reactify/examples/core/boot"})]})]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:(0,o.jsx)(a.Z,{url:"/examples/core/boot/src/main/java/MultithreadedWorkerCollab.java",children:"See full example on GitHub"})})})]})}function x(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}},7618:(e,r,n)=>{n.d(r,{Z:()=>i});n(7294);var o=n(9962),t=n(5893);const i=e=>{let{url:r,text:n,isInline:i=!0,children:a}=e;const{siteConfig:s}=(0,o.Z)(),l=r.startsWith("/examples")?s.customFields.githubExamplesBranch:s.customFields.githubBranch;return(0,t.jsx)("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+l+r,target:"_blank",children:n||a})}},4304:(e,r,n)=>{n.d(r,{Z:()=>a});var o=n(7294),t=n(6365),i=n(5893);t.L.initialize({startOnLoad:!0});const a=e=>{let{chart:r}=e;return(0,o.useEffect)((()=>{t.L.contentLoaded()}),[]),(0,i.jsx)("div",{className:"mermaid",children:r})}},7815:(e,r,n)=>{n.d(r,{Z:()=>t});n(7294);var o=n(9962);const t=e=>{let{name:r}=e;const{siteConfig:n}=(0,o.Z)();if(!r)throw new Error("Variable name is required");if(void 0===n.customFields[r])throw new Error(`Variable ${r} not exist`);return n.customFields[r]}}}]);
"use strict"; (self.webpackChunkactivejdocs = self.webpackChunkactivejdocs || []).push([[8776], { 8462: (e, n, i) => { i.r(n), i.d(n, { assets: () => l, contentTitle: () => t, default: () => p, frontMatter: () => o, metadata: () => s, toc: () => c }); var r = i(5893), a = i(1151); const o = { title: "Reactify-Core | Deploying Reactify-Core using Docker", sidebar_label: "Reactify-Core + Docker + AWS", keywords: ["java", "java for beginners", "java framework", "guide", "tutorial", "web application", "async", "server", "spring", "spring alternative", "netty alternative", "jetty alternative", "aws", "amazon web services", "docker", "docker image", "deploy"], description: "Step-by-step guide of deploying an HTTP server written in Java to AWS using Docker." }, t = "Deploying Reactify-Core using Docker", s = { id: "tutorials/getting-started-advanced", title: "Reactify-Core | Deploying Reactify-Core using Docker", description: "Step-by-step guide of deploying an HTTP server written in Java to AWS using Docker.", source: "@site/docs/tutorials/getting-started-advanced.mdx", sourceDirName: "tutorials", slug: "/tutorials/getting-started-advanced", permalink: "/tutorials/getting-started-advanced", draft: !1, unlisted: !1, tags: [], version: "current", frontMatter: { title: "Reactify-Core | Deploying Reactify-Core using Docker", sidebar_label: "Reactify-Core + Docker + AWS", keywords: ["java", "java for beginners", "java framework", "guide", "tutorial", "web application", "async", "server", "spring", "spring alternative", "netty alternative", "jetty alternative", "aws", "amazon web services", "docker", "docker image", "deploy"], description: "Step-by-step guide of deploying an HTTP server written in Java to AWS using Docker." }, sidebar: "tutorials", previous: { title: "Getting Started", permalink: "/tutorials/getting-started" }, next: { title: "Reactify-Core + GraalVM native image", permalink: "/tutorials/native-image" } }, l = {}, c = [{ value: "1. Assemble JAR-file", id: "1-assemble-jar-file", level: 2 }, { value: "2. Wrap it as a Docker image", id: "2-wrap-it-as-a-docker-image", level: 2 }, { value: "3. Deploying your application to the cloud (AWS, as an example)", id: "3-deploying-your-application-to-the-cloud-aws-as-an-example", level: 2 }, { value: "4. Deploying Docker container", id: "4-deploying-docker-container", level: 2 }]; function d(e) { const n = { a: "a", admonition: "admonition", code: "code", em: "em", h1: "h1", h2: "h2", li: "li", p: "p", pre: "pre", strong: "strong", ul: "ul", ...(0, a.a)(), ...e.components }; return (0, r.jsxs)(r.Fragment, { children: [(0, r.jsx)(n.h1, { id: "deploying-activej-server-to-aws-using-docker", children: "Deploying Reactify-Core using Docker" }), "\n", (0, r.jsxs)(n.p, { children: ["In this tutorial we will deploy the HTTP Server from the ", (0, r.jsx)(n.a, { href: "/tutorials/getting-started", children: "getting started tutorial" }), " to AWS. We will use Docker for this purpose."] }), "\n", (0, r.jsx)(n.h2, { id: "1-assemble-jar-file", children: "1. Assemble JAR-file" }), "\n", (0, r.jsxs)(n.p, { children: ["Open your ", (0, r.jsx)(n.a, { href: "/tutorials/getting-started", children: "server's" }), " ", (0, r.jsx)(n.code, { children: "pom.xml" }), " file and insert this config:"] }), "\n", (0, r.jsx)(n.pre, { children: (0, r.jsx)(n.code, { className: "language-xml", children: '<build>\n    <plugins>\n        \x3c!-- Make this jar executable --\x3e\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                    <configuration>\n                        <transformers>\n                            <transformer\n                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">\n                                <mainClass>HttpHelloWorldExample</mainClass>\n                            </transformer>\n                        </transformers>\n                        <finalName>HelloWorldExample</finalName>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n' }) }), "\n", (0, r.jsx)(n.p, { children: "Next, type the following commands:" }), "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsx)(n.li, { children: (0, r.jsx)(n.code, { children: "mvn clean" }) }), "\n", (0, r.jsx)(n.li, { children: (0, r.jsx)(n.code, { children: "mvn package -DskipTests=true" }) }), "\n"] }), "\n", (0, r.jsxs)(n.p, { children: ["These actions will produce a ", (0, r.jsx)(n.strong, { children: "HelloWorldExample.jar" }), " archive. You can find it in the ", (0, r.jsx)(n.code, { children: "target" }), " folder of your project. It is a typical way to distribute and run Java applications."] }), "\n", (0, r.jsx)(n.h2, { id: "2-wrap-it-as-a-docker-image", children: "2. Wrap it as a Docker image" }), "\n", (0, r.jsxs)(n.p, { children: ["If you don't have Docker installed on your machine, you can follow ", (0, r.jsx)(n.a, { href: "https://www.docker.com/get-started", children: "this guide" }), "."] }), "\n", (0, r.jsx)(n.p, { children: "Docker is a de-facto standard for deploying any cloud-based application.\nWe are following this standard and propose you to wrap your Reactify-Core application as a Docker image." }), "\n", (0, r.jsxs)(n.p, { children: ["For that, you need to create a ", (0, r.jsx)(n.code, { children: "Dockerfile" }), " in the root directory of your project.\nHere is a minimal ", (0, r.jsx)(n.strong, { children: "Dockerfile" }), " example:"] }), "\n", (0, r.jsx)(n.pre, { children: (0, r.jsx)(n.code, { className: "language-dockerfile", children: "FROM amazoncorretto:17.0.3 as builder \nWORKDIR application \nARG JAR_FILE=target/*.jar \nCOPY ${JAR_FILE} application.jar \nRUN java -Djarmode=layertools -jar application.jar extract \n\nFROM amazoncorretto:17.0.4 \nLABEL com.ezbuy.ecom.auth.version=\"1.0.0\" \nLABEL version=\"1.0.0\" \nLABEL description=\"auth service\" \nLABEL author=\"Ezbuy Flatform\" \nWORKDIR application \n\n#timezone +7\nENV TZ=Asia/Ho_Chi_Minh \nCOPY --from=builder application/dependencies/ ./ \nCOPY --from=builder application/spring-boot-loader/ ./ \nCOPY --from=builder application/snapshot-dependencies/ ./ \nCOPY --from=builder application/application/ ./ \nEXPOSE 8089 \nENTRYPOINT [\"java\", \"org.springframework.boot.loader.JarLauncher\"]\n" }) }), "\n", (0, r.jsx)(n.admonition, { type: "note", children: (0, r.jsx)(n.p, { children: "This application uses JDK/JRE 17 with Linux Amazon Corretto" }) }), "\n", (0, r.jsx)(n.p, { children: "Short logic description:" }), "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsx)(n.li, { children: "First of all, we should build our application. It copies all necessary data for JAR file creation and builds it." }), "\n", (0, r.jsxs)(n.li, { children: ["Later, it moves JAR file to the application root and launches it on port ", (0, r.jsx)(n.code, { children: "8080" }), "."] }), "\n"] }), "\n", (0, r.jsxs)(n.p, { children: ["You can build it using the following command: ", (0, r.jsx)(n.code, { children: "docker build -t reactify-app ." }), ", and run this image on docker daemon: ", (0, r.jsx)(n.code, { children: "docker run --rm -p8080:8080 reactify-app" }), ".\nAll actions will be the same if you are using ", (0, r.jsx)(n.strong, { children: "docker-machine" }), "."] }), "\n", (0, r.jsx)(n.h2, { id: "3-deploying-your-application-to-the-cloud-aws-as-an-example", children: "3. Deploying your application to the cloud (AWS, as an example)" }), "\n", (0, r.jsx)(n.p, { children: "First of all, you should own an Amazon AWS EC2 account and have a running EC2 instance." }), "\n", (0, r.jsx)(n.p, { children: "Here is a guide on how to deploy your application (not Docker image):" }), "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsxs)(n.li, { children: ["Download your Amazon key (", (0, r.jsx)(n.em, { children: "key_name.pem" }), ")."] }), "\n", (0, r.jsxs)(n.li, { children: ["Execute ", (0, r.jsx)(n.code, { children: "chmod 400 key_name.pem" }), " for granting read-only property to this file."] }), "\n", (0, r.jsxs)(n.li, { children: ["Connect to your EC2 instance via ", (0, r.jsx)(n.code, { children: "ssh" }), ":\n", (0, r.jsx)(n.code, { children: "ssh -i key_name.pem user@instance-id" })] }), "\n", (0, r.jsxs)(n.li, { children: ["Open new Terminal/iTerm tab and try to send your JAR file via FTP protocol:\n", (0, r.jsx)(n.code, { children: " scp -i key_name.pem your/app/path/HelloWorldServer.jar ubuntu@instance-id:" })] }), "\n", (0, r.jsx)(n.li, { children: "Wait until your file uploads." }), "\n", (0, r.jsxs)(n.li, { children: ["Run ", (0, r.jsx)(n.code, { children: "java -jar HelloWorld.jar" }), " in your ssh tab."] }), "\n"] }), "\n", (0, r.jsx)(n.p, { children: "Voila! You are running your application on AWS instance. Check it out on your IP address." }), "\n", (0, r.jsx)(n.h2, { id: "4-deploying-docker-container", children: "4. Deploying Docker container" }), "\n", (0, r.jsx)(n.p, { children: "Here is a guide on how to deploy your Docker image:" }), "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsxs)(n.li, { children: ["Download your Amazon key (", (0, r.jsx)(n.em, { children: "key_name.pem" }), ")."] }), "\n", (0, r.jsxs)(n.li, { children: ["Execute ", (0, r.jsx)(n.code, { children: "chmod 400 key_name.pem" }), " for granting read-only property to this file."] }), "\n", (0, r.jsxs)(n.li, { children: ["Transform Docker image to ", (0, r.jsx)(n.code, { children: "tar" }), " archive : ", (0, r.jsx)(n.code, { children: "sudo docker save reactify-app >> reactify-app.tar" })] }), "\n", (0, r.jsxs)(n.li, { children: ["Connect to your EC2 instance via ", (0, r.jsx)(n.code, { children: "ssh" }), " :\n", (0, r.jsx)(n.code, { children: "ssh -i key_name.pem user@instance-id" })] }), "\n", (0, r.jsx)(n.li, { children: "Open new Terminal/iTerm tab and try to send your JAR file via FTP protocol:" }), "\n"] }), "\n", (0, r.jsx)(n.p, { children: (0, r.jsx)(n.code, { children: " scp -i key_name.pem your/image/path/reactify-app.tar ubuntu@instance-id:" }) }), "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsx)(n.li, { children: "Wait until your file uploads." }), "\n", (0, r.jsxs)(n.li, { children: ["Run such commands in your ssh tab:", "\n", (0, r.jsxs)(n.ul, { children: ["\n", (0, r.jsxs)(n.li, { children: [(0, r.jsx)(n.code, { children: "sudo apt-get update -y" }), " to update cloud repository of Linux system."] }), "\n", (0, r.jsxs)(n.li, { children: [(0, r.jsx)(n.code, { children: "sudo apt-get install -y docker.io" }), " to install Docker."] }), "\n", (0, r.jsxs)(n.li, { children: [(0, r.jsx)(n.code, { children: "dockerd" }), " to launch Docker daemon."] }), "\n", (0, r.jsxs)(n.li, { children: [(0, r.jsx)(n.code, { children: "docker load -i reactify-app.tar" }), " to unzip archived image."] }), "\n", (0, r.jsxs)(n.li, { children: [(0, r.jsx)(n.code, { children: "docker run -p 8080:8080 reactify-app" }), " to launch your application in Docker container."] }), "\n"] }), "\n"] }), "\n"] }), "\n", (0, r.jsx)(n.p, { children: "Hurray! You are running your Docker image with the Reactify-Core app on AWS instance.\nCheck it out on your IP address." })] }) } function p(e = {}) { const { wrapper: n } = { ...(0, a.a)(), ...e.components }; return n ? (0, r.jsx)(n, { ...e, children: (0, r.jsx)(d, { ...e }) }) : d(e) } }, 1151: (e, n, i) => { i.d(n, { Z: () => s, a: () => t }); var r = i(7294); const a = {}, o = r.createContext(a); function t(e) { const n = r.useContext(o); return r.useMemo((function () { return "function" == typeof e ? e(n) : { ...n, ...e } }), [n, e]) } function s(e) { let n; return n = e.disableParentContext ? "function" == typeof e.components ? e.components(a) : e.components || a : t(e.components), r.createElement(o.Provider, { value: n }, e.children) } } }]);
"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[93],{4892:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var t=r(5893),a=r(1151),s=(r(7815),r(7618));const i={keywords:["java","java framework","tutorial","guide","rpc","client-server","web application","key-value storage"],sidebar_label:"Key-Value Storage",description:"A key-value storage with high performance RPC communication protocol"},l="Key-Value Storage",o={id:"rpc/key-value-storage",title:"Key-Value Storage",description:"A key-value storage with high performance RPC communication protocol",source:"@site/docs/rpc/key-value-storage.mdx",sourceDirName:"rpc",slug:"/rpc/key-value-storage",permalink:"/rpc/key-value-storage",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{keywords:["java","java framework","tutorial","guide","rpc","client-server","web application","key-value storage"],sidebar_label:"Key-Value Storage",description:"A key-value storage with high performance RPC communication protocol"},sidebar:"docs",previous:{title:"Basic Examples",permalink:"/rpc/basic-examples"},next:{title:"Memcached-like Application",permalink:"/rpc/memcached-like-application"}},c={},u=[{value:"What you will need:",id:"what-you-will-need",level:2},{value:"Working Example",id:"working-example",level:2},{value:"Source code",id:"source-code",level:3},{value:"Basic app functionality",id:"basic-app-functionality",level:4},{value:"Client and server",id:"client-and-server",level:4},{value:"Testing",id:"testing",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"key-value-storage",children:"Key-Value Storage"}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial, we will look at a remote key-value storage that has 2 basic operations: ",(0,t.jsx)(n.code,{children:"put"})," and ",(0,t.jsx)(n.code,{children:"get"}),". When\nwriting distributed applications, the question often arises about which protocol to use for communication. There are two main\noptions:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"HTTP/REST"}),"\n",(0,t.jsx)(n.li,{children:"RPC"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Although HTTP is more popular and well specified, it has some overhead. When performance is an important aspect of an application,\nyou need to use something faster. ActiveJ RPC was developed for this purpose, based on\nfast serializers and an optimized communication protocol, which significantly improves application performance."}),"\n",(0,t.jsx)(n.h2,{id:"what-you-will-need",children:"What you will need:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"IDE or terminal"}),"\n",(0,t.jsx)(n.li,{children:"JDK 17+"}),"\n",(0,t.jsx)(n.li,{children:"Maven 3.0+"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To proceed with this guide you have need to download and run a ",(0,t.jsx)(n.a,{href:"#working-example",children:"working example"})]}),"\n",(0,t.jsx)(n.h2,{id:"working-example",children:"Working Example"}),"\n",(0,t.jsxs)(n.p,{children:["First of all, ",(0,t.jsx)(n.a,{href:"https://github.com/hoangtien2k3/reactify-core/tree/examples-6.0-beta2",children:"clone ActiveJ project"})," locally:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone -b examples-6.0-beta2 https://github.com/hoangtien2k3/reactify-core.git\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then open the project in your IDE of choice. Before running the example, build the project (",(0,t.jsx)(n.strong,{children:"Ctrl + F9"})," for IntelliJ IDEA)."]}),"\n",(0,t.jsxs)(n.p,{children:["If you want to skip source code explanation, you can go straight to ",(0,t.jsx)(n.a,{href:"#testing",children:"testing"})," section."]}),"\n",(0,t.jsx)(n.h3,{id:"source-code",children:"Source code"}),"\n",(0,t.jsx)(n.h4,{id:"basic-app-functionality",children:"Basic app functionality"}),"\n",(0,t.jsxs)(n.p,{children:["Since we need to implement two basic operations (",(0,t.jsx)(n.code,{children:"put"})," and ",(0,t.jsx)(n.code,{children:"get"}),"), let's start with the message classes that are used to communicate between client and server, namely ",(0,t.jsx)(s.Z,{text:"PutRequest",url:"/examples/tutorials/rpc-kv-storage/src/main/java/PutRequest.java"}),", ",(0,t.jsx)(s.Z,{text:"PutResponse",url:"/examples/tutorials/rpc-kv-storage/src/main/java/PutResponse.java"}),", ",(0,t.jsx)(s.Z,{text:"GetRequest",url:"/examples/tutorials/rpc-kv-storage/src/main/java/GetRequest.java"}),", and ",(0,t.jsx)(s.Z,{text:"GetResponse",url:"/examples/tutorials/rpc-kv-storage/src/main/java/GetResponse.java"}),".\nInstances of these classes are serialized using a lightning-fast serializer library ",(0,t.jsx)(n.a,{href:"/serializer",children:"ActiveJ Serializer"}),". Since all these classes are Java records we can add ",(0,t.jsx)(n.code,{children:"@SerializeRecord"})," annotation on top of each class in order to instruct ActiveJ Serializer how to serialize/deserialize classes.\nMessage classes look like these:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/PutRequest.java tag=EXAMPLE",children:"@SerializeRecord\npublic record PutRequest(String key, String value) {}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/PutResponse.java tag=EXAMPLE",children:"@SerializeRecord\npublic record PutResponse(@SerializeNullable String previousValue) {}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/GetRequest.java tag=EXAMPLE",children:"@SerializeRecord\npublic record GetRequest(String key) {}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/GetResponse.java tag=EXAMPLE",children:"@SerializeRecord\npublic record GetResponse(@SerializeNullable String value) {}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, let's look at a simple implementation of a key-value storage, the ",(0,t.jsx)(s.Z,{text:"KeyValueStore",url:"/examples/tutorials/rpc-kv-storage/src/main/java/KeyValueStore.java"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/KeyValueStore.java tag=EXAMPLE",children:"public class KeyValueStore {\n\n  private final Map<String, String> store = new HashMap<>();\n\n  public String put(String key, String value) {\n    return store.put(key, value);\n  }\n\n  public String get(String key) {\n    return store.get(key);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A key-value store is very minimalistic. It uses a regular Java's ",(0,t.jsx)(n.code,{children:"Map"})," to store keys with corresponding values."]}),"\n",(0,t.jsx)(n.h4,{id:"client-and-server",children:"Client and server"}),"\n",(0,t.jsxs)(n.p,{children:["Now let's look at the ",(0,t.jsx)(s.Z,{text:"AbstractModule",url:"/core-inject/src/main/java/io/activej/inject/module/AbstractModule.java"})," for the RPC server, which uses the ",(0,t.jsx)(n.a,{href:"/inject",children:"ActiveJ Inject"})," dependency injection library to handle ",(0,t.jsx)(n.code,{children:"get"})," and ",(0,t.jsx)(n.code,{children:"put"})," requests."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/ServerModule.java tag=EXAMPLE",children:"public class ServerModule extends AbstractModule {\n  private static final int RPC_SERVER_PORT = 5353;\n\n  @Provides\n  NioReactor reactor() {\n    return Eventloop.builder()\n      .withFatalErrorHandler(rethrow())\n      .build();\n  }\n\n  @Provides\n  KeyValueStore keyValueStore() {\n    return new KeyValueStore();\n  }\n\n  @Provides\n  RpcServer rpcServer(NioReactor reactor, KeyValueStore store) {\n    return RpcServer.builder(reactor)\n      .withMessageTypes(PutRequest.class, PutResponse.class, GetRequest.class, GetResponse.class)\n      .withHandler(PutRequest.class, req -> Promise.of(new PutResponse(store.put(req.key(), req.value()))))\n      .withHandler(GetRequest.class, req -> Promise.of(new GetResponse(store.get(req.key()))))\n      .withListenPort(RPC_SERVER_PORT)\n      .build();\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, to properly define the ",(0,t.jsx)(s.Z,{text:"RpcServer",url:"/cloud-rpc/src/main/java/io/activej/rpc/server/RpcServer.java"}),", we specified all the message classes that are sent between client and server, and specified the corresponding ",(0,t.jsx)(s.Z,{text:"RpcRequestHandler",url:"/cloud-rpc/src/main/java/io/activej/rpc/server/RpcRequestHandler.java"})," for each request class."]}),"\n",(0,t.jsx)(n.p,{children:"We have specified them as the second arguments in these lines, using lambdas."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:".withHandler(PutRequest.class, req -> Promise.of(new PutResponse(store.put(req.key(), req.value()))))\n.withHandler(GetRequest.class, req -> Promise.of(new GetResponse(store.get(req.key()))))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We also need to specify message types (",(0,t.jsx)(n.code,{children:"PutRequest"}),", ",(0,t.jsx)(n.code,{children:"PutResponse"}),", ",(0,t.jsx)(n.code,{children:"GetRequest"}),", ",(0,t.jsx)(n.code,{children:"GetResponse"}),") that will be  used for\nRPC communication:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"...\n.withMessageTypes(PutRequest.class, PutResponse.class, GetRequest.class, GetResponse.class)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Order of message types matters and should match on server and client side."}),"\n",(0,t.jsxs)(n.p,{children:["Next, let's look at the ",(0,t.jsx)(s.Z,{url:"/examples/tutorials/rpc-kv-storage/src/main/java/ServerLauncher.java",children:(0,t.jsx)(n.code,{children:"ServerLauncher"})})," for the RPC server. The ",(0,t.jsx)(n.a,{href:"/boot/launcher",children:"ActiveJ Launcher"})," is used here to manage the lifecycle of the application:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/ServerLauncher.java tag=EXAMPLE",children:"public class ServerLauncher extends Launcher {\n  @Inject\n  private RpcServer server;\n\n  @Override\n  protected Module getModule() {\n    return combine(\n      ServiceGraphModule.create(),\n      new ServerModule());\n  }\n\n  @Override\n  protected void run() throws Exception {\n    awaitShutdown();\n  }\n\n  public static void main(String[] args) throws Exception {\n    ServerLauncher launcher = new ServerLauncher();\n    launcher.launch(args);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Since we extended ",(0,t.jsx)(n.strong,{children:"Launcher"})," class, we also had to override 2 methods: ",(0,t.jsx)(n.em,{children:"getModule()"})," to provide ",(0,t.jsx)(n.a,{href:"/boot/servicegraph",children:"ServiceGraphModule"})," and ",(0,t.jsx)(n.em,{children:"run()"})," to describe the main logic of the example."]}),"\n",(0,t.jsxs)(n.p,{children:["Now let's look at the RPC client. We have once again specified all the message classes that are used for communication, and we have specified the ",(0,t.jsx)(n.a,{href:"/rpc/basic-examples#round-robin-strategy",children:"RPC strategy"}),". All strategies can be combined, but since we have only one server, we use a ",(0,t.jsx)(s.Z,{text:"single-server",url:"/cloud-rpc/src/main/java/io/activej/rpc/client/sender/strategy/impl/SingleServer.java"})," strategy:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/ClientModule.java tag=EXAMPLE",children:'public class ClientModule extends AbstractModule {\n  private static final int RPC_SERVER_PORT = 5353;\n\n  @Provides\n  NioReactor reactor() {\n    return Eventloop.builder()\n      .withFatalErrorHandler(rethrow())\n      .withCurrentThread()\n      .build();\n  }\n\n  @Provides\n  IRpcClient rpcClient(NioReactor reactor) {\n    return RpcClient.builder(reactor)\n      .withConnectTimeout(Duration.ofSeconds(1))\n      .withMessageTypes(PutRequest.class, PutResponse.class, GetRequest.class, GetResponse.class)\n      .withStrategy(server(new InetSocketAddress("localhost", RPC_SERVER_PORT)))\n      .build();\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Let's also take a look at the ",(0,t.jsx)(s.Z,{text:"ClientLauncher",url:"/examples/tutorials/rpc-kv-storage/src/main/java/ClientLauncher.java"}),". In the ",(0,t.jsx)(n.code,{children:"run()"})," method, we are parsing command line arguments and make appropriate requests to the ",(0,t.jsx)(n.strong,{children:"RpcServer"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"url=/examples/tutorials/rpc-kv-storage/src/main/java/ClientLauncher.java tag=EXAMPLE",children:'public class ClientLauncher extends Launcher {\n  private static final int TIMEOUT = 1000;\n\n  @Inject\n  private IRpcClient client;\n\n  @Inject\n  Reactor reactor;\n\n  @Override\n  protected Module getModule() {\n    return combine(\n      ServiceGraphModule.create(),\n      new ClientModule());\n  }\n\n  @Override\n  protected void run() throws Exception {\n    if (args.length < 2) {\n      System.err.println("Command line args:\\n\\t--put key value\\n\\t--get key");\n      return;\n    }\n\n    switch (args[0]) {\n      case "--put" -> {\n        CompletableFuture<PutResponse> future1 = reactor.submit(() ->\n          client.sendRequest(new PutRequest(args[1], args[2]), TIMEOUT)\n        );\n        PutResponse putResponse = future1.get();\n        System.out.println("PutResponse: " + putResponse);\n      }\n      case "--get" -> {\n        CompletableFuture<GetResponse> future2 = reactor.submit(() ->\n          client.sendRequest(new GetRequest(args[1]), TIMEOUT)\n        );\n        GetResponse getResponse = future2.get();\n        System.out.println("GetResponse: " + getResponse);\n      }\n      default -> throw new RuntimeException("Unsupported option: " + args[0]);\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    ClientLauncher launcher = new ClientLauncher();\n    launcher.launch(args);\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! We have finished exploring the code of this application."}),"\n",(0,t.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,t.jsxs)(n.p,{children:["First, launch the server. Open the ",(0,t.jsx)(n.code,{children:"ServerLauncher"})," class and run its ",(0,t.jsx)(n.code,{children:"main()"})," method."]}),"\n",(0,t.jsxs)(n.p,{children:["Then make a ",(0,t.jsx)(n.code,{children:"PUT"})," request. Open ",(0,t.jsx)(n.code,{children:"ClientLauncher"})," class which is located at ",(0,t.jsx)(n.code,{children:"activej/examples/tutorials/rpc-kv-storage"}),",\nand set the program arguments to ",(0,t.jsx)(n.code,{children:"--put key1 value1"}),". For IntelliJ IDEA: ",(0,t.jsx)(n.code,{children:"Run -> Edit configurations -> |Run/Debug Configurations -> |Program arguments -> --put key1 value1||"}),". Then run the ",(0,t.jsx)(n.code,{children:"main()"})," method of a launcher."]}),"\n",(0,t.jsx)(n.p,{children:"You will see the following output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"PutResponse: {previousValue='null'}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, make a ",(0,t.jsx)(n.code,{children:"GET"})," request."]}),"\n",(0,t.jsxs)(n.p,{children:["Open the ",(0,t.jsx)(n.code,{children:"ClientLauncher"})," class once again and set the program arguments to ",(0,t.jsx)(n.code,{children:"--get key1"}),". For IntelliJ IDEA: ",(0,t.jsx)(n.code,{children:"Run -> Edit configurations -> |Run/Debug Configurations -> |Program arguments -> --get key1||"}),". Then run the ",(0,t.jsx)(n.code,{children:"main()"})," method of a launcher."]}),"\n",(0,t.jsx)(n.p,{children:"You will see the following output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GetResponse: {value='value1'}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Congratulations, you have just launched a remote key-value storage based on the RPC communication protocol!"})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7618:(e,n,r)=>{r.d(n,{Z:()=>s});r(7294);var t=r(9962),a=r(5893);const s=e=>{let{url:n,text:r,isInline:s=!0,children:i}=e;const{siteConfig:l}=(0,t.Z)(),o=n.startsWith("/examples")?l.customFields.githubExamplesBranch:l.customFields.githubBranch;return(0,a.jsx)("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+o+n,target:"_blank",children:r||i})}},7815:(e,n,r)=>{r.d(n,{Z:()=>a});r(7294);var t=r(9962);const a=e=>{let{name:n}=e;const{siteConfig:r}=(0,t.Z)();if(!n)throw new Error("Variable name is required");if(void 0===r.customFields[n])throw new Error(`Variable ${n} not exist`);return r.customFields[n]}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>i});var t=r(7294);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
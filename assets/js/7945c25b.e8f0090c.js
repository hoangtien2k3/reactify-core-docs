"use strict"; (self.webpackChunkactivejdocs = self.webpackChunkactivejdocs || []).push([[2996], {
    4836: (e, t, n) => {
        n.r(t), n.d(t, { assets: () => c, contentTitle: () => o, default: () => p, frontMatter: () => s, metadata: () => l, toc: () => h }); var i = n(5893), r = n(1151), a = n(7618); n(7815);
        const s = { title: "Reactify-Core | Getting Started", sidebar_label: "Getting Started", keywords: ["java", "java for beginners", "java framework", "guide", "tutorial", "web application", "async", "spring", "spring alternative", "netty alternative", "jetty alternative", "authorization", "server", "client", "servlet"], description: "A high-performance asynchronous HTTP server in 10 lines of code using Reactify-Core Java platform.", sidebar_position: 1 }, o = "Getting Started", l = {
            id: "tutorials/getting-started", title: "Reactify-Core | Getting Started", description: "A high-performance asynchronous HTTP server in 10 lines of code using Reactify-Core Java platform.", source: "@site/docs/tutorials/getting-started.mdx", sourceDirName: "tutorials", slug: "/tutorials/getting-started", permalink: "/tutorials/getting-started", draft: !1, unlisted: !1, tags: [], version: "current", sidebarPosition: 1, frontMatter: { title: "Reactify-Core | Getting Started", sidebar_label: "Getting Started", keywords: ["java", "java for beginners", "java framework", "guide", "tutorial", "web application", "async", "spring", "spring alternative", "netty alternative", "jetty alternative", "authorization", "server", "client", "servlet"], description: "A high-performance asynchronous HTTP server in 10 lines of code using Reactify-Core Java platform.", sidebar_position: 1 },
            sidebar: "tutorials", next: { title: "Building a GraalVM native image", permalink: "/tutorials/getting-started-advanced" }
        }, c = {}, h = [{ value: "What you will need:", id: "what-you-will-need", level: 2 }, { value: "Which Reactify-Core technologies will be used:", id: "which-activej-technologies-will-be-used", level: 2 }, { value: "To proceed with this guide you have two options:", id: "to-proceed-with-this-guide-you-have-two-options", level: 2 }, { value: "1. Create from Maven Archetype", id: "1-create-from-maven-archetype", level: 2 }, { value: "2. Download and run the example", id: "2-download-and-run-the-example", level: 2 }, { value: "Source code", id: "source-code", level: 3 }, { value: "Run the app", id: "run-the-app", level: 3 }, { value: "What&#39;s next?", id: "whats-next", level: 2 }]; function d(e) {
            const t = { a: "a", code: "code", em: "em", h1: "h1", h2: "h2", h3: "h3", li: "li", ol: "ol", p: "p", pre: "pre", strong: "strong", ul: "ul", ...(0, r.a)(), ...e.components }; return (0, i.jsxs)(i.Fragment, {
                children: [(0, i.jsx)(t.h1, { id: "getting-started", children: "Getting Started" }), "\n", (0, i.jsxs)(t.p,
                    {
                        children: ["Reactify-Core is a minimalistic, boilerplate-free Java backend library designed to support reactive-programming\n in the microservices architecture.\nIt has a rich technology stack with an efficient asynchronous programming model and an opensource spring boot library. ",
                            (0, i.jsx)(t.a, { href: "/inject", children: "Reactify-Core Inject" }), "."]
                    }), "\n",
                (0, i.jsx)(t.p, { children: "Reactify-Core consists of several loosely coupled components that complement and support each other: an asynchronous core, efficient I/O handling, \nhigh performance in a microservice backend, along with handy starter utilities." }), "\n", (0, i.jsxs)(t.p,
                    { children: ["This library supports Spring Boot version 3.x and above, using Spring Webflux \u201creactor-core !\u201d \n", ", particularly ", (0, i.jsx)(t.code, { children: "reactify-core" }), " in particular, it supports functional programming, \nmaking it simple and highly efficient."] }), "\n", (0, i.jsx)(t.h2, { id: "what-you-will-need", children: "What you will need:" }),
                    "\n", (0, i.jsxs)(t.ul, {
                        children: ["\n", (0, i.jsx)(t.li, { children: "5-10 minutes" }), "\n", (0, i.jsx)(t.li,
                            { children: "Your favorite IDE (Intellij recommended)" }), "\n", (0, i.jsx)(t.li, { children: (0, i.jsx)(t.a, { href: "https://www.oracle.com/java/technologies/javase-downloads.html", children: "JDK 17+" }) }), "\n", (0, i.jsx)(t.li, { children: (0, i.jsx)(t.a, { href: "https://maven.apache.org/download.cgi", children: "Maven 3.0+" }) }), "\n"]
                    }), "\n", (0, i.jsx)(t.h2, {
                        id: "which-activej-technologies-will-be-used",
                        children: "Which Reactify-Core technologies will be used:"
                    }), "\n", (0, i.jsxs)(t.ul, {
                        children: ["\n", (0, i.jsx)(t.li, { children: (0, i.jsx)(t.a, { href: "/http", children: "Reactify-Core HTTP" }) }), "\n", (0, i.jsx)(t.li, { children: (0, i.jsx)(t.a, { href: "/async-io/promise", children: "Reactify-Core Promises" }) }), "\n", (0, i.jsx)(t.li, { children: (0, i.jsx)(t.a, { href: "/inject", children: "Reactify-Core Inject" }) }),
                            "\n"]
                    }), "\n", (0, i.jsx)(t.h2, { id: "to-proceed-with-this-guide-you-have-two-options", children: "To proceed with this guide you have two options:" }), "\n", (0, i.jsxs)(t.ol, {
                        children: ["\n", (0, i.jsxs)(t.li,
                            { children: ["Create the app from Maven ", (0, i.jsx)(t.a, { href: "#1-create-from-maven-archetype", children: "archetype" })] }), "\n", (0, i.jsxs)(t.li, { children: ["Download and run ", (0, i.jsx)(t.a, { href: "#2-download-and-run-the-example", children: "working example" })] }), "\n"]
                    }), "\n", (0, i.jsx)(t.h2, { id: "1-create-from-maven-archetype", children: "1. Create from Maven Archetype" }), "\n", (0, i.jsx)(t.p, { children: "Add gradle or maven to pom file:" }), "\n", (0, i.jsx)(t.pre, { children: (0, i.jsx)(t.code, { className: "language-bash", children: "dependencies {\n    implementation('io.github.hoangtien2k3:reactify-core:1.1.7')\n}\n" }) }), "\n", (0, i.jsx)(t.pre, { children: (0, i.jsx)(t.code, { className: "language-bash", children: "<dependency>\n    <groupId>io.github.hoangtien2k3</groupId>\n    <artifactId>reactify-core</artifactId>\n    <version>1.1.7</version>\n</dependency>\n" }) }), "\n", (0, i.jsxs)(t.p, { children: ["The project will be automatically generated on your machine. Open ", (0, i.jsx)(t.strong, { children: "WebApp" }), " and run its ", (0, i.jsx)(t.em, { children: "main" }), " method. Then\nopen your favourite browser and go to ", (0, i.jsx)(t.a, { href: "http://localhost:8080", children: "localhost:8080" })] }), "\n", (0, i.jsx)(t.h2, {
                        id: "2-download-and-run-the-example",
                        children: "2. Download and run the example"
                    }), "\n", (0, i.jsxs)(t.p, { children: ["First, ", (0, i.jsx)(t.a, { href: "https://github.com/hoangtien2k3/keycloak-auth-service", children: "clone example implement reactify-core" }), " locally:"] }), "\n", (0, i.jsx)(t.pre, { children: (0, i.jsx)(t.code, { className: "language-bash", children: "git clone -b main https://github.com/hoangtien2k3/keycloak-auth-service.git\n" }) }), "\n", (0, i.jsxs)(t.p, {
                        children: ["Then open the project in your IDE of choice. Before running the example, build the project (", (0, i.jsx)(t.strong, { children: "Ctrl + F9" }),
                            " for IntelliJ IDEA)."]
                    }), "\n", (0, i.jsxs)(t.p, { children: ["Navigate to a ", (0, i.jsx)(a.Z, { text: "ReactifyTestApplication", url: "/blob/main/reactify-test/src/main/java/com/reactify/test/ReactifyTestApplication.java" }), " class, which is located at ", (0, i.jsx)(t.code, { children: "/reactify/test/ReactifyTestApplication.java" }), "\nand run its ", (0, i.jsx)(t.code, { children: "main" }), " method. Open your favourite browser and go to ", (0, i.jsx)(t.a, { href: "http://localhost:8080", children: "localhost:8080" })] }),
                    "\n", (0, i.jsx)(t.h3, { id: "source-code", children: "Source code run project example" }), "\n", (0, i.jsxs)(t.p, { children: ["Source code example to run the program using reactify-core library. It only consists of a single ", (0, i.jsx)(a.Z, { text: "Java class", url: "/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java" }), ":"] }),
                    "\n", (0, i.jsx)(t.pre, {
                        children: (0, i.jsx)(t.code, {
                            className: "language-java", metastring: "url=/examples/tutorials/getting-started/src/main/java/AuthServiceApplication.java tag=EXAMPLE",
                            children: '@SpringBootApplication(exclude = {\n\tDataSourceAutoConfiguration.class, \n\tDataSourceTransactionManagerAutoConfiguration.class, \n\tHibernateJpaAutoConfiguration.class, \n\tSecurityAutoConfiguration.class\n}) \n@ComponentScan(basePackages = {"com.hoangtien2k3", "com.reactify"}) \n@EnableScheduling \npublic class AuthServiceApplication { \n\tpublic static void main(String[] args) { \n\t\tSpringApplication.run(AuthServiceApplication.class, args); \n\t} \n}\n'
                        })
                    }), "\n", (0, i.jsxs)(t.p, {
                        children: ["To define how to handle the received requests, we need to annotate @ComponentScan ", (0, i.jsx)(t.em, { children: "`com.reactify`" }), " is the default library path, which is worth noting.\n ", (0, i.jsx)(t.strong, { children: "The rest `com.hoangtien2k3`" }),
                            " is your project package path and changes accordingly. ", (0, i.jsx)(t.code, { children: "We create a promise of HttpResponse with code 200 and Reactify-Core is completely asynchronous, so our HTTP Servlet is also asynchronous." }), ' A simple HttpResponse can be replaced with a promise of HttpResponse to make it asynchronous. ', (0, i.jsx)(t.strong, { children: "" }), "", (0, i.jsx)(t.a, { href: "/async-io/promise", children: "Promise" }), " of ", (0, i.jsx)(t.strong, { children: "HttpResponse" }), " to make it asynchronous."]
                    }), "\n", (0, i.jsxs)(t.p, {
                        children: ["We also define the ", (0, i.jsx)(t.em, { children: "main" }), " method and launch our server using the ", (0, i.jsx)(t.em, { children: "launch" }),
                            " method. This method injects dependencies, starts\nthe application, runs it and stops it when needed."]
                    }), "\n", (0, i.jsx)(t.h3, { id: "run-the-app", children: "Run the app" }), "\n", (0, i.jsxs)(t.p, { children: ["Now, let's test the application. First, run ", (0, i.jsx)(t.em, { children: "AuthServiceApplication.main" }), ", then open your favourite browser and go to\n", (0, i.jsx)(t.a, { href: "http://localhost:8080", children: "localhost:8080" }), "\nYou will receive a ", (0, i.jsx)(t.code, { children: "Hello World!" }), " message from the server. Congratulations, you've just launched your first\nReactify-Core application!"] }), "\n", (0, i.jsx)(t.h2, { id: "whats-next", children: "What's next?" }), "\n", (0, i.jsxs)(t.p, { children: ["To make Reactify-Core more developer-friendly, we've created dozens of tutorials and examples of different scales,\nrepresenting most of the platform's capabilities. Click \"Next\" to get to the next tutorial. You can also explore Reactify-Core\n", (0, i.jsx)(t.a, { href: "/boot/launcher", children: "docs" }), " first."] })]
            })
        } function p(e = {}) { const { wrapper: t } = { ...(0, r.a)(), ...e.components }; return t ? (0, i.jsx)(t, { ...e, children: (0, i.jsx)(d, { ...e }) }) : d(e) }
    }, 7618: (e, t, n) => { n.d(t, { Z: () => a }); n(7294); var i = n(9962), r = n(5893); const a = e => { let { url: t, text: n, isInline: a = !0, children: s } = e; const { siteConfig: o } = (0, i.Z)(), l = t.startsWith("/examples") ? o.customFields.githubExamplesBranch : o.customFields.githubBranch; return (0, r.jsx)("a", { style: a ? {} : { display: "block", marginBottom: "16px" }, href: o.customFields.githubUrl + "/" + l + t, target: "_blank", children: n || s }) } }, 7815: (e, t, n) => { n.d(t, { Z: () => r }); n(7294); var i = n(9962); const r = e => { let { name: t } = e; const { siteConfig: n } = (0, i.Z)(); if (!t) throw new Error("Variable name is required"); if (void 0 === n.customFields[t]) throw new Error(`Variable ${t} not exist`); return n.customFields[t] } }, 1151: (e, t, n) => { n.d(t, { Z: () => o, a: () => s }); var i = n(7294); const r = {}, a = i.createContext(r); function s(e) { const t = i.useContext(a); return i.useMemo((function () { return "function" == typeof e ? e(t) : { ...t, ...e } }), [t, e]) } function o(e) { let t; return t = e.disableParentContext ? "function" == typeof e.components ? e.components(r) : e.components || r : s(e.components), i.createElement(a.Provider, { value: t }, e.children) } }
}]);
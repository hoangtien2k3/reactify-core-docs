"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[941],{9751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var a=n(5893),r=n(1151),s=n(7618),i=n(7815);const o={title:"ActiveJ | Form Validation Using HTTP Decoder",sidebar_label:"HTTP Decoder",keywords:["java","java for beginners","java framework","guide","tutorial","web application","server","servlet","spring","spring alternative","netty alternative","jetty alternative","decoder","mvc","form validation","async"],description:"Create an async Java servlet that can process validation form using ActiveJ components."},c="Form Validation Using HTTP Decoder",l={id:"tutorials/http-decoder",title:"ActiveJ | Form Validation Using HTTP Decoder",description:"Create an async Java servlet that can process validation form using ActiveJ components.",source:"@site/docs/tutorials/http-decoder.mdx",sourceDirName:"tutorials",slug:"/tutorials/http-decoder",permalink:"/tutorials/http-decoder",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | Form Validation Using HTTP Decoder",sidebar_label:"HTTP Decoder",keywords:["java","java for beginners","java framework","guide","tutorial","web application","server","servlet","spring","spring alternative","netty alternative","jetty alternative","decoder","mvc","form validation","async"],description:"Create an async Java servlet that can process validation form using ActiveJ components."},sidebar:"tutorials",previous:{title:"Template Engine Integration",permalink:"/tutorials/template-engine-integration"},next:{title:"Authorization and Session Management",permalink:"/tutorials/authorization-tutorial"}},d={},h=[{value:"Creating <code>HttpDecoderExample</code> Class",id:"creating-httpdecoderexample-class",level:2},{value:"Running the application",id:"running-the-application",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"form-validation-using-http-decoder",children:"Form Validation Using HTTP Decoder"}),"\n",(0,a.jsxs)(t.p,{children:["In this example we will create an async servlet that adds contacts to a list, parses requests and processes form\nvalidation with the help of ",(0,a.jsx)(t.code,{children:"Decoder"}),". Consider this example as a concise representation of the MVC pattern:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["To model a ",(0,a.jsx)(t.code,{children:"Contact"})," representation, we will create a plain Java class with fields (name, age, address), constructor, and accessors to the fields."]}),"\n",(0,a.jsxs)(t.li,{children:["To simplify the example, we will use an ",(0,a.jsx)(t.code,{children:"ArrayList"})," to store the ",(0,a.jsx)(t.code,{children:"Contact"})," objects. ",(0,a.jsx)(t.code,{children:"ContactDAO"})," interface and its implementation are used for this purpose."]}),"\n",(0,a.jsx)(t.li,{children:"To build a view we will use a single HTML file, compiled with the help of the Mustache template engine."}),"\n",(0,a.jsxs)(t.li,{children:["An ",(0,a.jsx)(t.code,{children:"AsyncServlet"})," will be used as a controller. We will also add ",(0,a.jsx)(t.code,{children:"RoutingServlet"})," for routing a concrete request to a particular endpoint."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Decoder"})," provides you with tools for parsing requests."]}),"\n"]}),"\n",(0,a.jsx)(s.Z,{isInline:!1,text:"See full example on GitHub",url:"/examples/tutorials/decoder/src/main/java"}),"\n",(0,a.jsxs)(t.p,{children:["Here we will consider only ",(0,a.jsx)(t.code,{children:"HttpDecoderExample"})," class with ",(0,a.jsx)(t.code,{children:"AsyncServlet"})," as it contains ActiveJ-specific features."]}),"\n",(0,a.jsxs)(t.h2,{id:"creating-httpdecoderexample-class",children:["Creating ",(0,a.jsx)(t.code,{children:"HttpDecoderExample"})," Class"]}),"\n",(0,a.jsxs)(t.p,{children:["Let's create ",(0,a.jsx)(t.code,{children:"HttpDecoderExample"})," class which extends ",(0,a.jsx)(t.code,{children:"HttpServerLauncher"}),". By extending ",(0,a.jsx)(t.code,{children:"HttpServerLauncher"})," we will take care\nof the server's lifecycle and service management. Next, we provide two custom parsers based on HTTP ",(0,a.jsx)(s.Z,{url:"/core-http/src/main/java/io/activej/http/decoder/Decoder.java",children:(0,a.jsx)(t.code,{children:"Decoder"})}),"- ",(0,a.jsx)(t.code,{children:"ADDRESS_DECODER"})," and ",(0,a.jsx)(t.code,{children:"CONTACT_DECODER"})," - which will be used for validation."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_1",children:'public final class HttpDecoderExample extends HttpServerLauncher {\n  private static final String SEPARATOR = "-";\n\n  private static final Decoder<Address> ADDRESS_DECODER = Decoder.\n    of(Address::new,\n      ofPost("title", "")\n        .validate(param -> !param.isEmpty(), "Title cannot be empty")\n    );\n\n  private static final Decoder<Contact> CONTACT_DECODER = Decoder.of(Contact::new,\n    ofPost("name")\n      .validate(name -> !name.isEmpty(), "Name cannot be empty"),\n    ofPost("age")\n      .map(Mapper.ofEx(Integer::valueOf, "Cannot decode age"))\n      .validate(age -> age >= 18, "Age must not be less than 18"),\n    ADDRESS_DECODER.withId("contact-address")\n  );\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["If you want to learn more about template engines integration, check out ",(0,a.jsx)(t.a,{href:"/tutorials/template-engine-integration",children:"this example"})]})}),"\n",(0,a.jsxs)(t.p,{children:["Also, we need to create ",(0,a.jsxs)(t.em,{children:["applyTemplate(Mustache mustache, ",(0,a.jsx)(t.code,{children:"Map<String, Object>"})," scopes)"]})," method to fill the provided\nMustache template with the given data:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_5",children:"private static ByteBuf applyTemplate(Mustache mustache, Map<String, Object> scopes) {\n  ByteBufWriter writer = new ByteBufWriter();\n  mustache.execute(writer, scopes);\n  return writer.getBuf();\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Next, let's provide a ",(0,a.jsx)(t.strong,{children:"ContactDAOImpl"})," factory method:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_6",children:"@Provides\nContactDAO dao() {\n  return new ContactDAOImpl();\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Now we have everything needed to create ",(0,a.jsx)(t.code,{children:"AsyncServlet"})," to handle requests:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_2",children:'@Provides\nAsyncServlet mainServlet(Reactor reactor, ContactDAO contactDAO) {\n  Mustache contactListView = new DefaultMustacheFactory().compile("static/contactList.html");\n  return RoutingServlet.builder(reactor)\n    .with("/", request -> HttpResponse.ok200()\n      .withBody(applyTemplate(contactListView, Map.of("contacts", contactDAO.list())))\n      .toPromise())\n    .with(POST, "/add", request -> request.loadBody()\n      .then($ -> {\n        //[START REGION_3]\n        Either<Contact, DecodeErrors> decodedUser = CONTACT_DECODER.decode(request);\n        //[END REGION_3]\n        if (decodedUser.isLeft()) {\n          contactDAO.add(decodedUser.getLeft());\n        }\n        Map<String, Object> scopes = new HashMap<>();\n        scopes.put("contacts", contactDAO.list());\n        if (decodedUser.isRight()) {\n          //noinspection ConstantConditions - is \'right\', hence not \'null\'\n          scopes.put("errors", decodedUser.getRight().toMap(SEPARATOR));\n        }\n        return HttpResponse.ok200()\n          .withBody(applyTemplate(contactListView, scopes))\n          .toPromise();\n      }))\n    .build();\n}\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Here we provide an ",(0,a.jsx)(t.code,{children:"AsyncServlet"}),", which receives ",(0,a.jsx)(t.code,{children:"HttpRequests"})," from clients, creates ",(0,a.jsx)(t.code,{children:"HttpResponses"})," depending on route path and sends it."]}),"\n",(0,a.jsxs)(t.li,{children:["Inside the ",(0,a.jsx)(t.code,{children:"RoutingServlet"})," two route paths are defined. The first one matches requests to the root route ",(0,a.jsx)(t.code,{children:'"/"'})," -\nit simply displays a contact list.\nThe second one, ",(0,a.jsx)(t.code,{children:'"/add"'})," - is an HTTP ",(0,a.jsx)(t.code,{children:"POST"})," method that adds or declines adding new users. We will process this request parsing with the\nhelp of the aforementioned HTTP ",(0,a.jsx)(t.code,{children:"Decoder"})," by using ",(0,a.jsx)(t.code,{children:"decode(request)"})," method:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_3",children:"Either<Contact, DecodeErrors> decodedUser = CONTACT_DECODER.decode(request);\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Either"})," represents a value of two possible data types (",(0,a.jsx)(t.code,{children:"Contact"}),", ",(0,a.jsx)(t.code,{children:"DecodeErrors"}),").\n",(0,a.jsx)(t.strong,{children:"Either"})," is either ",(0,a.jsx)(t.strong,{children:"Left"}),"(",(0,a.jsx)(t.code,{children:"Contact"}),") or ",(0,a.jsx)(t.strong,{children:"Right"}),"(",(0,a.jsx)(t.strong,{children:"DecodeErrors"}),").\nIn order to determine whether a parse was successful or not, we check it's value by using the ",(0,a.jsx)(t.code,{children:"isLeft()"})," and ",(0,a.jsx)(t.code,{children:"isRight()"})," methods."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Finally, write down the ",(0,a.jsx)(t.code,{children:"main()"})," method which will launch our application:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"url=/examples/tutorials/decoder/src/main/java/HttpDecoderExample.java tag=REGION_4",children:"public static void main(String[] args) throws Exception {\n  Launcher launcher = new HttpDecoderExample();\n  launcher.launch(args);\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"running-the-application",children:"Running the application"}),"\n",(0,a.jsxs)(t.p,{children:["If you want to run the example, you need to ",(0,a.jsx)(t.a,{href:"https://github.com/activej/activej",children:"clone ActiveJ"})," from GitHub and\nimport it as a Maven project. Check out branch ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(i.Z,{name:"currentVersion"})}),". Before running the example, build the project (",(0,a.jsx)(t.strong,{children:"Ctrl + F9"})," for IntelliJ IDEA)."]}),"\n",(0,a.jsxs)(t.p,{children:["Then open ",(0,a.jsx)(t.code,{children:"HttpDecoderExample"})," class, which is located at ",(0,a.jsx)(t.code,{children:"activej/examples/tutorials/decoder"})," and run its ",(0,a.jsx)(t.code,{children:"main()"})," method. Open your favourite browser and go to ",(0,a.jsx)(t.a,{href:"http://localhost:8080",children:"localhost:8080"})]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},7618:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var a=n(9962),r=n(5893);const s=e=>{let{url:t,text:n,isInline:s=!0,children:i}=e;const{siteConfig:o}=(0,a.Z)(),c=t.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,r.jsx)("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+c+t,target:"_blank",children:n||i})}},7815:(e,t,n)=>{n.d(t,{Z:()=>r});n(7294);var a=n(9962);const r=e=>{let{name:t}=e;const{siteConfig:n}=(0,a.Z)();if(!t)throw new Error("Variable name is required");if(void 0===n.customFields[t])throw new Error(`Variable ${t} not exist`);return n.customFields[t]}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var a=n(7294);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);
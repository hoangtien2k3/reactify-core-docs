"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6891],{3958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>B,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var i=n(5893),a=n(1151),s=n(7815),r=n(7618);const o={title:"ActiveJ | ByteBuf, lightweight alternative to Java NIO ByteBuffers",description:"Lightweight alternative to Java NIO ByteBuffers with extremely low GC footprint.",sidebar_label:"Bytebuf",keywords:["bytebuffer","byte buffers","java nio","bytebuffer alternative","java","java framework"]},l="Bytebuf",u={id:"misc/bytebuf",title:"ActiveJ | ByteBuf, lightweight alternative to Java NIO ByteBuffers",description:"Lightweight alternative to Java NIO ByteBuffers with extremely low GC footprint.",source:"@site/docs/misc/bytebuf.mdx",sourceDirName:"misc",slug:"/misc/bytebuf",permalink:"/misc/bytebuf",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | ByteBuf, lightweight alternative to Java NIO ByteBuffers",description:"Lightweight alternative to Java NIO ByteBuffers with extremely low GC footprint.",sidebar_label:"Bytebuf",keywords:["bytebuffer","byte buffers","java nio","bytebuffer alternative","java","java framework"]},sidebar:"docs",previous:{title:"Examples",permalink:"/fs/examples"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"ByteBuf",id:"bytebuf-1",level:2},{value:"ByteBufPool",id:"bytebufpool",level:2},{value:"ByteBufs",id:"bytebufs",level:2},{value:"Utility classes",id:"utility-classes",level:2},{value:"Examples",id:"examples",level:2},{value:"ByteBuf Example",id:"bytebuf-example",level:3},{value:"ByteBuf Pool Example",id:"bytebuf-pool-example",level:3},{value:"ByteBufs Example",id:"bytebufs-example",level:3}];function f(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"bytebuf",children:"Bytebuf"}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["ActiveJ strives to make efficient yet high-level I/O. This requires extensive use of user-space\nbyte buffers. Unfortunately, traditional Java ",(0,i.jsx)(t.code,{children:"ByteBuffer"}),"s impose a heavy load on GC."]}),"\n",(0,i.jsxs)(t.p,{children:["To reduce GC overhead, ActiveJ introduces its own GC-friendly and lightweight ",(0,i.jsx)(t.a,{href:"#bytebuf",children:(0,i.jsx)(t.code,{children:"ByteBufs"})})," that can be\nreused with ",(0,i.jsx)(t.a,{href:"#bytebufpool",children:(0,i.jsx)(t.code,{children:"ByteBufPool"})}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["In addition, a common I/O pattern is to treat ",(0,i.jsx)(t.code,{children:"ByteBuffer"}),"s as a queue: the I/O operation produces the data and the application consumes the data or vice versa. ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s are designed to facilitate this pattern by providing a specialized ",(0,i.jsx)(t.a,{href:"#bytebufs",children:(0,i.jsx)(t.code,{children:"ByteBufs"})})," class with queue-like operations across multiple ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s."]}),"\n",(0,i.jsx)(t.h2,{id:"bytebuf-1",children:"ByteBuf"}),"\n",(0,i.jsxs)(t.p,{children:["A lightweight and efficient implementation compared to the Java NIO ",(0,i.jsx)(t.code,{children:"ByteBuffer"}),". There are no direct buffers,\nwhich simplifies and improves ",(0,i.jsx)(r.Z,{url:"/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBuf.java",children:(0,i.jsx)(t.code,{children:"ByteBuf"})})," performance."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"ByteBuf"})," is like a FIFO byte queue and has two positions: ",(0,i.jsx)(t.em,{children:"head"})," and ",(0,i.jsx)(t.em,{children:"tail"}),". When you write data to\n",(0,i.jsx)(t.code,{children:"ByteBuf"}),", it's ",(0,i.jsx)(t.em,{children:"tail"})," value is incremented by the number of bytes written. Similarly, when you read data from ",(0,i.jsx)(t.code,{children:"ByteBuf"}),",\nit's ",(0,i.jsx)(t.em,{children:"head"})," value is incremented by the number of bytes read."]}),"\n",(0,i.jsxs)(t.p,{children:["You can read bytes from ",(0,i.jsx)(t.code,{children:"ByteBuf"})," only when its ",(0,i.jsx)(t.em,{children:"tail"})," value is greater than the ",(0,i.jsx)(t.em,{children:"head"})," value. Similarly, you can write bytes to a\n",(0,i.jsx)(t.code,{children:"ByteBuf"})," as log as the ",(0,i.jsx)(t.em,{children:"tail"})," does not exceed the length of the wrapped array. This eliminated the need for ",(0,i.jsx)(t.code,{children:"ByteBuffer.flip()"})," operations."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"ByteBuf"})," supports concurrent processes: while one process writes some data to the ",(0,i.jsx)(t.code,{children:"ByteBuf"}),", another process can\nread it."]}),"\n",(0,i.jsxs)(t.p,{children:["To create a ",(0,i.jsx)(t.code,{children:"ByteBuf"})," you can either wrap a byte array into a ",(0,i.jsx)(t.code,{children:"ByteBuf"})," or allocate it from the ",(0,i.jsx)(t.code,{children:"ByteBufPool"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["If you create a ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"without allocating it from ",(0,i.jsx)(t.code,{children:"ByteBufPool"}),", calling ",(0,i.jsx)(t.code,{children:"ByteBuf.recycle()"})," will have no effect, such ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s are simply collected by GC"]})}),"\n",(0,i.jsx)(t.h2,{id:"bytebufpool",children:"ByteBufPool"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ByteBufPool"})," allows ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s to be reused and, as a result, reduces the load on the GC. To make ",(0,i.jsx)(r.Z,{url:"/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBufPool.java",children:(0,i.jsx)(t.code,{children:"ByteBufPool"})})," usage more convenient, there are tools for debugging and monitoring allocated ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s, including their stack traces."]}),"\n",(0,i.jsxs)(t.p,{children:["To get a ",(0,i.jsx)(t.code,{children:"ByteBuf"})," from the pool, use ",(0,i.jsx)(t.code,{children:"ByteBufPool.allocate(int size)"}),". A ",(0,i.jsx)(t.code,{children:"ByteBuf"})," of size rounded up to the\nnearest power of 2 will be allocated (for example, if the ",(0,i.jsx)(t.em,{children:"size"})," is 29, a ",(0,i.jsx)(t.code,{children:"ByteBuf"})," of 32 bytes will be allocated)."]}),"\n",(0,i.jsxs)(t.p,{children:["To return ",(0,i.jsx)(t.code,{children:"ByteBuf"})," to the ",(0,i.jsx)(t.code,{children:"ByteBufPool"}),", use the ",(0,i.jsx)(t.code,{children:"ByteBuf.recycle()"})," method. In contrast to languages like C/C++, recycling ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"is not required - in\nthe worst case, they will be collected by the GC."]}),"\n",(0,i.jsxs)(t.p,{children:["To keep things consistent, ActiveJ relies on the concept of \u2018ownership\u2019 (as in Rust language) - once allocated,\nthe components pass ",(0,i.jsx)(t.em,{children:"byteBuf"})," from one to the other until the last \u2018owner\u2019 recycles it to ",(0,i.jsx)(t.code,{children:"ByteBufPool"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can explore an example of ",(0,i.jsx)(t.code,{children:"ByteBufPool"})," use case ",(0,i.jsx)(t.a,{href:"#bytebuf-pool-example",children:"here"})]}),"\n",(0,i.jsx)(t.h2,{id:"bytebufs",children:"ByteBufs"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(r.Z,{url:"/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBufs.java",children:(0,i.jsx)(t.code,{children:"ByteBufs"})})})," class provides efficient management of multiple ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s. It is an optimized queue of multiple\nByteBufs with FIFO rules."]}),"\n",(0,i.jsxs)(t.p,{children:["You can explore an example of ",(0,i.jsx)(t.code,{children:"ByteBufs"})," use case ",(0,i.jsx)(t.a,{href:"#bytebufs-example",children:"here"})]}),"\n",(0,i.jsx)(t.h2,{id:"utility-classes",children:"Utility classes"}),"\n",(0,i.jsxs)(t.p,{children:["ByteBuf module also contains ",(0,i.jsx)(r.Z,{url:"/core-bytebuf/src/main/java/io/activej/bytebuf/util",children:(0,i.jsx)(t.code,{children:"utility classes"})})," to manage and resize the underlying byte buffer, perform ",(0,i.jsx)(t.code,{children:"String"})," conversions, etc."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"#bytebuf-example",children:"ByteBuf Example"})," - represents some basic ",(0,i.jsx)(t.code,{children:"ByteBuf"})," possibilities, such as:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["wrapping data in ",(0,i.jsx)(t.code,{children:"ByteBuf"})," for writing/reading,"]}),"\n",(0,i.jsx)(t.li,{children:"slicing particular parts out of data,"}),"\n",(0,i.jsx)(t.li,{children:"conversions."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"#bytebuf-pool-example",children:"ByteBuf Pool Example"})," - represents how to work with ",(0,i.jsx)(t.code,{children:"ByteBufPool"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"#bytebufs-example",children:"ByteBufs Example"})," - shows how queues of ",(0,i.jsx)(t.code,{children:"ByteBuf"}),"s are created and processed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{type:"note",children:[(0,i.jsx)(t.p,{children:"To run the examples, you need to clone ActiveJ from GitHub"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/activej/activej\n"})}),(0,i.jsxs)(t.p,{children:["And import it as a Maven project. Check out tag ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(s.Z,{name:"currentVersion"})}),". Before running the examples, build the project.\nThese examples are located at ",(0,i.jsx)(t.code,{children:"activej/examples/core/bytebuf"})]})]}),"\n",(0,i.jsx)(t.h3,{id:"bytebuf-example",children:"ByteBuf Example"}),"\n",(0,i.jsx)(t.p,{children:"If you run the example, you'll receive the following output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"0\n1\n2\n3\n4\n5\n\n[0, 1, 2, 3, 4, 5]\n\nHello\n\nSliced `ByteBuf` array: [1, 2, 3]\n\nArray of `ByteBuf` converted from `ByteBuffer`: [1, 2, 3]\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The first six lines are a result of wrapping a byte array to a ",(0,i.jsx)(t.code,{children:"ByteBuf"})," wrapper for reading and then printing it:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufExample.java tag=REGION_1",children:"byte[] data = new byte[]{0, 1, 2, 3, 4, 5};\nByteBuf byteBuf = ByteBuf.wrapForReading(data);\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The line ",(0,i.jsx)(t.code,{children:"[0, 1, 2, 3, 4, 5]"})," is a result of converting an empty array of bytes to ",(0,i.jsx)(t.code,{children:"ByteBuf"})," and wrapping them for\nwriting. Then the ",(0,i.jsx)(t.code,{children:"ByteBuf"})," was filled with bytes with the help of ",(0,i.jsx)(t.code,{children:"while"})," loop:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufExample.java tag=REGION_2",children:"byte[] data = new byte[6];\nByteBuf byteBuf = ByteBuf.wrapForWriting(data);\nbyte value = 0;\nwhile (byteBuf.canWrite()) {\n  byteBuf.writeByte(value++);\n}\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:['"Hello" line was first converted from String to ',(0,i.jsx)(t.code,{children:"ByteBuf"})," and wrapped for reading, then represented as a String for\noutput with the help of ",(0,i.jsx)(t.code,{children:"byteBuf.asString()"}),":"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufExample.java tag=REGION_3",children:'String message = "Hello";\nByteBuf byteBuf = ByteBuf.wrapForReading(message.getBytes(UTF_8));\nString unWrappedMessage = byteBuf.asString(UTF_8);\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The last two outputs represent some other possibilities of ",(0,i.jsx)(t.code,{children:"ByteBuf"}),", such as slicing:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufExample.java tag=REGION_4",children:"byte[] data = new byte[]{0, 1, 2, 3, 4, 5};\nByteBuf byteBuf = ByteBuf.wrap(data, 0, data.length);\nByteBuf slice = byteBuf.slice(1, 3);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["and conversions of default ",(0,i.jsx)(t.code,{children:"ByteBuffer"})," to ",(0,i.jsx)(t.code,{children:"ByteBuf"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufExample.java tag=REGION_5",children:"ByteBuf byteBuf = ByteBuf.wrap(new byte[20], 0, 0);\nByteBuffer buffer = byteBuf.toWriteByteBuffer();\nbuffer.put((byte) 1);\nbuffer.put((byte) 2);\nbuffer.put((byte) 3);\nbyteBuf.ofWriteByteBuffer(buffer);\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(r.Z,{url:"/examples/core/bytebuf/src/main/java/ByteBufExample.java",children:"See full example on GitHub"})})}),"\n",(0,i.jsx)(t.h3,{id:"bytebuf-pool-example",children:"ByteBuf Pool Example"}),"\n",(0,i.jsx)(t.p,{children:"If you run the example, you'll receive the following output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"Length of array of allocated ByteBuf: 128\nNumber of ByteBufs in pool before recycling: 0\nNumber of ByteBufs in pool after recycling: 1\nNumber of ByteBufs in pool: 0\n\nSize of ByteBuf: 4\nRemaining bytes of ByteBuf after 3 bytes have been written: 1\nRemaining bytes of a new ByteBuf: 5\n\n[0, 1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's have a look at the implementation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufPoolExample.java tag=EXAMPLE",children:'public final class ByteBufPoolExample {\n  /* Setting ByteBufPool minSize and maxSize properties here for illustrative purposes.\n   Otherwise, ByteBufs with size less than 32 would not be placed into pool\n   */\n  static {\n    System.setProperty("ByteBufPool.minSize", "1");\n  }\n\n  private static void allocatingBufs() {\n    // Allocating a ByteBuf of 100 bytes\n    ByteBuf byteBuf = ByteBufPool.allocate(100);\n\n    // Allocated ByteBuf has an array with size equal to next power of 2, hence 128\n    System.out.println("Length of array of allocated ByteBuf: " + byteBuf.writeRemaining());\n\n    // Pool has 0 ByteBufs right now\n    System.out.println("Number of ByteBufs in pool before recycling: " + ByteBufPool.getStats().getPoolItems());\n\n    // Recycling ByteBuf to put it back to pool\n    byteBuf.recycle();\n\n    // Now pool consists of 1 ByteBuf that is the one we just recycled\n    System.out.println("Number of ByteBufs in pool after recycling: " + ByteBufPool.getStats().getPoolItems());\n\n    // Trying to allocate another ByteBuf\n    ByteBuf anotherByteBuf = ByteBufPool.allocate(123);\n\n    // Pool is now empty as the only ByteBuf in pool has just been taken from the pool\n    System.out.println("Number of ByteBufs in pool: " + ByteBufPool.getStats().getPoolItems());\n    System.out.println();\n  }\n\n  private static void ensuringWriteRemaining() {\n    ByteBuf byteBuf = ByteBufPool.allocate(3);\n\n    // Size is equal to power of 2 that is larger than 3, hence 4\n    System.out.println("Size of ByteBuf: " + byteBuf.writeRemaining());\n\n    byteBuf.write(new byte[]{0, 1, 2});\n\n    // After writing 3 bytes into ByteBuf we have only 1 spare byte in ByteBuf\n    System.out.println("Remaining bytes of ByteBuf after 3 bytes have been written: " + byteBuf.writeRemaining());\n\n    // We need to write 3 more bytes, so we have to ensure that there are 3 spare bytes in ByteBuf\n    // and if there are not - create new ByteBuf with enough room for 3 bytes (old ByteBuf will get recycled)\n    ByteBuf newByteBuf = ByteBufPool.ensureWriteRemaining(byteBuf, 3);\n    System.out.println("Amount of ByteBufs in pool:" + ByteBufPool.getStats().getPoolItems());\n\n    // As we need to write 3 more bytes, we need a ByteBuf that can hold 6 bytes.\n    // The next power of 2 is 8, so considering 3 bytes that have already been written, new ByteBuf\n    // can store (8-3=5) more bytes\n    System.out.println("Remaining bytes of a new ByteBuf: " + newByteBuf.writeRemaining());\n\n    // Recycling a new ByteBuf (remember, the old one has already been recycled)\n    newByteBuf.recycle();\n    System.out.println();\n  }\n\n  private static void appendingBufs() {\n    ByteBuf bufOne = ByteBuf.wrapForReading(new byte[]{0, 1, 2});\n    ByteBuf bufTwo = ByteBuf.wrapForReading(new byte[]{3, 4, 5});\n\n    ByteBuf appendedBuf = ByteBufPool.append(bufOne, bufTwo);\n\n    // Appended ByteBuf consists of two ByteBufs, you don\'t have to worry about allocating ByteBuf\n    // with enough capacity or how to properly copy bytes, ByteBufPool will handle it for you\n    System.out.println(Arrays.toString(appendedBuf.asArray()));\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    allocatingBufs();\n    ensuringWriteRemaining();\n    appendingBufs();\n  }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(r.Z,{url:"/examples/core/bytebuf/src/main/java/ByteBufPoolExample.java",children:"See full example on GitHub"})})}),"\n",(0,i.jsx)(t.h3,{id:"bytebufs-example",children:"ByteBufs Example"}),"\n",(0,i.jsx)(t.p,{children:"If you run the example, you'll receive the following output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"bufs:2 bytes:7\n\nBuf taken from bufs: [0, 1, 2, 3]\n\nBuf taken from bufs: [3, 4, 5, 6, 7, 8]\n\n[1, 2, 3, 4]\n[5, 6, 7, 8]\nIs 'ByteBufs' empty? true\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The first line represents our queue after we've added two bufs: ",(0,i.jsx)(t.code,{children:"[0, 1, 2, 3]"})," and ",(0,i.jsx)(t.code,{children:"[3, 4, 5]"})," with ",(0,i.jsx)(t.code,{children:"BUFS.add()"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufsExample.java tag=REGION_1",children:"BUFS.add(ByteBuf.wrapForReading(new byte[]{0, 1, 2, 3}));\nBUFS.add(ByteBuf.wrapForReading(new byte[]{3, 4, 5}));\n\n// bufs consist of 2 Bufs at this moment\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Then method ",(0,i.jsx)(t.code,{children:"BUFS.take()"})," is applied and the first added buf, which is ",(0,i.jsx)(t.code,{children:"[0, 1, 2, 3]"}),", is taken from the queue.\nThe next line represents the result of two operations: adding a new ",(0,i.jsx)(t.code,{children:"[6, 7, 8]"})," buf and then applying\n",(0,i.jsx)(t.code,{children:"BUFS.takeRemaining()"})," which takes all the remaining bufs from the queue."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufsExample.java tag=REGION_2",children:"// Adding one more ByteBuf to bufs\nBUFS.add(ByteBuf.wrapForReading(new byte[]{6, 7, 8}));\n\nByteBuf takenBuf = BUFS.takeRemaining();\n\n// Taken ByteBuf is combined of every ByteBuf that were in bufs\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Pay attention to the difference between ",(0,i.jsx)(t.code,{children:"take()"})," and ",(0,i.jsx)(t.code,{children:"poll()"})," ",(0,i.jsx)(t.strong,{children:"ByteBufs"}),"\nmethods. When using ",(0,i.jsx)(t.code,{children:"take()"}),", you must be sure that there is at least one ",(0,i.jsx)(t.em,{children:"ByteBuf"})," remaining in the queue, otherwise\nuse ",(0,i.jsx)(t.code,{children:"poll()"})," which can return ",(0,i.jsx)(t.code,{children:"null"}),"."]})}),"\n",(0,i.jsx)(t.p,{children:"Finally, the last three lines represent the following operations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Creating two bufs: ",(0,i.jsx)(t.code,{children:"[1, 2, 3, 4]"})," and ",(0,i.jsx)(t.code,{children:"[5, 6, 7, 8]"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"Draining the queue to the consumer which prints the bufs."}),"\n",(0,i.jsx)(t.li,{children:"Then we check if the queue is empty now."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:"url=/examples/core/bytebuf/src/main/java/ByteBufsExample.java tag=REGION_3",children:'import io.activej.bytebuf.ByteBuf;\nimport io.activej.bytebuf.ByteBufs;\n\nimport java.util.Arrays;\n\npublic final class ByteBufsExample {\n  private static final ByteBufs BUFS = new ByteBufs();\n\n  private static void addingToBufs() {\n    //[START REGION_1]\n    BUFS.add(ByteBuf.wrapForReading(new byte[]{0, 1, 2, 3}));\n    BUFS.add(ByteBuf.wrapForReading(new byte[]{3, 4, 5}));\n\n    // bufs consist of 2 Bufs at this moment\n    //[END REGION_1]\n    System.out.println(BUFS);\n    System.out.println();\n  }\n\n  private static void takingBufOutOfBufs() {\n    ByteBuf takenBuf = BUFS.take();\n\n    // Buf that is taken is the one that was put in bufs first\n    System.out.println("Buf taken from bufs: " + Arrays.toString(takenBuf.asArray()));\n    System.out.println();\n  }\n\n  private static void takingEverythingOutOfBufs() {\n    //[START REGION_2]\n    // Adding one more ByteBuf to bufs\n    BUFS.add(ByteBuf.wrapForReading(new byte[]{6, 7, 8}));\n\n    ByteBuf takenBuf = BUFS.takeRemaining();\n\n    // Taken ByteBuf is combined of every ByteBuf that were in bufs\n    //[END REGION_2]\n    System.out.println("Buf taken from bufs: " + Arrays.toString(takenBuf.asArray()));\n    System.out.println("Is \'ByteBufs\' empty? " + BUFS.isEmpty());\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    addingToBufs();\n    takingBufOutOfBufs();\n    takingEverythingOutOfBufs();\n  }\n}\n\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(r.Z,{url:"/examples/core/bytebuf/src/main/java/ByteBufsExample.java",children:"See full example on GitHub"})})})]})}function B(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},7618:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var i=n(9962),a=n(5893);const s=e=>{let{url:t,text:n,isInline:s=!0,children:r}=e;const{siteConfig:o}=(0,i.Z)(),l=t.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,a.jsx)("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+l+t,target:"_blank",children:n||r})}},7815:(e,t,n)=>{n.d(t,{Z:()=>a});n(7294);var i=n(9962);const a=e=>{let{name:t}=e;const{siteConfig:n}=(0,i.Z)();if(!t)throw new Error("Variable name is required");if(void 0===n.customFields[t])throw new Error(`Variable ${t} not exist`);return n.customFields[t]}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var i=n(7294);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);
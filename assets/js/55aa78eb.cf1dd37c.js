"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[1646],{7585:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>v,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var r=t(5893),s=t(1151),a=t(7618),i=t(7815),o=t(4304);const c={title:"ActiveJ | Net, high-performance alternative to Netty for building async servers without overheads",description:"Abstraction layer for building asynchronous HTTP, RPC, TCP servers with no performance overhead.",sidebar_label:"Net",keywords:["tcp","rpc","http","java","java framework","spring alternative","jetty alternative","netty alternative","eventloop","asynchronous server","async"]},l="Net",d={id:"async-io/net",title:"ActiveJ | Net, high-performance alternative to Netty for building async servers without overheads",description:"Abstraction layer for building asynchronous HTTP, RPC, TCP servers with no performance overhead.",source:"@site/docs/async-io/net.mdx",sourceDirName:"async-io",slug:"/async-io/net",permalink:"/async-io/net",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ActiveJ | Net, high-performance alternative to Netty for building async servers without overheads",description:"Abstraction layer for building asynchronous HTTP, RPC, TCP servers with no performance overhead.",sidebar_label:"Net",keywords:["tcp","rpc","http","java","java framework","spring alternative","jetty alternative","netty alternative","eventloop","asynchronous server","async"]},sidebar:"docs",previous:{title:"Datastream",permalink:"/async-io/datastream"},next:{title:"Launcher",permalink:"/boot/launcher"}},p={},h=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2},{value:"Reactive sockets",id:"reactive-sockets",level:2},{value:"Server",id:"server",level:2},{value:"Examples",id:"examples",level:2},{value:"Ping-Pong Socket Connection",id:"ping-pong-socket-connection",level:3},{value:"CSP TCP Client",id:"csp-tcp-client",level:3},{value:"CSP TCP Server",id:"csp-tcp-server",level:3},{value:"Datastream TCP Client",id:"datastream-tcp-client",level:3},{value:"Datastream TCP Server",id:"datastream-tcp-server",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"net",children:"Net"}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["A convenient and efficient alternative to Netty, Apache Mina, and other similar solutions for high performance networking. A tiny layer of abstraction on top of reactor (",(0,r.jsx)(n.a,{href:"/async-io/eventloop",children:(0,r.jsx)(n.code,{children:"Eventloop"})}),") and Java NIO Adapters for ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/ITcpSocket.java",children:(0,r.jsx)(n.code,{children:"TCP socket"})})," along with ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/socket/udp/IUdpSocket.java",children:(0,r.jsx)(n.code,{children:"UDP socket"})})]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Support of ",(0,r.jsx)(n.code,{children:"Promises"})," for read and write operations"]}),"\n",(0,r.jsxs)(n.li,{children:["Compatibility with ",(0,r.jsx)(n.a,{href:"/async-io/csp",children:(0,r.jsx)(n.code,{children:"CSP"})})," ",(0,r.jsx)(a.Z,{url:"/core-csp/src/main/java/io/activej/csp/supplier/ChannelSupplier.java",children:(0,r.jsx)(n.code,{children:"ChannelSupplier"})})," and ",(0,r.jsx)(a.Z,{url:"/core-csp/src/main/java/io/activej/csp/consumer/ChannelConsumer.java",children:(0,r.jsx)(n.code,{children:"ChannelConsumer"})})," TcpSocket can operate as a CSP channel with built-in backpressure propagation, and can be plugged into ",(0,r.jsx)(n.a,{href:"/async-io/csp",children:(0,r.jsx)(n.code,{children:"CSP"})}),"/",(0,r.jsx)(n.a,{href:"/async-io/datastream",children:(0,r.jsx)(n.code,{children:"Datastream"})})," pipeline with all its features (such as buffering, compression, serialization/deserialization, data transformations, data filtering, reducing, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:["Significantly optimized and with almost no performance overhead, makes extensive use of ",(0,r.jsx)(n.a,{href:"/misc/bytebuf#bytebufpool",children:(0,r.jsx)(n.code,{children:"ByteBufPool"})})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"reactive-sockets",children:"Reactive sockets"}),"\n",(0,r.jsxs)(n.p,{children:["Fully reactive ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/ITcpSocket.java",children:(0,r.jsx)(n.code,{children:"TCP socket"})})," with TLS support. Allows you to send/receive data to/from the network. It can be used as a building block for creating custom TCP servers/clients\nor implementing custom networking protocols. Socket has a simple and intuitive API consisting of ",(0,r.jsx)(n.code,{children:"read"}),"/",(0,r.jsx)(n.code,{children:"write"})," methods.\nThe ",(0,r.jsx)(n.a,{href:"/async-io/csp",children:"CSP"})," module can be used to wrap a socket into a ",(0,r.jsx)(a.Z,{url:"/core-csp/src/main/java/io/activej/csp/supplier/ChannelSupplier.java",children:(0,r.jsx)(n.code,{children:"ChannelSupplier"})})," or ",(0,r.jsx)(a.Z,{url:"/core-csp/src/main/java/io/activej/csp/consumer/ChannelConsumer.java",children:(0,r.jsx)(n.code,{children:"ChannelConsumer"})})]}),"\n",(0,r.jsxs)(n.p,{children:["There is also an asynchronous ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/socket/udp/IUdpSocket.java",children:(0,r.jsx)(n.code,{children:"UDP socket"})})," for UDP communications."]}),"\n",(0,r.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/AbstractReactiveServer.java",children:(0,r.jsx)(n.code,{children:"AbstractReactiveServer"})})," class is the basis for building reactor-based TCP servers (HTTP servers, RPC servers, TCP file services, etc.):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Support of ",(0,r.jsx)(n.em,{children:"start/stop"})," semantics"]}),"\n",(0,r.jsxs)(n.li,{children:["Implements ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/ReactiveServer.java",children:(0,r.jsx)(n.code,{children:"ReactiveServer"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Implements ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/WorkerServer.java",children:(0,r.jsx)(n.code,{children:"WorkerServer"})})," interface, so all ",(0,r.jsx)(n.code,{children:"AbstractReactiveServer"})," subclasses can be used as worker servers right away"]}),"\n",(0,r.jsxs)(n.li,{children:["Support of ",(0,r.jsx)(a.Z,{url:"/core-eventloop/src/main/java/io/activej/reactor/net/ServerSocketSettings.java",children:(0,r.jsx)(n.code,{children:"ServerSocketSettings"})})," and ",(0,r.jsx)(a.Z,{url:"/core-eventloop/src/main/java/io/activej/reactor/net/SocketSettings.java",children:(0,r.jsx)(n.code,{children:"SocketSettings"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A ready-to-use ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/PrimaryServer.java",children:(0,r.jsx)(n.code,{children:"PrimaryServer"})})," implementation that works in primary reactor as a balancer. It takes external \u201caccept\u201d requests and redistributes them to the WorkerServers, which then execute the actual \u201caccept\u201d requests in their corresponding worker reactor threads."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"To run the examples, you need to clone ActiveJ from GitHub"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/hoangtien2k3/reactify-core\n"})}),(0,r.jsxs)(n.p,{children:["And import it as a Maven project. Check out tag ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(i.Z,{name:"currentVersion"})}),". Before running the examples, build the project.\nThese examples are located at ",(0,r.jsx)(n.code,{children:"activej/examples/core/net"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"ping-pong-socket-connection",children:"Ping-Pong Socket Connection"}),"\n",(0,r.jsxs)(n.p,{children:["In this example we will use the ",(0,r.jsx)(n.code,{children:"AbstractReactiveServer"})," implementation,  ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/SimpleServer.java",children:(0,r.jsx)(n.code,{children:"SimpleServer"})}),", which receives a message and sends a response (",(0,r.jsx)(n.code,{children:"PONG"}),"). We will also use ",(0,r.jsx)(a.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/ITcpSocket.java",children:(0,r.jsx)(n.code,{children:"TCP socket"})})," as a client to send 3 request messages (",(0,r.jsx)(n.code,{children:"PING"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/net/src/main/java/PingPongSocketConnection.java tag=REGION_1",children:"public static void main(String[] args) throws IOException {\n  Eventloop eventloop = Eventloop.builder()\n    .withCurrentThread()\n    .build();\n\n  SimpleServer server = SimpleServer.builder(\n      eventloop,\n      socket -> {\n        BinaryChannelSupplier bufsSupplier = BinaryChannelSupplier.of(ChannelSuppliers.ofSocket(socket));\n        repeat(() ->\n          bufsSupplier.decode(DECODER)\n            .whenResult(x -> System.out.println(x))\n            .then(() -> socket.write(wrapAscii(RESPONSE_MSG)))\n            .map($ -> true))\n          .whenComplete(socket::close);\n      })\n    .withListenAddress(ADDRESS)\n    .withAcceptOnce()\n    .build();\n\n  server.listen();\n\n  TcpSocket.connect(eventloop, ADDRESS)\n    .whenResult(socket -> {\n      BinaryChannelSupplier bufsSupplier = BinaryChannelSupplier.of(ChannelSuppliers.ofSocket(socket));\n      loop(0,\n        i -> i < ITERATIONS,\n        i -> socket.write(wrapAscii(REQUEST_MSG))\n          .then(() -> bufsSupplier.decode(DECODER)\n            .whenResult(x -> System.out.println(x))\n            .map($2 -> i + 1)))\n        .whenComplete(socket::close);\n    })\n    .whenException(e -> {throw new RuntimeException(e);});\n\n  eventloop.run();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{url:"/examples/core/net/src/main/java/PingPongSocketConnection.java",children:"See full example on GitHub"})})}),"\n",(0,r.jsx)(n.h3,{id:"csp-tcp-client",children:"CSP TCP Client"}),"\n",(0,r.jsx)(n.p,{children:"A simple TCP console client that connects to a TCP server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/net/src/main/java/csp/TcpClientExample.java tag=REGION_1",children:'private void run() {\n  System.out.println("Connecting to server at localhost (port 9922)...");\n  eventloop.connect(new InetSocketAddress("localhost", 9922), (socketChannel, e) -> {\n    if (e == null) {\n      System.out.println("Connected to server, enter some text and send it by pressing \'Enter\'.");\n      ITcpSocket socket;\n      try {\n        socket = TcpSocket.wrapChannel(getCurrentReactor(), socketChannel, null);\n      } catch (IOException ioException) {\n        throw new RuntimeException(ioException);\n      }\n\n      BinaryChannelSupplier.of(ChannelSuppliers.ofSocket(socket))\n        .decodeStream(ByteBufsDecoders.ofCrlfTerminatedBytes())\n        .streamTo(ChannelConsumers.ofConsumer(buf -> System.out.println(buf.asString(UTF_8))));\n\n      startCommandLineInterface(socket);\n    } else {\n      System.out.printf("Could not connect to server, make sure it is started: %s%n", e);\n    }\n  });\n  eventloop.run();\n}\n\npublic static void main(String[] args) {\n  new TcpClientExample().run();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"It sends characters, receives some data back through the CSP channel, parses it and then outputs it to the console."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{url:"/examples/core/net/src/main/java/csp/TcpClientExample.java",children:"See full example on GitHub"})})}),"\n",(0,r.jsx)(n.h3,{id:"csp-tcp-server",children:"CSP TCP Server"}),"\n",(0,r.jsx)(n.p,{children:"A simple TCP echo server running in an eventloop:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/net/src/main/java/csp/TcpServerExample.java tag=REGION_1",children:'public static void main(String[] args) throws Exception {\n  Eventloop eventloop = Eventloop.builder()\n    .withCurrentThread()\n    .build();\n\n  SimpleServer server = SimpleServer.builder(eventloop, socket ->\n      BinaryChannelSupplier.of(ChannelSuppliers.ofSocket(socket))\n        .decodeStream(ByteBufsDecoders.ofCrlfTerminatedBytes())\n        .peek(buf -> System.out.println("client:" + buf.getString(UTF_8)))\n        .map(buf -> {\n          ByteBuf serverBuf = ByteBufStrings.wrapUtf8("Server> ");\n          return ByteBufPool.append(serverBuf, buf);\n        })\n        .map(buf -> ByteBufPool.append(buf, CRLF))\n        .streamTo(ChannelConsumers.ofSocket(socket)))\n    .withListenPort(PORT)\n    .build();\n\n  server.listen();\n\n  System.out.println("Server is running");\n  System.out.println("You can connect from telnet with command: telnet localhost 9922 or by running csp.TcpClientExample");\n\n  eventloop.run();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This server listens for connections, and when a client connects, it parses its message and sends it back as a CSP channel via socket."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{url:"/examples/core/net/src/main/java/csp/TcpServerExample.java",children:"See full example on GitHub"})})}),"\n",(0,r.jsx)(n.h3,{id:"datastream-tcp-client",children:"Datastream TCP Client"}),"\n",(0,r.jsx)(o.Z,{chart:"\ngraph TB\n    id3-.->id4\n    subgraph Client\n    id1(produce ints)--\x3eid2(serialize them into bytes)\n    id2--\x3eid3(send bytes over the network)\n    id9(receive those bytes from network)--\x3eid10(deserialize bytes into strings)\n    id10 --\x3e id11(collect those strings in a list)\n    end\n    id8-.->id9\n    subgraph Server\n    id4(receive bytes from network)--\x3eid5(deserialize bytes into ints)\n    id5--\x3eid6(compute strings from those ints somehow)\n    id6--\x3eid7(serialize strings into bytes)\n    id7--\x3eid8(send those bytes over the network)\n    end\n"}),"\n",(0,r.jsxs)(n.p,{children:["This image illustrates the communication and transformations between TCP client and a server that use ",(0,r.jsx)(n.a,{href:"/async-io/datastream",children:"Datastream"})," to process data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/net/src/main/java/datastream/TcpClientExample.java tag=EXAMPLE",children:'public final class TcpClientExample {\n  public static final int PORT = 9922;\n\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.builder()\n      .withFatalErrorHandler(rethrow())\n      .build();\n\n    eventloop.connect(new InetSocketAddress("localhost", PORT), (socketChannel, e) -> {\n      if (e == null) {\n        ITcpSocket socket;\n        try {\n          socket = TcpSocket.wrapChannel(eventloop, socketChannel, null);\n        } catch (IOException ioEx) {\n          throw new RuntimeException(ioEx);\n        }\n\n        StreamSuppliers.ofValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n          .transformWith(ChannelSerializer.create(INT_SERIALIZER))\n          .streamTo(ChannelConsumers.ofSocket(socket));\n\n        ChannelSuppliers.ofSocket(socket)\n          .transformWith(ChannelDeserializer.create(UTF8_SERIALIZER))\n          .toList()\n          .whenResult(list -> list.forEach(System.out::println));\n      } else {\n        System.out.printf("Could not connect to server, make sure it is started: %s%n", e);\n      }\n    });\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{url:"/examples/core/net/src/main/java/datastream/TcpClientExample.java",children:"See full example on GitHub"})})}),"\n",(0,r.jsx)(n.h3,{id:"datastream-tcp-server",children:"Datastream TCP Server"}),"\n",(0,r.jsxs)(n.p,{children:["This server represents ",(0,r.jsx)(n.code,{children:"Server"})," from the above illustration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"url=/examples/core/net/src/main/java/datastream/TcpServerExample.java tag=EXAMPLE",children:'public final class TcpServerExample {\n\n  public static void main(String[] args) throws IOException {\n    Eventloop eventloop = Eventloop.create();\n\n    InetSocketAddress address = new InetSocketAddress("localhost", TcpClientExample.PORT);\n    ServerSocketSettings socketSettings = ServerSocketSettings.defaultInstance();\n    eventloop.listen(address, socketSettings,\n      channel -> {\n        ITcpSocket socket;\n\n        try {\n          socket = TcpSocket.wrapChannel(eventloop, channel, null);\n          System.out.println("Client connected: " + channel.getRemoteAddress());\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        ChannelSuppliers.ofSocket(socket)\n          .transformWith(ChannelDeserializer.create(INT_SERIALIZER))\n          .transformWith(StreamTransformers.mapper(x -> x + " times 10 = " + x * 10))\n          .transformWith(ChannelSerializer.create(UTF8_SERIALIZER))\n          .streamTo(ChannelConsumers.ofSocket(socket));\n      });\n\n    System.out.println("Connect to the server by running datastream.TcpClientExample");\n\n    eventloop.run();\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(a.Z,{url:"/examples/core/net/src/main/java/datastream/TcpServerExample.java",children:"See full example on GitHub"})})})]})}function v(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},7618:(e,n,t)=>{t.d(n,{Z:()=>a});t(7294);var r=t(9962),s=t(5893);const a=e=>{let{url:n,text:t,isInline:a=!0,children:i}=e;const{siteConfig:o}=(0,r.Z)(),c=n.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return(0,s.jsx)("a",{style:a?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+c+n,target:"_blank",children:t||i})}},4304:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),s=t(6365),a=t(5893);s.L.initialize({startOnLoad:!0});const i=e=>{let{chart:n}=e;return(0,r.useEffect)((()=>{s.L.contentLoaded()}),[]),(0,a.jsx)("div",{className:"mermaid",children:n})}},7815:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var r=t(9962);const s=e=>{let{name:n}=e;const{siteConfig:t}=(0,r.Z)();if(!n)throw new Error("Variable name is required");if(void 0===t.customFields[n])throw new Error(`Variable ${n} not exist`);return t.customFields[n]}}}]);
"use strict"; (self.webpackChunkactivejdocs = self.webpackChunkactivejdocs || []).push([[9081], { 2393: (e, i, n) => { n.r(i), n.d(i, { assets: () => c, contentTitle: () => o, default: () => h, frontMatter: () => s, metadata: () => a, toc: () => l }); var t = n(5893), r = n(1151); const s = { title: "Reactify-Core | Platform Overview", sidebar_label: "Overview", keywords: ["java", "java framework", "spring alternative", "netty alternative", "jetty alternative", "nodejs alternative", "guice alternative", "asynchronous", "eventloop", "java nio", "embedded http", "java http server", "java http client", "high load", "streams", "serializers", "http", "code generation", "crdt"], description: "With Reactify-Core you can create web applications extremely fast and simply, which may resemble Node.js approach." }, o = "Introduction", a = { id: "overview", title: "Reactify-Core | Platform Overview", description: "With Reactify-Core you can create web applications extremely fast and simply, which may resemble Node.js approach.", source: "@site/docs/overview.mdx", sourceDirName: ".", slug: "/overview", permalink: "/overview", draft: !1, unlisted: !1, tags: [], version: "current", frontMatter: { title: "Reactify-Core | Platform Overview", sidebar_label: "Overview", keywords: ["java", "java framework", "spring alternative", "netty alternative", "jetty alternative", "nodejs alternative", "guice alternative", "asynchronous", "eventloop", "java nio", "embedded http", "java http server", "java http client", "high load", "streams", "serializers", "http", "code generation", "crdt"], description: "With Reactify-Core you can create web applications extremely fast and simply, which may resemble Node.js approach." }, sidebar: "docs", next: { title: "Eventloop", permalink: "/async-io/eventloop" } }, c = {}, l = [{ value: "Core Features", id: "core-features", level: 2 }, { value: "Core components:", id: "core-components", level: 3 }, { value: "Bytecode manipulation tools:", id: "bytecode-manipulation-tools", level: 3 }, { value: "Cluster technologies:", id: "cluster-technologies", level: 3 }, { value: "Reactify-Core Background", id: "activej-background", level: 2 }]; function d(e) { const i = { a: "a", code: "code", h1: "h1", h2: "h2", h3: "h3", li: "li", p: "p", strong: "strong", ul: "ul", ...(0, r.a)(), ...e.components }; return (0, t.jsxs)(t.Fragment, { children: [(0, t.jsx)(i.h1, { id: "introduction", children: "Introduction" }), "\n", (0, t.jsx)(i.p, { children: "Reactify-Core is a set of orthogonal minimalist libraries, with as few dependencies as possible with respect to each other,\nthat can be used together or separately. This was the design goal - not to develop yet another framework that would\nforce the user to use it on an all-or-nothing basis, but instead to give the user as much freedom as possible in terms\nof choosing library components." }), "\n", (0, t.jsx)(i.p, { children: "Reactify-Core consists of a range of libraries, ranging from dependency injection and high-performance asynchronous I/O\n to application servers and big data solutions. It is designed to be self-sufficient\n simple, lightweight, and provide competitive performance." }), "\n", (0, t.jsx)(i.p, { children: "You can utilize Reactify-Core to build scalable web applications, backend microservice system, distributed systems, and deploy it for high-load\ndata processing." }), "\n", (0, t.jsx)(i.h2, { id: "core-features", children: "Core Features" }), "\n", (0, t.jsx)(i.p, { children: "The distinguishing features of Reactify-Core are simplicity, high performance, and consistency.\n Moreover, Reactify-Core offers a simple\nprogramming approach, prioritizing business logic over framework specifications." }), "\n", (0, t.jsx)(i.h3, { id: "core-components", children: "Core components:" }), "\n", (0, t.jsxs)(i.ul, { children: ["\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/inject", children: "Reactify-Core Inject" }), ". A lightweight Dependency Injection library with a rich toolkit. Can be used\nas a stand-alone library."] }), "\n", (0, t.jsxs)(i.li, { children: ["Async I/O core: ", (0, t.jsx)(i.a, { href: "/async-io/promise", children: (0, t.jsx)(i.code, { children: "Promise" }) }), ", ", (0, t.jsx)(i.a, { href: "/async-io/eventloop", children: (0, t.jsx)(i.code, { children: "Eventloop" }) }), ", ", (0, t.jsx)(i.a, { href: "/async-io/net", children: (0, t.jsx)(i.code, { children: "Net" }) }), "."] }), "\n", (0, t.jsxs)(i.li, { children: ["Fast asynchronous data stream processing: ", (0, t.jsx)(i.a, { href: "/async-io/datastream", children: (0, t.jsx)(i.code, { children: "Datastream" }) }), ", ", (0, t.jsx)(i.a, { href: "/async-io/csp", children: (0, t.jsx)(i.code, { children: "CSP" }) }), "."] }), "\n", (0, t.jsxs)(i.li, { children: ["High-performance ", (0, t.jsx)(i.a, { href: "/http", children: "HTTP" }), " components including asynchronous HTTP clients and servers. Can be used independently of Reactify-Core."] }), "\n", (0, t.jsxs)(i.li, { children: ["Bootstrapping and lifecycle management utils: ", (0, t.jsx)(i.a, { href: "/boot/launcher", children: (0, t.jsx)(i.code, { children: "Launcher" }) }), ", ", (0, t.jsx)(i.a, { href: "/boot/servicegraph", children: (0, t.jsx)(i.code, { children: "Service Graph" }) }), ", JMX, Triggers."] }), "\n"] }), "\n", (0, t.jsx)(i.h3, { id: "bytecode-manipulation-tools", children: "Bytecode manipulation tools:" }), "\n", (0, t.jsxs)(i.ul, { children: ["\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/serializer", children: (0, t.jsx)(i.strong, { children: "Reactify-Core Serializer" }) }), " - ", (0, t.jsx)(i.a, { href: "https://github.com/activej/jvm-serializers", children: "the world\u2019s fastest JVM-based serializer" }), " with bytecode generation at runtime."] }), "\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/codegen", children: (0, t.jsx)(i.strong, { children: "Reactify-Core Codegen" }) }), " - dynamic bytecode generator without the complexity of direct bytecode\nmanipulation. Features a streamlined and concise API."] }), "\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/specializer", children: (0, t.jsx)(i.strong, { children: "Reactify-Core Specializer" }) }), " - a unique technology that automagically speeds up\nyour code significantly by optimizing it for the JVM."] }), "\n"] }), "\n", (0, t.jsx)(i.h3, { id: "cluster-technologies", children: "Cluster technologies:" }), "\n", (0, t.jsxs)(i.ul, { children: ["\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/rpc", children: (0, t.jsx)(i.strong, { children: "Reactify-Core RPC" }) }), " - high-performance binary protocol for developing distributed applications and\nmicroservices solutions"] }), "\n", (0, t.jsxs)(i.li, { children: [(0, t.jsx)(i.a, { href: "/fs", children: (0, t.jsx)(i.strong, { children: "Reactify-Core FS" }) }), " - provides effective tools for developing scalable local or remote file storages with\na support of data redundancy, rebalancing, and resharding."] }), "\n"] }), "\n", (0, t.jsx)(i.h2, { id: "activej-background", children: "Reactify-Core Background" }), "\n", (0, t.jsx)(i.p, { children: "The Reactify-Core project is an improved version of the DataKernel framework. Since the release of v3.0, it has been greatly improved and\nrestructured." })] }) } function h(e = {}) { const { wrapper: i } = { ...(0, r.a)(), ...e.components }; return i ? (0, t.jsx)(i, { ...e, children: (0, t.jsx)(d, { ...e }) }) : d(e) } }, 1151: (e, i, n) => { n.d(i, { Z: () => a, a: () => o }); var t = n(7294); const r = {}, s = t.createContext(r); function o(e) { const i = t.useContext(s); return t.useMemo((function () { return "function" == typeof e ? e(i) : { ...i, ...e } }), [i, e]) } function a(e) { let i; return i = e.disableParentContext ? "function" == typeof e.components ? e.components(r) : e.components || r : o(e.components), t.createElement(s.Provider, { value: i }, e.children) } } }]);